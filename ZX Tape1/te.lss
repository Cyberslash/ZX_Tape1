
te.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00800060  000035da  0000366e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000026f  00800112  00800112  00003720  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00003720  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000622  00000000  00000000  00003740  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000027c2  00000000  00000000  00003d62  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000336  00000000  00000000  00006524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e5d  00000000  00000000  0000685a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  000086b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000082f  00000000  00000000  00008958  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001691  00000000  00000000  00009187  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000390  00000000  00000000  0000a818  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__ctors_end>
       4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
       8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
       c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      10:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      14:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      18:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      1c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      20:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      24:	0c 94 c9 0e 	jmp	0x1d92	; 0x1d92 <__vector_9>
      28:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      2c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      30:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      34:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      38:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      3c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      40:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      44:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      48:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      4c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      50:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>

00000054 <Text_Main_Menu_Select>:
      54:	20 20 20 20 42 69 62 65 72 69 74 65 20 20 20 20         Biberite    
	...

00000066 <Text_Main_Memory_Test>:
      66:	20 20 20 54 45 43 54 20 50 41 4d 45 54 49 20 20        TECT PAMETI  
	...

00000078 <Text_Main_Memory_Test_Error>:
      78:	20 45 52 52 4f 52 20 50 41 4d 45 54 49 20 21 00      ERROR PAMETI !.
	...

00000089 <Text_Main_Memory_Test_OK>:
      89:	54 45 43 54 20 6f 6b 20 00 00                       TECT ok ..

00000093 <Text_Tape_Menu_No_Image>:
      93:	4e 6f 20 74 61 70 20 21 00 00                       No tap !..

0000009d <RusCodeTable>:
      9d:	c0 41 c1 a0 c2 42 c3 a1 c4 e0 c5 45 a8 a2 c6 a3     .A...B.....E....
      ad:	c7 a4 c8 a5 c9 a6 ca 4b cb a7 cc 4d cd 48 ce 4f     .......K...M.H.O
      bd:	cf a8 d0 50 d1 43 d2 54 d3 a9 d4 aa d5 58 d6 e1     ...P.C.T.....X..
      cd:	d7 ab d8 ac d9 e2 da ad db ae dc 62 dd af de b0     ...........b....
      dd:	df b1 e0 61 e1 b2 e2 b3 e3 b4 e4 e3 e5 65 b8 b5     ...a.........e..
      ed:	e6 b6 e7 b7 e8 b8 e9 b9 ea ba eb bb ec bc ed bd     ................
      fd:	ee 6f ef be f0 70 f1 63 f2 bf f3 79 f4 e4 f5 78     .o...p.c...y...x
     10d:	f6 e5 f7 c0 f8 c1 f9 e6 fa c2 fb c3 fc c4 fd c5     ................
     11d:	fe c6 ff c7                                         ....

00000121 <Text_SD_No_SPI_Up>:
     121:	54 68 65 20 6d 65 6d 6f 72 79 20 63 61 72 64 20     The memory card 
     131:	69 73 20 6e 6f 74 20 00 00                          is not ..

0000013a <Text_SD_No_SPI_Down>:
     13a:	73 75 70 70 6f 72 74 73 20 53 50 49 00 00           supports SPI..

00000148 <Text_SD_No_Response>:
     148:	4d 61 70 20 73 68 75 74 20 75 70 21 20 20 20 00     Map shut up!   .
	...

00000159 <Text_SD_Size_Error_Up>:
     159:	43 61 70 61 63 69 74 79 20 6f 66 20 53 44 20 63     Capacity of SD c
     169:	61 72 64 20 20 00 00                                ard  ..

00000170 <Text_SD_Size_Error_Down>:
     170:	6e 6f 74 20 64 65 66 69 6e 65 64 21 20 20 20 00     not defined!   .
	...

00000181 <Text_SD_Size>:
     181:	43 61 70 61 63 69 74 79 20 6f 66 20 53 44 20 63     Capacity of SD c
     191:	61 72 64 20 20 00 00                                ard  ..

00000198 <Text_FAT_Type>:
     198:	46 69 6c 65 20 73 79 73 74 65 6d 20 00 00           File system ..

000001a6 <Text_FAT32>:
     1a6:	46 41 54 33 32 2d 20 45 72 72 6f 72 21 20 20 00     FAT32- Error!  .
	...

000001b7 <Text_FAT16>:
     1b7:	46 41 54 31 36 2d 20 4f 6b 2e 20 20 20 20 20 20     FAT16- Ok.      
	...

000001c9 <Text_FAT12>:
     1c9:	46 41 54 31 32 2d 20 45 72 72 6f 72 21 20 20 00     FAT12- Error!  .
	...

000001da <__ctors_end>:
     1da:	11 24       	eor	r1, r1
     1dc:	1f be       	out	0x3f, r1	; 63
     1de:	cf e5       	ldi	r28, 0x5F	; 95
     1e0:	d4 e0       	ldi	r29, 0x04	; 4
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	cd bf       	out	0x3d, r28	; 61

000001e6 <__do_copy_data>:
     1e6:	11 e0       	ldi	r17, 0x01	; 1
     1e8:	a0 e6       	ldi	r26, 0x60	; 96
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ed       	ldi	r30, 0xDA	; 218
     1ee:	f5 e3       	ldi	r31, 0x35	; 53
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <.do_copy_data_start>

000001f2 <.do_copy_data_loop>:
     1f2:	05 90       	lpm	r0, Z+
     1f4:	0d 92       	st	X+, r0

000001f6 <.do_copy_data_start>:
     1f6:	a2 31       	cpi	r26, 0x12	; 18
     1f8:	b1 07       	cpc	r27, r17
     1fa:	d9 f7       	brne	.-10     	; 0x1f2 <.do_copy_data_loop>

000001fc <__do_clear_bss>:
     1fc:	13 e0       	ldi	r17, 0x03	; 3
     1fe:	a2 e1       	ldi	r26, 0x12	; 18
     200:	b1 e0       	ldi	r27, 0x01	; 1
     202:	01 c0       	rjmp	.+2      	; 0x206 <.do_clear_bss_start>

00000204 <.do_clear_bss_loop>:
     204:	1d 92       	st	X+, r1

00000206 <.do_clear_bss_start>:
     206:	a1 38       	cpi	r26, 0x81	; 129
     208:	b1 07       	cpc	r27, r17
     20a:	e1 f7       	brne	.-8      	; 0x204 <.do_clear_bss_loop>
     20c:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <main>
     210:	0c 94 eb 1a 	jmp	0x35d6	; 0x35d6 <_exit>

00000214 <__bad_interrupt>:
     214:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000218 <DRAM_Init>:
//инициализация дисплея
//----------------------------------------------------------------------------------------------------
void DRAM_Init(void)
{
 //настроим порты 
 DRAM_RAS_DDR|=(1<<DRAM_RAS);
     218:	8d 9a       	sbi	0x11, 5	; 17
 DRAM_CAS_DDR|=(1<<DRAM_CAS);
     21a:	8f 9a       	sbi	0x11, 7	; 17
 DRAM_WE_DDR|=(1<<DRAM_WE);
     21c:	8e 9a       	sbi	0x11, 6	; 17
 DRAM_OE_DDR|=(1<<DRAM_OE);
     21e:	a0 9a       	sbi	0x14, 0	; 20
 
 DRAM_A0_A7_DDR=0xff;
     220:	8f ef       	ldi	r24, 0xFF	; 255
     222:	8a bb       	out	0x1a, r24	; 26
 DRAM_A8_DDR|=(1<<DRAM_A8); 
     224:	a1 9a       	sbi	0x14, 1	; 20
  
 DRAM_D1_D4_DDR&=0xff^(DRAM_D1_D4_MASK);
     226:	87 b3       	in	r24, 0x17	; 23
     228:	80 7f       	andi	r24, 0xF0	; 240
     22a:	87 bb       	out	0x17, r24	; 23
 //переводим все сигналы управления памятью в неактивное состояние
 DRAM_RAS_PORT|=(1<<DRAM_RAS);
     22c:	95 9a       	sbi	0x12, 5	; 18
 DRAM_CAS_PORT|=(1<<DRAM_CAS);
     22e:	97 9a       	sbi	0x12, 7	; 18
 DRAM_WE_PORT|=(1<<DRAM_WE);
     230:	96 9a       	sbi	0x12, 6	; 18
 DRAM_OE_PORT|=(1<<DRAM_OE);
     232:	a8 9a       	sbi	0x15, 0	; 21
}
     234:	08 95       	ret

00000236 <DRAM_Refresh>:
//произвести цикл скрытой регенерации
//----------------------------------------------------------------------------------------------------
void DRAM_Refresh(void)
{
 //даём сигнал регенерации
 DRAM_CAS_PORT&=0xff^(1<<DRAM_CAS);
     236:	97 98       	cbi	0x12, 7	; 18
 asm volatile ("nop"::);
     238:	00 00       	nop
 asm volatile ("nop"::);
     23a:	00 00       	nop
 DRAM_RAS_PORT&=0xff^(1<<DRAM_RAS);
     23c:	95 98       	cbi	0x12, 5	; 18
	...
 asm volatile ("nop"::);
 asm volatile ("nop"::);
 asm volatile ("nop"::);
 asm volatile ("nop"::);
 DRAM_CAS_PORT|=(1<<DRAM_CAS);
     246:	97 9a       	sbi	0x12, 7	; 18
 asm volatile ("nop"::);
     248:	00 00       	nop
 asm volatile ("nop"::);
     24a:	00 00       	nop
 DRAM_RAS_PORT|=(1<<DRAM_RAS);
     24c:	95 9a       	sbi	0x12, 5	; 18
}
     24e:	08 95       	ret

00000250 <DRAM_ReadNibble>:
//----------------------------------------------------------------------------------------------------
//считать ниббл
//----------------------------------------------------------------------------------------------------
unsigned char DRAM_ReadNibble(unsigned long addr,bool nibble_one)
{
     250:	0f 93       	push	r16
     252:	1f 93       	push	r17
 //шина данных - на чтение
 DRAM_D1_D4_DDR&=0xff^(DRAM_D1_D4_MASK);
     254:	27 b3       	in	r18, 0x17	; 23
     256:	20 7f       	andi	r18, 0xF0	; 240
     258:	27 bb       	out	0x17, r18	; 23
 DRAM_OE_PORT|=1<<DRAM_OE;
     25a:	a8 9a       	sbi	0x15, 0	; 21
 //выставляем младшую часть адреса 
 DRAM_A0_A7_PORT=(addr&0xff);
     25c:	6b bb       	out	0x1b, r22	; 27
 DRAM_A8_PORT&=0xff^(1<<DRAM_A8);
     25e:	a9 98       	cbi	0x15, 1	; 21
 DRAM_A8_PORT|=(((addr>>16)&0x01)<<DRAM_A8);
     260:	55 b3       	in	r21, 0x15	; 21
     262:	8c 01       	movw	r16, r24
     264:	22 27       	eor	r18, r18
     266:	33 27       	eor	r19, r19
     268:	01 70       	andi	r16, 0x01	; 1
     26a:	00 0f       	add	r16, r16
     26c:	05 2b       	or	r16, r21
     26e:	05 bb       	out	0x15, r16	; 21
 //даём сигнал RAS
 DRAM_RAS_PORT&=0xff^(1<<DRAM_RAS);
     270:	95 98       	cbi	0x12, 5	; 18
 //выставляем старшую часть адреса
 DRAM_A0_A7_PORT=(addr>>8)&0xff;
     272:	67 2f       	mov	r22, r23
     274:	78 2f       	mov	r23, r24
     276:	89 2f       	mov	r24, r25
     278:	99 27       	eor	r25, r25
     27a:	6b bb       	out	0x1b, r22	; 27
 DRAM_A8_PORT&=0xff^(1<<DRAM_A8);
     27c:	a9 98       	cbi	0x15, 1	; 21
 if (nibble_one==false) DRAM_A8_PORT|=1<<DRAM_A8;
     27e:	44 23       	and	r20, r20
     280:	09 f4       	brne	.+2      	; 0x284 <DRAM_ReadNibble+0x34>
     282:	a9 9a       	sbi	0x15, 1	; 21
 //даём сигнал CAS
 DRAM_CAS_PORT&=0xff^(1<<DRAM_CAS); 
     284:	97 98       	cbi	0x12, 7	; 18
 asm volatile ("nop"::);
     286:	00 00       	nop
 asm volatile ("nop"::);
     288:	00 00       	nop
 //считываем данные
 DRAM_OE_PORT&=0xff^(1<<DRAM_OE);
     28a:	a8 98       	cbi	0x15, 0	; 21
 asm volatile ("nop"::);
     28c:	00 00       	nop
 asm volatile ("nop"::);
     28e:	00 00       	nop
 
 unsigned char byte=(DRAM_D1_D4_PIN&0x0f);
     290:	86 b3       	in	r24, 0x16	; 22
 DRAM_OE_PORT|=1<<DRAM_OE;
     292:	a8 9a       	sbi	0x15, 0	; 21
 //снимаем сигнал CAS
 DRAM_CAS_PORT|=(1<<DRAM_CAS); 
     294:	97 9a       	sbi	0x12, 7	; 18
 //снимаем сигнал CAS
 DRAM_CAS_PORT|=(1<<DRAM_CAS);
     296:	97 9a       	sbi	0x12, 7	; 18
 //снимаем сигнал RAS
 DRAM_RAS_PORT|=(1<<DRAM_RAS);
     298:	95 9a       	sbi	0x12, 5	; 18
 return(byte);
}
     29a:	8f 70       	andi	r24, 0x0F	; 15
     29c:	1f 91       	pop	r17
     29e:	0f 91       	pop	r16
     2a0:	08 95       	ret

000002a2 <DRAM_WriteNibble>:
//----------------------------------------------------------------------------------------------------
//записать ниббл
//----------------------------------------------------------------------------------------------------
void DRAM_WriteNibble(unsigned long addr,unsigned char nibble,bool nibble_one)
{
     2a2:	ef 92       	push	r14
     2a4:	ff 92       	push	r15
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
 DRAM_OE_PORT|=1<<DRAM_OE;
     2aa:	a8 9a       	sbi	0x15, 0	; 21
 //шина данных - на запись
 DRAM_D1_D4_DDR|=DRAM_D1_D4_MASK;
     2ac:	37 b3       	in	r19, 0x17	; 23
     2ae:	3f 60       	ori	r19, 0x0F	; 15
     2b0:	37 bb       	out	0x17, r19	; 23
 //выставляем младшую часть адреса
 DRAM_A0_A7_PORT=(addr&0xff); 
     2b2:	6b bb       	out	0x1b, r22	; 27
 DRAM_A8_PORT&=0xff^(1<<DRAM_A8);
     2b4:	a9 98       	cbi	0x15, 1	; 21
 DRAM_A8_PORT|=(((addr>>16)&0x01)<<DRAM_A8);
     2b6:	35 b3       	in	r19, 0x15	; 21
     2b8:	7c 01       	movw	r14, r24
     2ba:	00 27       	eor	r16, r16
     2bc:	11 27       	eor	r17, r17
     2be:	51 e0       	ldi	r21, 0x01	; 1
     2c0:	e5 22       	and	r14, r21
     2c2:	ee 0c       	add	r14, r14
     2c4:	e3 2a       	or	r14, r19
     2c6:	e5 ba       	out	0x15, r14	; 21
 //даём сигнал RAS
 DRAM_RAS_PORT&=0xff^(1<<DRAM_RAS);
     2c8:	95 98       	cbi	0x12, 5	; 18
 asm volatile ("nop"::);
     2ca:	00 00       	nop
 //включаем сигнал записи
 DRAM_WE_PORT&=0xff^(1<<DRAM_WE);	 
     2cc:	96 98       	cbi	0x12, 6	; 18
 asm volatile ("nop"::);
     2ce:	00 00       	nop
 //выставляем старшую часть адреса
 DRAM_A0_A7_PORT=(addr>>8)&0xff; 
     2d0:	67 2f       	mov	r22, r23
     2d2:	78 2f       	mov	r23, r24
     2d4:	89 2f       	mov	r24, r25
     2d6:	99 27       	eor	r25, r25
     2d8:	6b bb       	out	0x1b, r22	; 27
 DRAM_A8_PORT&=0xff^(1<<DRAM_A8);
     2da:	a9 98       	cbi	0x15, 1	; 21
 if (nibble_one==false) DRAM_A8_PORT|=1<<DRAM_A8;
     2dc:	22 23       	and	r18, r18
     2de:	09 f4       	brne	.+2      	; 0x2e2 <DRAM_WriteNibble+0x40>
     2e0:	a9 9a       	sbi	0x15, 1	; 21
 //задаём данные
 DRAM_D1_D4_PORT&=0xff^(DRAM_D1_D4_MASK);
     2e2:	88 b3       	in	r24, 0x18	; 24
     2e4:	80 7f       	andi	r24, 0xF0	; 240
     2e6:	88 bb       	out	0x18, r24	; 24
 DRAM_D1_D4_PORT|=nibble&0x0f;
     2e8:	88 b3       	in	r24, 0x18	; 24
     2ea:	4f 70       	andi	r20, 0x0F	; 15
     2ec:	84 2b       	or	r24, r20
     2ee:	88 bb       	out	0x18, r24	; 24
 //даём сигнал CAS
 DRAM_CAS_PORT&=0xff^(1<<DRAM_CAS);
     2f0:	97 98       	cbi	0x12, 7	; 18
 asm volatile ("nop"::);
     2f2:	00 00       	nop
 asm volatile ("nop"::);
     2f4:	00 00       	nop
 //снимаем сигнал записи
 DRAM_WE_PORT|=(1<<DRAM_WE);
     2f6:	96 9a       	sbi	0x12, 6	; 18
 //снимаем сигнал CAS
 DRAM_CAS_PORT|=(1<<DRAM_CAS); 
     2f8:	97 9a       	sbi	0x12, 7	; 18
 //снимаем сигнал RAS
 DRAM_RAS_PORT|=(1<<DRAM_RAS);
     2fa:	95 9a       	sbi	0x12, 5	; 18
}
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	ff 90       	pop	r15
     302:	ef 90       	pop	r14
     304:	08 95       	ret

00000306 <DRAM_ReadByte>:

//----------------------------------------------------------------------------------------------------
//считать байт
//----------------------------------------------------------------------------------------------------
unsigned char DRAM_ReadByte(unsigned long addr)
{
     306:	df 92       	push	r13
     308:	ef 92       	push	r14
     30a:	ff 92       	push	r15
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	7b 01       	movw	r14, r22
     312:	8c 01       	movw	r16, r24
 unsigned char byte=DRAM_ReadNibble(addr,false);
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	0e 94 28 01 	call	0x250	; 0x250 <DRAM_ReadNibble>
 byte<<=4;
     31a:	d8 2e       	mov	r13, r24
     31c:	d2 94       	swap	r13
     31e:	f0 ef       	ldi	r31, 0xF0	; 240
     320:	df 22       	and	r13, r31
 byte|=DRAM_ReadNibble(addr,true);
     322:	c8 01       	movw	r24, r16
     324:	b7 01       	movw	r22, r14
     326:	41 e0       	ldi	r20, 0x01	; 1
     328:	0e 94 28 01 	call	0x250	; 0x250 <DRAM_ReadNibble>
 return(byte);
}
     32c:	8d 29       	or	r24, r13
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	ff 90       	pop	r15
     334:	ef 90       	pop	r14
     336:	df 90       	pop	r13
     338:	08 95       	ret

0000033a <DRAM_WriteByte>:
//----------------------------------------------------------------------------------------------------
//записать байт
//----------------------------------------------------------------------------------------------------
void DRAM_WriteByte(unsigned long addr,unsigned char byte)
{
     33a:	df 92       	push	r13
     33c:	ef 92       	push	r14
     33e:	ff 92       	push	r15
     340:	0f 93       	push	r16
     342:	1f 93       	push	r17
     344:	7b 01       	movw	r14, r22
     346:	8c 01       	movw	r16, r24
     348:	d4 2e       	mov	r13, r20
 DRAM_WriteNibble(addr,byte>>4,false);
     34a:	42 95       	swap	r20
     34c:	4f 70       	andi	r20, 0x0F	; 15
     34e:	20 e0       	ldi	r18, 0x00	; 0
     350:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DRAM_WriteNibble>
 DRAM_WriteNibble(addr,byte&0x0f,true);
     354:	8f e0       	ldi	r24, 0x0F	; 15
     356:	d8 22       	and	r13, r24
     358:	c8 01       	movw	r24, r16
     35a:	b7 01       	movw	r22, r14
     35c:	4d 2d       	mov	r20, r13
     35e:	21 e0       	ldi	r18, 0x01	; 1
     360:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DRAM_WriteNibble>
}
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	df 90       	pop	r13
     36e:	08 95       	ret

00000370 <WH1602_SendNibble>:
//----------------------------------------------------------------------------------------------------
//послать ниббл
//----------------------------------------------------------------------------------------------------
void WH1602_SendNibble(unsigned char nibble)
{ 
 WH1602_DB7_PORT&=0xff^(1<<WH1602_DB7);
     370:	ad 98       	cbi	0x15, 5	; 21
 WH1602_DB6_PORT&=0xff^(1<<WH1602_DB6);
     372:	ac 98       	cbi	0x15, 4	; 21
 WH1602_DB5_PORT&=0xff^(1<<WH1602_DB5);
     374:	ab 98       	cbi	0x15, 3	; 21
 WH1602_DB4_PORT&=0xff^(1<<WH1602_DB4);
     376:	aa 98       	cbi	0x15, 2	; 21
 WH1602_E_PORT|=(1<<WH1602_E); 
     378:	ae 9a       	sbi	0x15, 6	; 21
 WH1602_DB7_PORT|=(((nibble>>3)&0x01)<<WH1602_DB7);
     37a:	45 b3       	in	r20, 0x15	; 21
     37c:	28 2f       	mov	r18, r24
     37e:	26 95       	lsr	r18
     380:	26 95       	lsr	r18
     382:	26 95       	lsr	r18
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	21 70       	andi	r18, 0x01	; 1
     388:	30 70       	andi	r19, 0x00	; 0
     38a:	55 e0       	ldi	r21, 0x05	; 5
     38c:	22 0f       	add	r18, r18
     38e:	33 1f       	adc	r19, r19
     390:	5a 95       	dec	r21
     392:	e1 f7       	brne	.-8      	; 0x38c <WH1602_SendNibble+0x1c>
     394:	42 2b       	or	r20, r18
     396:	45 bb       	out	0x15, r20	; 21
 WH1602_DB6_PORT|=(((nibble>>2)&0x01)<<WH1602_DB6);
     398:	45 b3       	in	r20, 0x15	; 21
     39a:	28 2f       	mov	r18, r24
     39c:	26 95       	lsr	r18
     39e:	26 95       	lsr	r18
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	21 70       	andi	r18, 0x01	; 1
     3a4:	30 70       	andi	r19, 0x00	; 0
     3a6:	94 e0       	ldi	r25, 0x04	; 4
     3a8:	22 0f       	add	r18, r18
     3aa:	33 1f       	adc	r19, r19
     3ac:	9a 95       	dec	r25
     3ae:	e1 f7       	brne	.-8      	; 0x3a8 <WH1602_SendNibble+0x38>
     3b0:	42 2b       	or	r20, r18
     3b2:	45 bb       	out	0x15, r20	; 21
 WH1602_DB5_PORT|=(((nibble>>1)&0x01)<<WH1602_DB5);
     3b4:	45 b3       	in	r20, 0x15	; 21
     3b6:	28 2f       	mov	r18, r24
     3b8:	26 95       	lsr	r18
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	21 70       	andi	r18, 0x01	; 1
     3be:	30 70       	andi	r19, 0x00	; 0
     3c0:	b3 e0       	ldi	r27, 0x03	; 3
     3c2:	22 0f       	add	r18, r18
     3c4:	33 1f       	adc	r19, r19
     3c6:	ba 95       	dec	r27
     3c8:	e1 f7       	brne	.-8      	; 0x3c2 <WH1602_SendNibble+0x52>
     3ca:	42 2b       	or	r20, r18
     3cc:	45 bb       	out	0x15, r20	; 21
 WH1602_DB4_PORT|=(((nibble>>0)&0x01)<<WH1602_DB4);
     3ce:	25 b3       	in	r18, 0x15	; 21
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	81 70       	andi	r24, 0x01	; 1
     3d4:	90 70       	andi	r25, 0x00	; 0
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	88 0f       	add	r24, r24
     3dc:	99 1f       	adc	r25, r25
     3de:	28 2b       	or	r18, r24
     3e0:	25 bb       	out	0x15, r18	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3e2:	80 e9       	ldi	r24, 0x90	; 144
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	fc 01       	movw	r30, r24
     3e8:	31 97       	sbiw	r30, 0x01	; 1
     3ea:	f1 f7       	brne	.-4      	; 0x3e8 <WH1602_SendNibble+0x78>
 _delay_us(100); 
 WH1602_E_PORT&=0xff^(1<<WH1602_E);
     3ec:	ae 98       	cbi	0x15, 6	; 21
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	f1 f7       	brne	.-4      	; 0x3ee <WH1602_SendNibble+0x7e>
 _delay_us(100); 
}
     3f2:	08 95       	ret

000003f4 <WH1602_SendData>:
//----------------------------------------------------------------------------------------------------
//послать данные
//----------------------------------------------------------------------------------------------------
void WH1602_SendData(unsigned char byte)
{
     3f4:	1f 93       	push	r17
     3f6:	18 2f       	mov	r17, r24
 WH1602_RS_PORT|=1<<WH1602_RS;//запись данных  
     3f8:	af 9a       	sbi	0x15, 7	; 21
 WH1602_SendNibble(byte>>4);
     3fa:	82 95       	swap	r24
     3fc:	8f 70       	andi	r24, 0x0F	; 15
     3fe:	0e 94 b8 01 	call	0x370	; 0x370 <WH1602_SendNibble>
 WH1602_SendNibble(byte&0x0f);
     402:	81 2f       	mov	r24, r17
     404:	8f 70       	andi	r24, 0x0F	; 15
     406:	0e 94 b8 01 	call	0x370	; 0x370 <WH1602_SendNibble>
}
     40a:	1f 91       	pop	r17
     40c:	08 95       	ret

0000040e <WH1602_SendCommand>:
//----------------------------------------------------------------------------------------------------
//послать команду
//----------------------------------------------------------------------------------------------------
void WH1602_SendCommand(unsigned char byte)
{
     40e:	1f 93       	push	r17
     410:	18 2f       	mov	r17, r24
 WH1602_RS_PORT&=0xff^(1<<WH1602_RS);//запись команд
     412:	af 98       	cbi	0x15, 7	; 21
 WH1602_SendNibble(byte>>4);
     414:	82 95       	swap	r24
     416:	8f 70       	andi	r24, 0x0F	; 15
     418:	0e 94 b8 01 	call	0x370	; 0x370 <WH1602_SendNibble>
 WH1602_SendNibble(byte&0x0f);
     41c:	81 2f       	mov	r24, r17
     41e:	8f 70       	andi	r24, 0x0F	; 15
     420:	0e 94 b8 01 	call	0x370	; 0x370 <WH1602_SendNibble>
}
     424:	1f 91       	pop	r17
     426:	08 95       	ret

00000428 <WH1602_Init>:
//инициализация дисплея
//----------------------------------------------------------------------------------------------------
void WH1602_Init(void)
{
 //настроим порты 
 WH1602_RS_DDR|=(1<<WH1602_RS);
     428:	a7 9a       	sbi	0x14, 7	; 20
 WH1602_E_DDR|=(1<<WH1602_E);
     42a:	a6 9a       	sbi	0x14, 6	; 20
 WH1602_DB7_DDR|=(1<<WH1602_DB7);
     42c:	a5 9a       	sbi	0x14, 5	; 20
 WH1602_DB6_DDR|=(1<<WH1602_DB6);
     42e:	a4 9a       	sbi	0x14, 4	; 20
 WH1602_DB5_DDR|=(1<<WH1602_DB5);
     430:	a3 9a       	sbi	0x14, 3	; 20
 WH1602_DB4_DDR|=(1<<WH1602_DB4);
     432:	a2 9a       	sbi	0x14, 2	; 20
     434:	88 ee       	ldi	r24, 0xE8	; 232
     436:	93 e0       	ldi	r25, 0x03	; 3
     438:	20 e9       	ldi	r18, 0x90	; 144
     43a:	31 e0       	ldi	r19, 0x01	; 1
     43c:	f9 01       	movw	r30, r18
     43e:	31 97       	sbiw	r30, 0x01	; 1
     440:	f1 f7       	brne	.-4      	; 0x43e <WH1602_Init+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     442:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     444:	d9 f7       	brne	.-10     	; 0x43c <WH1602_Init+0x14>
 _delay_ms(100);//ждём включения экрана
 //запускаем дисплей
 //даём несколько раз команду включения
 WH1602_RS_PORT&=0xff^(1<<WH1602_RS);//запись команд
     446:	af 98       	cbi	0x15, 7	; 21
 WH1602_SendNibble(0b0011);//команда включения
     448:	83 e0       	ldi	r24, 0x03	; 3
     44a:	0e 94 b8 01 	call	0x370	; 0x370 <WH1602_SendNibble>
     44e:	88 ee       	ldi	r24, 0xE8	; 232
     450:	93 e0       	ldi	r25, 0x03	; 3
     452:	20 e9       	ldi	r18, 0x90	; 144
     454:	31 e0       	ldi	r19, 0x01	; 1
     456:	f9 01       	movw	r30, r18
     458:	31 97       	sbiw	r30, 0x01	; 1
     45a:	f1 f7       	brne	.-4      	; 0x458 <WH1602_Init+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     45c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     45e:	d9 f7       	brne	.-10     	; 0x456 <WH1602_Init+0x2e>
 _delay_ms(100); 
 WH1602_SendNibble(0b0011);//команда включения
     460:	83 e0       	ldi	r24, 0x03	; 3
     462:	0e 94 b8 01 	call	0x370	; 0x370 <WH1602_SendNibble>
     466:	80 e2       	ldi	r24, 0x20	; 32
     468:	93 e0       	ldi	r25, 0x03	; 3
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <__stack+0xb>
 _delay_us(200);  
 WH1602_SendNibble(0b0011);//команда включения 
     46e:	83 e0       	ldi	r24, 0x03	; 3
     470:	0e 94 b8 01 	call	0x370	; 0x370 <WH1602_SendNibble>
 WH1602_SendNibble(0b0010);//интерфейс 4 бит 
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	0e 94 b8 01 	call	0x370	; 0x370 <WH1602_SendNibble>
 //указываем режим 4 бита, 2 линии, символы 5x11
 WH1602_SendCommand(0b00101100);
     47a:	8c e2       	ldi	r24, 0x2C	; 44
     47c:	0e 94 07 02 	call	0x40e	; 0x40e <WH1602_SendCommand>
     480:	88 e5       	ldi	r24, 0x58	; 88
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	20 e9       	ldi	r18, 0x90	; 144
     486:	31 e0       	ldi	r19, 0x01	; 1
     488:	f9 01       	movw	r30, r18
     48a:	31 97       	sbiw	r30, 0x01	; 1
     48c:	f1 f7       	brne	.-4      	; 0x48a <__stack+0x2b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     48e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     490:	d9 f7       	brne	.-10     	; 0x488 <__stack+0x29>
 _delay_ms(60);
 //отключаем экран
 WH1602_SendCommand(0b00001000);
     492:	88 e0       	ldi	r24, 0x08	; 8
     494:	0e 94 07 02 	call	0x40e	; 0x40e <WH1602_SendCommand>
     498:	88 e5       	ldi	r24, 0x58	; 88
     49a:	92 e0       	ldi	r25, 0x02	; 2
     49c:	20 e9       	ldi	r18, 0x90	; 144
     49e:	31 e0       	ldi	r19, 0x01	; 1
     4a0:	f9 01       	movw	r30, r18
     4a2:	31 97       	sbiw	r30, 0x01	; 1
     4a4:	f1 f7       	brne	.-4      	; 0x4a2 <__stack+0x43>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4a8:	d9 f7       	brne	.-10     	; 0x4a0 <__stack+0x41>
 _delay_ms(60); 
 //очищаем экран 
 WH1602_SendCommand(0b00000001);
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	0e 94 07 02 	call	0x40e	; 0x40e <WH1602_SendCommand>
     4b0:	88 e5       	ldi	r24, 0x58	; 88
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	20 e9       	ldi	r18, 0x90	; 144
     4b6:	31 e0       	ldi	r19, 0x01	; 1
     4b8:	f9 01       	movw	r30, r18
     4ba:	31 97       	sbiw	r30, 0x01	; 1
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <__stack+0x5b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4c0:	d9 f7       	brne	.-10     	; 0x4b8 <__stack+0x59>
 _delay_ms(60); 
 //устанавливаем режим ввода данных с инкрементом ячейки памяти
 WH1602_SendCommand(0b00000110);
     4c2:	86 e0       	ldi	r24, 0x06	; 6
     4c4:	0e 94 07 02 	call	0x40e	; 0x40e <WH1602_SendCommand>
 //включаем экран
 WH1602_SendCommand(0b00001100);
     4c8:	8c e0       	ldi	r24, 0x0C	; 12
     4ca:	0e 94 07 02 	call	0x40e	; 0x40e <WH1602_SendCommand>
     4ce:	88 e5       	ldi	r24, 0x58	; 88
     4d0:	92 e0       	ldi	r25, 0x02	; 2
     4d2:	20 e9       	ldi	r18, 0x90	; 144
     4d4:	31 e0       	ldi	r19, 0x01	; 1
     4d6:	f9 01       	movw	r30, r18
     4d8:	31 97       	sbiw	r30, 0x01	; 1
     4da:	f1 f7       	brne	.-4      	; 0x4d8 <__stack+0x79>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4de:	d9 f7       	brne	.-10     	; 0x4d6 <__stack+0x77>
 _delay_ms(60);  
}
     4e0:	08 95       	ret

000004e2 <WH1602_SetTextUpLine>:
}
//----------------------------------------------------------------------------------------------------
//записать текст в верхнюю строчку экрана
//----------------------------------------------------------------------------------------------------
void WH1602_SetTextUpLine(char *text)
{
     4e2:	af 92       	push	r10
     4e4:	bf 92       	push	r11
     4e6:	cf 92       	push	r12
     4e8:	df 92       	push	r13
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	df 93       	push	r29
     4f2:	cf 93       	push	r28
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	60 97       	sbiw	r28, 0x10	; 16
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	0f be       	out	0x3f, r0	; 63
     502:	cd bf       	out	0x3d, r28	; 61
     504:	18 2f       	mov	r17, r24
     506:	09 2f       	mov	r16, r25
 //даём команду позиционирования
 WH1602_SendCommand(0b10000000);//установить адрес видеопамяти в 0
     508:	80 e8       	ldi	r24, 0x80	; 128
     50a:	0e 94 07 02 	call	0x40e	; 0x40e <WH1602_SendCommand>
     50e:	80 e9       	ldi	r24, 0x90	; 144
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	f1 f7       	brne	.-4      	; 0x512 <WH1602_SetTextUpLine+0x30>
     516:	21 2f       	mov	r18, r17
     518:	30 2f       	mov	r19, r16
     51a:	c9 01       	movw	r24, r18
     51c:	6c 01       	movw	r12, r24
     51e:	de 01       	movw	r26, r28
     520:	11 96       	adiw	r26, 0x01	; 1
     522:	9c 01       	movw	r18, r24
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     524:	be 01       	movw	r22, r28
     526:	6f 5e       	subi	r22, 0xEF	; 239
     528:	7f 4f       	sbci	r23, 0xFF	; 255
 {
  unsigned char b=text[n];
     52a:	f9 01       	movw	r30, r18
     52c:	40 81       	ld	r20, Z
  out_text[n]=b;
     52e:	4c 93       	st	X, r20
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
  for(unsigned char m=0;m<66;m++)
  {
   unsigned char t=pgm_read_byte(&(RusCodeTable[m][0]));
     534:	fc 01       	movw	r30, r24
     536:	e3 56       	subi	r30, 0x63	; 99
     538:	ff 4f       	sbci	r31, 0xFF	; 255
     53a:	e4 91       	lpm	r30, Z+
   if (t==b)
     53c:	e4 17       	cp	r30, r20
     53e:	31 f4       	brne	.+12     	; 0x54c <WH1602_SetTextUpLine+0x6a>
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
     540:	82 56       	subi	r24, 0x62	; 98
     542:	9f 4f       	sbci	r25, 0xFF	; 255
     544:	fc 01       	movw	r30, r24
     546:	84 91       	lpm	r24, Z+
     548:	8c 93       	st	X, r24
     54a:	04 c0       	rjmp	.+8      	; 0x554 <WH1602_SetTextUpLine+0x72>
	break;
     54c:	02 96       	adiw	r24, 0x02	; 2
 unsigned char out_text[16];
 for(n=0;n<16;n++)
 {
  unsigned char b=text[n];
  out_text[n]=b;
  for(unsigned char m=0;m<66;m++)
     54e:	84 38       	cpi	r24, 0x84	; 132
     550:	91 05       	cpc	r25, r1
     552:	81 f7       	brne	.-32     	; 0x534 <WH1602_SetTextUpLine+0x52>
     554:	2f 5f       	subi	r18, 0xFF	; 255
     556:	3f 4f       	sbci	r19, 0xFF	; 255
     558:	11 96       	adiw	r26, 0x01	; 1
 WH1602_SendCommand(0b10000000);//установить адрес видеопамяти в 0
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     55a:	a6 17       	cp	r26, r22
     55c:	b7 07       	cpc	r27, r23
     55e:	29 f7       	brne	.-54     	; 0x52a <WH1602_SetTextUpLine+0x48>
     560:	00 e0       	ldi	r16, 0x00	; 0
     562:	10 e0       	ldi	r17, 0x00	; 0
  }
 } 
 for(n=0;n<16;n++)
 {
  if (text[n]==0) break;  
  WH1602_SendData(out_text[n]);
     564:	5e 01       	movw	r10, r28
     566:	08 94       	sec
     568:	a1 1c       	adc	r10, r1
     56a:	b1 1c       	adc	r11, r1
 WH1602_SendCommand(0b10000000);//установить адрес видеопамяти в 0
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     56c:	f0 2e       	mov	r15, r16
   }
  }
 } 
 for(n=0;n<16;n++)
 {
  if (text[n]==0) break;  
     56e:	f6 01       	movw	r30, r12
     570:	80 81       	ld	r24, Z
     572:	88 23       	and	r24, r24
     574:	a1 f0       	breq	.+40     	; 0x59e <WH1602_SetTextUpLine+0xbc>
  WH1602_SendData(out_text[n]);
     576:	f5 01       	movw	r30, r10
     578:	e0 0f       	add	r30, r16
     57a:	f1 1f       	adc	r31, r17
     57c:	80 81       	ld	r24, Z
     57e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <WH1602_SendData>
     582:	f3 94       	inc	r15
     584:	0f 5f       	subi	r16, 0xFF	; 255
     586:	1f 4f       	sbci	r17, 0xFF	; 255
     588:	08 94       	sec
     58a:	c1 1c       	adc	r12, r1
     58c:	d1 1c       	adc	r13, r1
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
   }
  }
 } 
 for(n=0;n<16;n++)
     58e:	00 31       	cpi	r16, 0x10	; 16
     590:	11 05       	cpc	r17, r1
     592:	61 f7       	brne	.-40     	; 0x56c <WH1602_SetTextUpLine+0x8a>
     594:	04 c0       	rjmp	.+8      	; 0x59e <WH1602_SetTextUpLine+0xbc>
 {
  if (text[n]==0) break;  
  WH1602_SendData(out_text[n]);
 }
 for(;n<16;n++) WH1602_SendData(32);//заполняем пробелами
     596:	80 e2       	ldi	r24, 0x20	; 32
     598:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <WH1602_SendData>
     59c:	f3 94       	inc	r15
     59e:	ff e0       	ldi	r31, 0x0F	; 15
     5a0:	ff 15       	cp	r31, r15
     5a2:	c8 f7       	brcc	.-14     	; 0x596 <WH1602_SetTextUpLine+0xb4>
}
     5a4:	60 96       	adiw	r28, 0x10	; 16
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	cd bf       	out	0x3d, r28	; 61
     5b0:	cf 91       	pop	r28
     5b2:	df 91       	pop	r29
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	ff 90       	pop	r15
     5ba:	df 90       	pop	r13
     5bc:	cf 90       	pop	r12
     5be:	bf 90       	pop	r11
     5c0:	af 90       	pop	r10
     5c2:	08 95       	ret

000005c4 <WH1602_SetTextDownLine>:
//----------------------------------------------------------------------------------------------------
//записать текст в нижнюю строчку экрана
//----------------------------------------------------------------------------------------------------
void WH1602_SetTextDownLine(char *text)
{
     5c4:	af 92       	push	r10
     5c6:	bf 92       	push	r11
     5c8:	cf 92       	push	r12
     5ca:	df 92       	push	r13
     5cc:	ff 92       	push	r15
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
     5d2:	df 93       	push	r29
     5d4:	cf 93       	push	r28
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
     5da:	60 97       	sbiw	r28, 0x10	; 16
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	de bf       	out	0x3e, r29	; 62
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	cd bf       	out	0x3d, r28	; 61
     5e6:	18 2f       	mov	r17, r24
     5e8:	09 2f       	mov	r16, r25
 //даём команду позиционирования
 WH1602_SendCommand(0b10101000);//установить адрес видеопамяти в 40
     5ea:	88 ea       	ldi	r24, 0xA8	; 168
     5ec:	0e 94 07 02 	call	0x40e	; 0x40e <WH1602_SendCommand>
     5f0:	80 e9       	ldi	r24, 0x90	; 144
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	01 97       	sbiw	r24, 0x01	; 1
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <WH1602_SetTextDownLine+0x30>
     5f8:	21 2f       	mov	r18, r17
     5fa:	30 2f       	mov	r19, r16
     5fc:	c9 01       	movw	r24, r18
     5fe:	6c 01       	movw	r12, r24
     600:	de 01       	movw	r26, r28
     602:	11 96       	adiw	r26, 0x01	; 1
     604:	9c 01       	movw	r18, r24
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     606:	be 01       	movw	r22, r28
     608:	6f 5e       	subi	r22, 0xEF	; 239
     60a:	7f 4f       	sbci	r23, 0xFF	; 255
 {
  unsigned char b=text[n];
     60c:	f9 01       	movw	r30, r18
     60e:	40 81       	ld	r20, Z
  out_text[n]=b;
     610:	4c 93       	st	X, r20
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	90 e0       	ldi	r25, 0x00	; 0
  for(unsigned char m=0;m<66;m++)
  {
   unsigned char t=pgm_read_byte(&(RusCodeTable[m][0]));
     616:	fc 01       	movw	r30, r24
     618:	e3 56       	subi	r30, 0x63	; 99
     61a:	ff 4f       	sbci	r31, 0xFF	; 255
     61c:	e4 91       	lpm	r30, Z+
   if (t==b)
     61e:	e4 17       	cp	r30, r20
     620:	31 f4       	brne	.+12     	; 0x62e <WH1602_SetTextDownLine+0x6a>
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
     622:	82 56       	subi	r24, 0x62	; 98
     624:	9f 4f       	sbci	r25, 0xFF	; 255
     626:	fc 01       	movw	r30, r24
     628:	84 91       	lpm	r24, Z+
     62a:	8c 93       	st	X, r24
     62c:	04 c0       	rjmp	.+8      	; 0x636 <WH1602_SetTextDownLine+0x72>
	break;
     62e:	02 96       	adiw	r24, 0x02	; 2
 unsigned char out_text[16];
 for(n=0;n<16;n++)
 {
  unsigned char b=text[n];
  out_text[n]=b;
  for(unsigned char m=0;m<66;m++)
     630:	84 38       	cpi	r24, 0x84	; 132
     632:	91 05       	cpc	r25, r1
     634:	81 f7       	brne	.-32     	; 0x616 <WH1602_SetTextDownLine+0x52>
     636:	2f 5f       	subi	r18, 0xFF	; 255
     638:	3f 4f       	sbci	r19, 0xFF	; 255
     63a:	11 96       	adiw	r26, 0x01	; 1
 WH1602_SendCommand(0b10101000);//установить адрес видеопамяти в 40
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     63c:	a6 17       	cp	r26, r22
     63e:	b7 07       	cpc	r27, r23
     640:	29 f7       	brne	.-54     	; 0x60c <WH1602_SetTextDownLine+0x48>
     642:	00 e0       	ldi	r16, 0x00	; 0
     644:	10 e0       	ldi	r17, 0x00	; 0
  }
 } 
 for(n=0;n<16;n++)
 {
  if (text[n]==0) break;  
  WH1602_SendData(out_text[n]);
     646:	5e 01       	movw	r10, r28
     648:	08 94       	sec
     64a:	a1 1c       	adc	r10, r1
     64c:	b1 1c       	adc	r11, r1
 WH1602_SendCommand(0b10101000);//установить адрес видеопамяти в 40
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     64e:	f0 2e       	mov	r15, r16
   }
  }
 } 
 for(n=0;n<16;n++)
 {
  if (text[n]==0) break;  
     650:	f6 01       	movw	r30, r12
     652:	80 81       	ld	r24, Z
     654:	88 23       	and	r24, r24
     656:	a1 f0       	breq	.+40     	; 0x680 <WH1602_SetTextDownLine+0xbc>
  WH1602_SendData(out_text[n]);
     658:	f5 01       	movw	r30, r10
     65a:	e0 0f       	add	r30, r16
     65c:	f1 1f       	adc	r31, r17
     65e:	80 81       	ld	r24, Z
     660:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <WH1602_SendData>
     664:	f3 94       	inc	r15
     666:	0f 5f       	subi	r16, 0xFF	; 255
     668:	1f 4f       	sbci	r17, 0xFF	; 255
     66a:	08 94       	sec
     66c:	c1 1c       	adc	r12, r1
     66e:	d1 1c       	adc	r13, r1
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
   }
  }
 } 
 for(n=0;n<16;n++)
     670:	00 31       	cpi	r16, 0x10	; 16
     672:	11 05       	cpc	r17, r1
     674:	61 f7       	brne	.-40     	; 0x64e <WH1602_SetTextDownLine+0x8a>
     676:	04 c0       	rjmp	.+8      	; 0x680 <WH1602_SetTextDownLine+0xbc>
 {
  if (text[n]==0) break;  
  WH1602_SendData(out_text[n]);
 }
 for(;n<16;n++) WH1602_SendData(32);//заполняем пробелами
     678:	80 e2       	ldi	r24, 0x20	; 32
     67a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <WH1602_SendData>
     67e:	f3 94       	inc	r15
     680:	ff e0       	ldi	r31, 0x0F	; 15
     682:	ff 15       	cp	r31, r15
     684:	c8 f7       	brcc	.-14     	; 0x678 <WH1602_SetTextDownLine+0xb4>
}
     686:	60 96       	adiw	r28, 0x10	; 16
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	de bf       	out	0x3e, r29	; 62
     68e:	0f be       	out	0x3f, r0	; 63
     690:	cd bf       	out	0x3d, r28	; 61
     692:	cf 91       	pop	r28
     694:	df 91       	pop	r29
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	ff 90       	pop	r15
     69c:	df 90       	pop	r13
     69e:	cf 90       	pop	r12
     6a0:	bf 90       	pop	r11
     6a2:	af 90       	pop	r10
     6a4:	08 95       	ret

000006a6 <WH1602_SetTextProgmemUpLine>:
//----------------------------------------------------------------------------------------------------
//записать текст из памяти в верхнюю строчку экрана
//----------------------------------------------------------------------------------------------------
void WH1602_SetTextProgmemUpLine(const char *text)
{
     6a6:	af 92       	push	r10
     6a8:	bf 92       	push	r11
     6aa:	cf 92       	push	r12
     6ac:	df 92       	push	r13
     6ae:	ff 92       	push	r15
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	df 93       	push	r29
     6b6:	cf 93       	push	r28
     6b8:	cd b7       	in	r28, 0x3d	; 61
     6ba:	de b7       	in	r29, 0x3e	; 62
     6bc:	60 97       	sbiw	r28, 0x10	; 16
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	cd bf       	out	0x3d, r28	; 61
     6c8:	5c 01       	movw	r10, r24
 //даём команду позиционирования
 WH1602_SendCommand(0b10000000);//установить адрес видеопамяти в 0
     6ca:	80 e8       	ldi	r24, 0x80	; 128
     6cc:	0e 94 07 02 	call	0x40e	; 0x40e <WH1602_SendCommand>
     6d0:	80 e9       	ldi	r24, 0x90	; 144
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	01 97       	sbiw	r24, 0x01	; 1
     6d6:	f1 f7       	brne	.-4      	; 0x6d4 <WH1602_SetTextProgmemUpLine+0x2e>
     6d8:	95 01       	movw	r18, r10
     6da:	de 01       	movw	r26, r28
     6dc:	11 96       	adiw	r26, 0x01	; 1
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     6de:	be 01       	movw	r22, r28
     6e0:	6f 5e       	subi	r22, 0xEF	; 239
     6e2:	7f 4f       	sbci	r23, 0xFF	; 255
 {
  unsigned char b=pgm_read_byte(&text[n]);
     6e4:	f9 01       	movw	r30, r18
     6e6:	44 91       	lpm	r20, Z+
  out_text[n]=b;
     6e8:	4c 93       	st	X, r20
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	90 e0       	ldi	r25, 0x00	; 0
  for(unsigned char m=0;m<66;m++)
  {
   unsigned char t=pgm_read_byte(&(RusCodeTable[m][0]));
     6ee:	fc 01       	movw	r30, r24
     6f0:	e3 56       	subi	r30, 0x63	; 99
     6f2:	ff 4f       	sbci	r31, 0xFF	; 255
     6f4:	e4 91       	lpm	r30, Z+
   if (t==b)
     6f6:	e4 17       	cp	r30, r20
     6f8:	31 f4       	brne	.+12     	; 0x706 <WH1602_SetTextProgmemUpLine+0x60>
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
     6fa:	82 56       	subi	r24, 0x62	; 98
     6fc:	9f 4f       	sbci	r25, 0xFF	; 255
     6fe:	fc 01       	movw	r30, r24
     700:	84 91       	lpm	r24, Z+
     702:	8c 93       	st	X, r24
     704:	04 c0       	rjmp	.+8      	; 0x70e <WH1602_SetTextProgmemUpLine+0x68>
	break;
     706:	02 96       	adiw	r24, 0x02	; 2
 unsigned char out_text[16];
 for(n=0;n<16;n++)
 {
  unsigned char b=pgm_read_byte(&text[n]);
  out_text[n]=b;
  for(unsigned char m=0;m<66;m++)
     708:	84 38       	cpi	r24, 0x84	; 132
     70a:	91 05       	cpc	r25, r1
     70c:	81 f7       	brne	.-32     	; 0x6ee <WH1602_SetTextProgmemUpLine+0x48>
     70e:	2f 5f       	subi	r18, 0xFF	; 255
     710:	3f 4f       	sbci	r19, 0xFF	; 255
     712:	11 96       	adiw	r26, 0x01	; 1
 WH1602_SendCommand(0b10000000);//установить адрес видеопамяти в 0
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     714:	a6 17       	cp	r26, r22
     716:	b7 07       	cpc	r27, r23
     718:	29 f7       	brne	.-54     	; 0x6e4 <WH1602_SetTextProgmemUpLine+0x3e>
     71a:	00 e0       	ldi	r16, 0x00	; 0
     71c:	10 e0       	ldi	r17, 0x00	; 0
  }
 } 
 for(n=0;n<16;n++)
 {
  if (pgm_read_byte(&text[n])==0) break;  
  WH1602_SendData(out_text[n]);
     71e:	6e 01       	movw	r12, r28
     720:	08 94       	sec
     722:	c1 1c       	adc	r12, r1
     724:	d1 1c       	adc	r13, r1
 WH1602_SendCommand(0b10000000);//установить адрес видеопамяти в 0
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     726:	f0 2e       	mov	r15, r16
   }
  }
 } 
 for(n=0;n<16;n++)
 {
  if (pgm_read_byte(&text[n])==0) break;  
     728:	f5 01       	movw	r30, r10
     72a:	e0 0f       	add	r30, r16
     72c:	f1 1f       	adc	r31, r17
     72e:	e4 91       	lpm	r30, Z+
     730:	ee 23       	and	r30, r30
     732:	89 f0       	breq	.+34     	; 0x756 <WH1602_SetTextProgmemUpLine+0xb0>
  WH1602_SendData(out_text[n]);
     734:	f6 01       	movw	r30, r12
     736:	e0 0f       	add	r30, r16
     738:	f1 1f       	adc	r31, r17
     73a:	80 81       	ld	r24, Z
     73c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <WH1602_SendData>
     740:	f3 94       	inc	r15
     742:	0f 5f       	subi	r16, 0xFF	; 255
     744:	1f 4f       	sbci	r17, 0xFF	; 255
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
   }
  }
 } 
 for(n=0;n<16;n++)
     746:	00 31       	cpi	r16, 0x10	; 16
     748:	11 05       	cpc	r17, r1
     74a:	69 f7       	brne	.-38     	; 0x726 <WH1602_SetTextProgmemUpLine+0x80>
     74c:	04 c0       	rjmp	.+8      	; 0x756 <WH1602_SetTextProgmemUpLine+0xb0>
 {
  if (pgm_read_byte(&text[n])==0) break;  
  WH1602_SendData(out_text[n]);
 }
 for(;n<16;n++) WH1602_SendData(32);//заполняем пробелами
     74e:	80 e2       	ldi	r24, 0x20	; 32
     750:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <WH1602_SendData>
     754:	f3 94       	inc	r15
     756:	ff e0       	ldi	r31, 0x0F	; 15
     758:	ff 15       	cp	r31, r15
     75a:	c8 f7       	brcc	.-14     	; 0x74e <WH1602_SetTextProgmemUpLine+0xa8>
}
     75c:	60 96       	adiw	r28, 0x10	; 16
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	f8 94       	cli
     762:	de bf       	out	0x3e, r29	; 62
     764:	0f be       	out	0x3f, r0	; 63
     766:	cd bf       	out	0x3d, r28	; 61
     768:	cf 91       	pop	r28
     76a:	df 91       	pop	r29
     76c:	1f 91       	pop	r17
     76e:	0f 91       	pop	r16
     770:	ff 90       	pop	r15
     772:	df 90       	pop	r13
     774:	cf 90       	pop	r12
     776:	bf 90       	pop	r11
     778:	af 90       	pop	r10
     77a:	08 95       	ret

0000077c <WH1602_SetTextProgmemDownLine>:
//----------------------------------------------------------------------------------------------------
//записать текст из памяти  в нижнюю строчку экрана
//----------------------------------------------------------------------------------------------------
void WH1602_SetTextProgmemDownLine(const char *text)
{
     77c:	af 92       	push	r10
     77e:	bf 92       	push	r11
     780:	cf 92       	push	r12
     782:	df 92       	push	r13
     784:	ff 92       	push	r15
     786:	0f 93       	push	r16
     788:	1f 93       	push	r17
     78a:	df 93       	push	r29
     78c:	cf 93       	push	r28
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	60 97       	sbiw	r28, 0x10	; 16
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	de bf       	out	0x3e, r29	; 62
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	cd bf       	out	0x3d, r28	; 61
     79e:	5c 01       	movw	r10, r24
 //даём команду позиционирования
 WH1602_SendCommand(0b10101000);//установить адрес видеопамяти в 40
     7a0:	88 ea       	ldi	r24, 0xA8	; 168
     7a2:	0e 94 07 02 	call	0x40e	; 0x40e <WH1602_SendCommand>
     7a6:	80 e9       	ldi	r24, 0x90	; 144
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	f1 f7       	brne	.-4      	; 0x7aa <WH1602_SetTextProgmemDownLine+0x2e>
     7ae:	95 01       	movw	r18, r10
     7b0:	de 01       	movw	r26, r28
     7b2:	11 96       	adiw	r26, 0x01	; 1
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     7b4:	be 01       	movw	r22, r28
     7b6:	6f 5e       	subi	r22, 0xEF	; 239
     7b8:	7f 4f       	sbci	r23, 0xFF	; 255
 {
  unsigned char b=pgm_read_byte(&text[n]);
     7ba:	f9 01       	movw	r30, r18
     7bc:	44 91       	lpm	r20, Z+
  out_text[n]=b;
     7be:	4c 93       	st	X, r20
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e0       	ldi	r25, 0x00	; 0
  for(unsigned char m=0;m<66;m++)
  {
   unsigned char t=pgm_read_byte(&(RusCodeTable[m][0]));
     7c4:	fc 01       	movw	r30, r24
     7c6:	e3 56       	subi	r30, 0x63	; 99
     7c8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ca:	e4 91       	lpm	r30, Z+
   if (t==b)
     7cc:	e4 17       	cp	r30, r20
     7ce:	31 f4       	brne	.+12     	; 0x7dc <WH1602_SetTextProgmemDownLine+0x60>
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
     7d0:	82 56       	subi	r24, 0x62	; 98
     7d2:	9f 4f       	sbci	r25, 0xFF	; 255
     7d4:	fc 01       	movw	r30, r24
     7d6:	84 91       	lpm	r24, Z+
     7d8:	8c 93       	st	X, r24
     7da:	04 c0       	rjmp	.+8      	; 0x7e4 <WH1602_SetTextProgmemDownLine+0x68>
	break;
     7dc:	02 96       	adiw	r24, 0x02	; 2
 unsigned char out_text[16];
 for(n=0;n<16;n++)
 {
  unsigned char b=pgm_read_byte(&text[n]);
  out_text[n]=b;
  for(unsigned char m=0;m<66;m++)
     7de:	84 38       	cpi	r24, 0x84	; 132
     7e0:	91 05       	cpc	r25, r1
     7e2:	81 f7       	brne	.-32     	; 0x7c4 <WH1602_SetTextProgmemDownLine+0x48>
     7e4:	2f 5f       	subi	r18, 0xFF	; 255
     7e6:	3f 4f       	sbci	r19, 0xFF	; 255
     7e8:	11 96       	adiw	r26, 0x01	; 1
 WH1602_SendCommand(0b10101000);//установить адрес видеопамяти в 40
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     7ea:	a6 17       	cp	r26, r22
     7ec:	b7 07       	cpc	r27, r23
     7ee:	29 f7       	brne	.-54     	; 0x7ba <WH1602_SetTextProgmemDownLine+0x3e>
     7f0:	00 e0       	ldi	r16, 0x00	; 0
     7f2:	10 e0       	ldi	r17, 0x00	; 0
  }
 } 
 for(n=0;n<16;n++)
 {
  if (pgm_read_byte(&text[n])==0) break;  
  WH1602_SendData(out_text[n]);
     7f4:	6e 01       	movw	r12, r28
     7f6:	08 94       	sec
     7f8:	c1 1c       	adc	r12, r1
     7fa:	d1 1c       	adc	r13, r1
 WH1602_SendCommand(0b10101000);//установить адрес видеопамяти в 40
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     7fc:	f0 2e       	mov	r15, r16
   }
  }
 } 
 for(n=0;n<16;n++)
 {
  if (pgm_read_byte(&text[n])==0) break;  
     7fe:	f5 01       	movw	r30, r10
     800:	e0 0f       	add	r30, r16
     802:	f1 1f       	adc	r31, r17
     804:	e4 91       	lpm	r30, Z+
     806:	ee 23       	and	r30, r30
     808:	89 f0       	breq	.+34     	; 0x82c <WH1602_SetTextProgmemDownLine+0xb0>
  WH1602_SendData(out_text[n]);
     80a:	f6 01       	movw	r30, r12
     80c:	e0 0f       	add	r30, r16
     80e:	f1 1f       	adc	r31, r17
     810:	80 81       	ld	r24, Z
     812:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <WH1602_SendData>
     816:	f3 94       	inc	r15
     818:	0f 5f       	subi	r16, 0xFF	; 255
     81a:	1f 4f       	sbci	r17, 0xFF	; 255
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
   }
  }
 } 
 for(n=0;n<16;n++)
     81c:	00 31       	cpi	r16, 0x10	; 16
     81e:	11 05       	cpc	r17, r1
     820:	69 f7       	brne	.-38     	; 0x7fc <WH1602_SetTextProgmemDownLine+0x80>
     822:	04 c0       	rjmp	.+8      	; 0x82c <WH1602_SetTextProgmemDownLine+0xb0>
 {
  if (pgm_read_byte(&text[n])==0) break;  
  WH1602_SendData(out_text[n]);
 }
 for(;n<16;n++) WH1602_SendData(32);//заполняем пробелами
     824:	80 e2       	ldi	r24, 0x20	; 32
     826:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <WH1602_SendData>
     82a:	f3 94       	inc	r15
     82c:	ff e0       	ldi	r31, 0x0F	; 15
     82e:	ff 15       	cp	r31, r15
     830:	c8 f7       	brcc	.-14     	; 0x824 <WH1602_SetTextProgmemDownLine+0xa8>
}
     832:	60 96       	adiw	r28, 0x10	; 16
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	f8 94       	cli
     838:	de bf       	out	0x3e, r29	; 62
     83a:	0f be       	out	0x3f, r0	; 63
     83c:	cd bf       	out	0x3d, r28	; 61
     83e:	cf 91       	pop	r28
     840:	df 91       	pop	r29
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	ff 90       	pop	r15
     848:	df 90       	pop	r13
     84a:	cf 90       	pop	r12
     84c:	bf 90       	pop	r11
     84e:	af 90       	pop	r10
     850:	08 95       	ret

00000852 <SD_TransmitData>:
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     852:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     854:	77 9b       	sbis	0x0e, 7	; 14
     856:	fe cf       	rjmp	.-4      	; 0x854 <SD_TransmitData+0x2>
 unsigned char res=SPDR;
     858:	8f b1       	in	r24, 0x0f	; 15
 return(res);
}
     85a:	08 95       	ret

0000085c <SD_SendCommandR1>:

//----------------------------------------------------------------------------------------------------
//послать команду с ответом R1
//----------------------------------------------------------------------------------------------------
unsigned char SD_SendCommandR1(unsigned char b0,unsigned char b1,unsigned char b2,unsigned char b3,unsigned char b4)
{
     85c:	0f 93       	push	r16
     85e:	df 93       	push	r29
     860:	cf 93       	push	r28
     862:	00 d0       	rcall	.+0      	; 0x864 <SD_SendCommandR1+0x8>
     864:	00 d0       	rcall	.+0      	; 0x866 <SD_SendCommandR1+0xa>
     866:	0f 92       	push	r0
     868:	cd b7       	in	r28, 0x3d	; 61
     86a:	de b7       	in	r29, 0x3e	; 62
 //отправляем команду и считаем её CRC7
 unsigned char crc7=0; 
 unsigned char cmd[5]={b0,b1,b2,b3,b4};
     86c:	89 83       	std	Y+1, r24	; 0x01
     86e:	6a 83       	std	Y+2, r22	; 0x02
     870:	4b 83       	std	Y+3, r20	; 0x03
     872:	2c 83       	std	Y+4, r18	; 0x04
     874:	0d 83       	std	Y+5, r16	; 0x05
     876:	fe 01       	movw	r30, r28
     878:	31 96       	adiw	r30, 0x01	; 1
 for(unsigned char n=0;n<5;n++)
     87a:	9e 01       	movw	r18, r28
     87c:	2a 5f       	subi	r18, 0xFA	; 250
     87e:	3f 4f       	sbci	r19, 0xFF	; 255
 {
  SD_TransmitData(cmd[n]);
     880:	80 81       	ld	r24, Z
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     882:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     884:	77 9b       	sbis	0x0e, 7	; 14
     886:	fe cf       	rjmp	.-4      	; 0x884 <SD_SendCommandR1+0x28>
 unsigned char res=SPDR;
     888:	8f b1       	in	r24, 0x0f	; 15
     88a:	31 96       	adiw	r30, 0x01	; 1
unsigned char SD_SendCommandR1(unsigned char b0,unsigned char b1,unsigned char b2,unsigned char b3,unsigned char b4)
{
 //отправляем команду и считаем её CRC7
 unsigned char crc7=0; 
 unsigned char cmd[5]={b0,b1,b2,b3,b4};
 for(unsigned char n=0;n<5;n++)
     88c:	e2 17       	cp	r30, r18
     88e:	f3 07       	cpc	r31, r19
     890:	b9 f7       	brne	.-18     	; 0x880 <SD_SendCommandR1+0x24>
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     892:	85 e9       	ldi	r24, 0x95	; 149
     894:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     896:	77 9b       	sbis	0x0e, 7	; 14
     898:	fe cf       	rjmp	.-4      	; 0x896 <SD_SendCommandR1+0x3a>
 unsigned char res=SPDR;
     89a:	8f b1       	in	r24, 0x0f	; 15
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	30 e0       	ldi	r19, 0x00	; 0
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     8a0:	9f ef       	ldi	r25, 0xFF	; 255
     8a2:	9f b9       	out	0x0f, r25	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     8a4:	77 9b       	sbis	0x0e, 7	; 14
     8a6:	fe cf       	rjmp	.-4      	; 0x8a4 <SD_SendCommandR1+0x48>
 unsigned char res=SPDR;
     8a8:	8f b1       	in	r24, 0x0f	; 15
 //карта может ответить не сразу
 //принимаем ответ R1 (старший бит всегда 0)
 for(unsigned short n=0;n<65535;n++)
 {
  unsigned char res=SD_TransmitData(0xff);
  if ((res&128)==0)
     8aa:	87 ff       	sbrs	r24, 7
     8ac:	07 c0       	rjmp	.+14     	; 0x8bc <SD_SendCommandR1+0x60>
 */
 crc7=0x95;
 SD_TransmitData(crc7);//CRC
 //карта может ответить не сразу
 //принимаем ответ R1 (старший бит всегда 0)
 for(unsigned short n=0;n<65535;n++)
     8ae:	2f 5f       	subi	r18, 0xFF	; 255
     8b0:	3f 4f       	sbci	r19, 0xFF	; 255
     8b2:	8f ef       	ldi	r24, 0xFF	; 255
     8b4:	2f 3f       	cpi	r18, 0xFF	; 255
     8b6:	38 07       	cpc	r19, r24
     8b8:	a1 f7       	brne	.-24     	; 0x8a2 <SD_SendCommandR1+0x46>
     8ba:	8f ef       	ldi	r24, 0xFF	; 255
  {
   return(res);//это действительно ответ
  }
 }
 return(0xff);//ответ не принят
}
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	cf 91       	pop	r28
     8c8:	df 91       	pop	r29
     8ca:	0f 91       	pop	r16
     8cc:	08 95       	ret

000008ce <GetBits>:
}
//----------------------------------------------------------------------------------------------------
//получить биты с begin по end включительно
//----------------------------------------------------------------------------------------------------
unsigned short GetBits(unsigned char *data,unsigned char begin,unsigned char end)
{
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	ec 01       	movw	r28, r24
 unsigned short bits=0;
 unsigned char size=1+begin-end; 
     8d8:	6f 5f       	subi	r22, 0xFF	; 255
     8da:	64 1b       	sub	r22, r20
     8dc:	a0 e0       	ldi	r26, 0x00	; 0
     8de:	b0 e0       	ldi	r27, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
 {
  unsigned char position=end+i;
  unsigned short byte=15-(position>>3);
  unsigned short bit=position&0x7;
  unsigned short value=(data[byte]>>bit)&1;
  bits|=value<<i;
     8e2:	0f e0       	ldi	r16, 0x0F	; 15
     8e4:	10 e0       	ldi	r17, 0x00	; 0
     8e6:	1e c0       	rjmp	.+60     	; 0x924 <GetBits+0x56>
//----------------------------------------------------------------------------------------------------
unsigned short GetBits(unsigned char *data,unsigned char begin,unsigned char end)
{
 unsigned short bits=0;
 unsigned char size=1+begin-end; 
 for(unsigned char i=0;i<size;i++) 
     8e8:	23 2f       	mov	r18, r19
     8ea:	24 0f       	add	r18, r20
 {
  unsigned char position=end+i;
  unsigned short byte=15-(position>>3);
  unsigned short bit=position&0x7;
  unsigned short value=(data[byte]>>bit)&1;
  bits|=value<<i;
     8ec:	82 2f       	mov	r24, r18
     8ee:	86 95       	lsr	r24
     8f0:	86 95       	lsr	r24
     8f2:	86 95       	lsr	r24
     8f4:	f8 01       	movw	r30, r16
     8f6:	e8 1b       	sub	r30, r24
     8f8:	f1 09       	sbc	r31, r1
     8fa:	ec 0f       	add	r30, r28
     8fc:	fd 1f       	adc	r31, r29
     8fe:	80 81       	ld	r24, Z
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	27 70       	andi	r18, 0x07	; 7
     904:	02 c0       	rjmp	.+4      	; 0x90a <GetBits+0x3c>
     906:	95 95       	asr	r25
     908:	87 95       	ror	r24
     90a:	2a 95       	dec	r18
     90c:	e2 f7       	brpl	.-8      	; 0x906 <GetBits+0x38>
     90e:	81 70       	andi	r24, 0x01	; 1
     910:	90 70       	andi	r25, 0x00	; 0
     912:	03 2e       	mov	r0, r19
     914:	02 c0       	rjmp	.+4      	; 0x91a <GetBits+0x4c>
     916:	88 0f       	add	r24, r24
     918:	99 1f       	adc	r25, r25
     91a:	0a 94       	dec	r0
     91c:	e2 f7       	brpl	.-8      	; 0x916 <GetBits+0x48>
     91e:	a8 2b       	or	r26, r24
     920:	b9 2b       	or	r27, r25
//----------------------------------------------------------------------------------------------------
unsigned short GetBits(unsigned char *data,unsigned char begin,unsigned char end)
{
 unsigned short bits=0;
 unsigned char size=1+begin-end; 
 for(unsigned char i=0;i<size;i++) 
     922:	3f 5f       	subi	r19, 0xFF	; 255
     924:	36 17       	cp	r19, r22
     926:	00 f3       	brcs	.-64     	; 0x8e8 <GetBits+0x1a>
  unsigned short bit=position&0x7;
  unsigned short value=(data[byte]>>bit)&1;
  bits|=value<<i;
 }
 return(bits);
}
     928:	cd 01       	movw	r24, r26
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	1f 91       	pop	r17
     930:	0f 91       	pop	r16
     932:	08 95       	ret

00000934 <SD_GetSize>:
}
//----------------------------------------------------------------------------------------------------
//получить объём SD-карты в байтах
//----------------------------------------------------------------------------------------------------
unsigned long SD_GetSize(void)
{
     934:	cf 92       	push	r12
     936:	df 92       	push	r13
     938:	ef 92       	push	r14
     93a:	ff 92       	push	r15
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	df 93       	push	r29
     942:	cf 93       	push	r28
     944:	cd b7       	in	r28, 0x3d	; 61
     946:	de b7       	in	r29, 0x3e	; 62
     948:	60 97       	sbiw	r28, 0x10	; 16
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	de bf       	out	0x3e, r29	; 62
     950:	0f be       	out	0x3f, r0	; 63
     952:	cd bf       	out	0x3d, r28	; 61
 unsigned short n;
 if (SD_SendCommandR1(0x49,0x00,0x00,0x00,0x00)==0xff) return(0xffff);//ответ не принят
     954:	89 e4       	ldi	r24, 0x49	; 73
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	00 e0       	ldi	r16, 0x00	; 0
     95e:	0e 94 2e 04 	call	0x85c	; 0x85c <SD_SendCommandR1>
     962:	8f 3f       	cpi	r24, 0xFF	; 255
     964:	09 f4       	brne	.+2      	; 0x968 <SD_GetSize+0x34>
     966:	59 c0       	rjmp	.+178    	; 0xa1a <SD_GetSize+0xe6>
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     96c:	4f ef       	ldi	r20, 0xFF	; 255
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     96e:	95 e0       	ldi	r25, 0x05	; 5
     970:	4f b9       	out	0x0f, r20	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     972:	77 9b       	sbis	0x0e, 7	; 14
     974:	fe cf       	rjmp	.-4      	; 0x972 <SD_GetSize+0x3e>
 unsigned char res=SPDR;
     976:	8f b1       	in	r24, 0x0f	; 15
 unsigned short n;
 if (SD_SendCommandR1(0x49,0x00,0x00,0x00,0x00)==0xff) return(0xffff);//ответ не принят
 //считываем 16 байт ответа
 for(n=0;n<65535;n++)
 {
  if (SD_TransmitData(0xff)==0xfe) break;//получено начало ответа
     978:	8e 3f       	cpi	r24, 0xFE	; 254
     97a:	51 f0       	breq	.+20     	; 0x990 <SD_GetSize+0x5c>
     97c:	89 2f       	mov	r24, r25
     97e:	8a 95       	dec	r24
     980:	f1 f7       	brne	.-4      	; 0x97e <SD_GetSize+0x4a>
unsigned long SD_GetSize(void)
{
 unsigned short n;
 if (SD_SendCommandR1(0x49,0x00,0x00,0x00,0x00)==0xff) return(0xffff);//ответ не принят
 //считываем 16 байт ответа
 for(n=0;n<65535;n++)
     982:	2f 5f       	subi	r18, 0xFF	; 255
     984:	3f 4f       	sbci	r19, 0xFF	; 255
     986:	8f ef       	ldi	r24, 0xFF	; 255
     988:	2f 3f       	cpi	r18, 0xFF	; 255
     98a:	38 07       	cpc	r19, r24
     98c:	89 f7       	brne	.-30     	; 0x970 <SD_GetSize+0x3c>
     98e:	45 c0       	rjmp	.+138    	; 0xa1a <SD_GetSize+0xe6>
     990:	fe 01       	movw	r30, r28
     992:	31 96       	adiw	r30, 0x01	; 1
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     994:	9f ef       	ldi	r25, 0xFF	; 255
  if (SD_TransmitData(0xff)==0xfe) break;//получено начало ответа
  _delay_us(1);
 }
 if (n==65535) return(0xffff);//ответ не принят
 unsigned char b[16];
 for(n=0;n<16;n++) b[n]=SD_TransmitData(0xff);
     996:	9e 01       	movw	r18, r28
     998:	2f 5e       	subi	r18, 0xEF	; 239
     99a:	3f 4f       	sbci	r19, 0xFF	; 255
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     99c:	9f b9       	out	0x0f, r25	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     99e:	77 9b       	sbis	0x0e, 7	; 14
     9a0:	fe cf       	rjmp	.-4      	; 0x99e <SD_GetSize+0x6a>
 unsigned char res=SPDR;
     9a2:	8f b1       	in	r24, 0x0f	; 15
  if (SD_TransmitData(0xff)==0xfe) break;//получено начало ответа
  _delay_us(1);
 }
 if (n==65535) return(0xffff);//ответ не принят
 unsigned char b[16];
 for(n=0;n<16;n++) b[n]=SD_TransmitData(0xff);
     9a4:	81 93       	st	Z+, r24
     9a6:	e2 17       	cp	r30, r18
     9a8:	f3 07       	cpc	r31, r19
     9aa:	c1 f7       	brne	.-16     	; 0x99c <SD_GetSize+0x68>
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	90 e0       	ldi	r25, 0x00	; 0
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     9b0:	2f ef       	ldi	r18, 0xFF	; 255
     9b2:	2f b9       	out	0x0f, r18	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     9b4:	77 9b       	sbis	0x0e, 7	; 14
     9b6:	fe cf       	rjmp	.-4      	; 0x9b4 <SD_GetSize+0x80>
 unsigned char res=SPDR;
     9b8:	3f b1       	in	r19, 0x0f	; 15
 }
 if (n==65535) return(0xffff);//ответ не принят
 unsigned char b[16];
 for(n=0;n<16;n++) b[n]=SD_TransmitData(0xff);
 //пустые байты
 for(n=0;n<255;n++) SD_TransmitData(0xff);
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	8f 3f       	cpi	r24, 0xFF	; 255
     9be:	91 05       	cpc	r25, r1
     9c0:	c1 f7       	brne	.-16     	; 0x9b2 <SD_GetSize+0x7e>
 //смотрим размер карты памяти
 unsigned long c_size=GetBits(b,73,62);
     9c2:	8e 01       	movw	r16, r28
     9c4:	0f 5f       	subi	r16, 0xFF	; 255
     9c6:	1f 4f       	sbci	r17, 0xFF	; 255
     9c8:	c8 01       	movw	r24, r16
     9ca:	69 e4       	ldi	r22, 0x49	; 73
     9cc:	4e e3       	ldi	r20, 0x3E	; 62
     9ce:	0e 94 67 04 	call	0x8ce	; 0x8ce <GetBits>
     9d2:	6c 01       	movw	r12, r24
 unsigned long c_size_mult=GetBits(b,49,47);
     9d4:	c8 01       	movw	r24, r16
     9d6:	61 e3       	ldi	r22, 0x31	; 49
     9d8:	4f e2       	ldi	r20, 0x2F	; 47
     9da:	0e 94 67 04 	call	0x8ce	; 0x8ce <GetBits>
 unsigned long blocks=(c_size+1UL)*(1UL<<(c_size_mult+2UL));
     9de:	ee 24       	eor	r14, r14
     9e0:	ff 24       	eor	r15, r15
     9e2:	08 94       	sec
     9e4:	c1 1c       	adc	r12, r1
     9e6:	d1 1c       	adc	r13, r1
     9e8:	e1 1c       	adc	r14, r1
     9ea:	f1 1c       	adc	r15, r1
     9ec:	02 96       	adiw	r24, 0x02	; 2
     9ee:	04 c0       	rjmp	.+8      	; 0x9f8 <SD_GetSize+0xc4>
     9f0:	cc 0c       	add	r12, r12
     9f2:	dd 1c       	adc	r13, r13
     9f4:	ee 1c       	adc	r14, r14
     9f6:	ff 1c       	adc	r15, r15
     9f8:	8a 95       	dec	r24
     9fa:	d2 f7       	brpl	.-12     	; 0x9f0 <SD_GetSize+0xbc>
 unsigned long read_bl_len=GetBits(b,83,80);
     9fc:	c8 01       	movw	r24, r16
     9fe:	63 e5       	ldi	r22, 0x53	; 83
     a00:	40 e5       	ldi	r20, 0x50	; 80
     a02:	0e 94 67 04 	call	0x8ce	; 0x8ce <GetBits>
 blocks*=(1UL<<read_bl_len);
     a06:	a7 01       	movw	r20, r14
     a08:	96 01       	movw	r18, r12
     a0a:	04 c0       	rjmp	.+8      	; 0xa14 <SD_GetSize+0xe0>
     a0c:	22 0f       	add	r18, r18
     a0e:	33 1f       	adc	r19, r19
     a10:	44 1f       	adc	r20, r20
     a12:	55 1f       	adc	r21, r21
     a14:	8a 95       	dec	r24
     a16:	d2 f7       	brpl	.-12     	; 0xa0c <SD_GetSize+0xd8>
     a18:	04 c0       	rjmp	.+8      	; 0xa22 <SD_GetSize+0xee>
 return(blocks);
     a1a:	2f ef       	ldi	r18, 0xFF	; 255
     a1c:	3f ef       	ldi	r19, 0xFF	; 255
     a1e:	40 e0       	ldi	r20, 0x00	; 0
     a20:	50 e0       	ldi	r21, 0x00	; 0
}
     a22:	b9 01       	movw	r22, r18
     a24:	ca 01       	movw	r24, r20
     a26:	60 96       	adiw	r28, 0x10	; 16
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	de bf       	out	0x3e, r29	; 62
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	cd bf       	out	0x3d, r28	; 61
     a32:	cf 91       	pop	r28
     a34:	df 91       	pop	r29
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	df 90       	pop	r13
     a40:	cf 90       	pop	r12
     a42:	08 95       	ret

00000a44 <SD_BeginReadBlock>:
}
//----------------------------------------------------------------------------------------------------
//начать чтение блока
//----------------------------------------------------------------------------------------------------
bool SD_BeginReadBlock(unsigned long BlockAddr)
{
     a44:	6f 92       	push	r6
     a46:	7f 92       	push	r7
     a48:	8f 92       	push	r8
     a4a:	9f 92       	push	r9
     a4c:	af 92       	push	r10
     a4e:	bf 92       	push	r11
     a50:	cf 92       	push	r12
     a52:	df 92       	push	r13
     a54:	ef 92       	push	r14
     a56:	ff 92       	push	r15
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
     a5c:	7b 01       	movw	r14, r22
     a5e:	8c 01       	movw	r16, r24
 //даём команду чтения блока
 unsigned char a1=(unsigned char)((BlockAddr>>24)&0xff);
 unsigned char a2=(unsigned char)((BlockAddr>>16)&0xff);
 unsigned char a3=(unsigned char)((BlockAddr>>8)&0xff);
 unsigned char a4=(unsigned char)(BlockAddr&0xff);
 unsigned char res=SD_SendCommandR1(0x51,a1,a2,a3,a4);//посылаем CMD17
     a60:	29 2f       	mov	r18, r25
     a62:	33 27       	eor	r19, r19
     a64:	44 27       	eor	r20, r20
     a66:	55 27       	eor	r21, r21
     a68:	58 01       	movw	r10, r16
     a6a:	cc 24       	eor	r12, r12
     a6c:	dd 24       	eor	r13, r13
     a6e:	6f 2c       	mov	r6, r15
     a70:	70 2e       	mov	r7, r16
     a72:	81 2e       	mov	r8, r17
     a74:	99 24       	eor	r9, r9
     a76:	81 e5       	ldi	r24, 0x51	; 81
     a78:	62 2f       	mov	r22, r18
     a7a:	4a 2d       	mov	r20, r10
     a7c:	26 2d       	mov	r18, r6
     a7e:	0e 2d       	mov	r16, r14
     a80:	0e 94 2e 04 	call	0x85c	; 0x85c <SD_SendCommandR1>
 if (res!=0) return(false);//ошибка команды
     a84:	88 23       	and	r24, r24
     a86:	d9 f4       	brne	.+54     	; 0xabe <SD_BeginReadBlock+0x7a>
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     a88:	8f ef       	ldi	r24, 0xFF	; 255
     a8a:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     a8c:	77 9b       	sbis	0x0e, 7	; 14
     a8e:	fe cf       	rjmp	.-4      	; 0xa8c <SD_BeginReadBlock+0x48>
 unsigned char res=SPDR;
     a90:	8f b1       	in	r24, 0x0f	; 15
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	30 e0       	ldi	r19, 0x00	; 0
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     a96:	9f ef       	ldi	r25, 0xFF	; 255
     a98:	9f b9       	out	0x0f, r25	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     a9a:	77 9b       	sbis	0x0e, 7	; 14
     a9c:	fe cf       	rjmp	.-4      	; 0xa9a <SD_BeginReadBlock+0x56>
 unsigned char res=SPDR;
     a9e:	8f b1       	in	r24, 0x0f	; 15
 //ждём начало поступления данных
 unsigned short n;
 for(n=0;n<65535;n++)
 {
  res=SD_TransmitData(0xff);
  if (res==0xfe) break;//маркер получен
     aa0:	8e 3f       	cpi	r24, 0xFE	; 254
     aa2:	39 f0       	breq	.+14     	; 0xab2 <SD_BeginReadBlock+0x6e>
 unsigned char res=SD_SendCommandR1(0x51,a1,a2,a3,a4);//посылаем CMD17
 if (res!=0) return(false);//ошибка команды
 SD_TransmitData(0xff);//байтовый промежуток
 //ждём начало поступления данных
 unsigned short n;
 for(n=0;n<65535;n++)
     aa4:	2f 5f       	subi	r18, 0xFF	; 255
     aa6:	3f 4f       	sbci	r19, 0xFF	; 255
     aa8:	8f ef       	ldi	r24, 0xFF	; 255
     aaa:	2f 3f       	cpi	r18, 0xFF	; 255
     aac:	38 07       	cpc	r19, r24
     aae:	a1 f7       	brne	.-24     	; 0xa98 <SD_BeginReadBlock+0x54>
     ab0:	06 c0       	rjmp	.+12     	; 0xabe <SD_BeginReadBlock+0x7a>
 {
  res=SD_TransmitData(0xff);
  if (res==0xfe) break;//маркер получен
 }
 if (n==65535) return(false);//маркер начала данных не получен
 BlockByteCounter=0;
     ab2:	10 92 0c 01 	sts	0x010C, r1
     ab6:	10 92 0b 01 	sts	0x010B, r1
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	01 c0       	rjmp	.+2      	; 0xac0 <SD_BeginReadBlock+0x7c>
 return(true);
     abe:	80 e0       	ldi	r24, 0x00	; 0
}
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	df 90       	pop	r13
     aca:	cf 90       	pop	r12
     acc:	bf 90       	pop	r11
     ace:	af 90       	pop	r10
     ad0:	9f 90       	pop	r9
     ad2:	8f 90       	pop	r8
     ad4:	7f 90       	pop	r7
     ad6:	6f 90       	pop	r6
     ad8:	08 95       	ret

00000ada <SD_ReadBlockByte>:
//----------------------------------------------------------------------------------------------------
//считать байт блока
//----------------------------------------------------------------------------------------------------
bool SD_ReadBlockByte(unsigned char *byte)
{
     ada:	fc 01       	movw	r30, r24
 if (BlockByteCounter>=512) return(false);
     adc:	80 91 0b 01 	lds	r24, 0x010B
     ae0:	90 91 0c 01 	lds	r25, 0x010C
     ae4:	80 50       	subi	r24, 0x00	; 0
     ae6:	92 40       	sbci	r25, 0x02	; 2
     ae8:	10 f0       	brcs	.+4      	; 0xaee <SD_ReadBlockByte+0x14>
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	08 95       	ret
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     aee:	8f ef       	ldi	r24, 0xFF	; 255
     af0:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     af2:	77 9b       	sbis	0x0e, 7	; 14
     af4:	fe cf       	rjmp	.-4      	; 0xaf2 <SD_ReadBlockByte+0x18>
 unsigned char res=SPDR;
     af6:	8f b1       	in	r24, 0x0f	; 15
//считать байт блока
//----------------------------------------------------------------------------------------------------
bool SD_ReadBlockByte(unsigned char *byte)
{
 if (BlockByteCounter>=512) return(false);
 *byte=SD_TransmitData(0xff);//читаем байт с SD-карты
     af8:	80 83       	st	Z, r24
 BlockByteCounter++;
     afa:	80 91 0b 01 	lds	r24, 0x010B
     afe:	90 91 0c 01 	lds	r25, 0x010C
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	90 93 0c 01 	sts	0x010C, r25
     b08:	80 93 0b 01 	sts	0x010B, r24
 if (BlockByteCounter==512)
     b0c:	80 50       	subi	r24, 0x00	; 0
     b0e:	92 40       	sbci	r25, 0x02	; 2
     b10:	11 f0       	breq	.+4      	; 0xb16 <SD_ReadBlockByte+0x3c>
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	08 95       	ret
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     b16:	8f ef       	ldi	r24, 0xFF	; 255
     b18:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     b1a:	77 9b       	sbis	0x0e, 7	; 14
     b1c:	fe cf       	rjmp	.-4      	; 0xb1a <SD_ReadBlockByte+0x40>
 unsigned char res=SPDR;
     b1e:	8f b1       	in	r24, 0x0f	; 15
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     b20:	8f ef       	ldi	r24, 0xFF	; 255
     b22:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     b24:	77 9b       	sbis	0x0e, 7	; 14
     b26:	fe cf       	rjmp	.-4      	; 0xb24 <SD_ReadBlockByte+0x4a>
 unsigned char res=SPDR;
     b28:	8f b1       	in	r24, 0x0f	; 15
     b2a:	81 e0       	ldi	r24, 0x01	; 1
  //считываем CRC
  SD_TransmitData(0xff);
  SD_TransmitData(0xff); 
 }
 return(true);
}
     b2c:	08 95       	ret

00000b2e <SD_ReadBlock>:
//----------------------------------------------------------------------------------------------------
//считать блок в 512 байт в память
//----------------------------------------------------------------------------------------------------
bool SD_ReadBlock(unsigned long BlockAddr,unsigned char *Addr)
{
     b2e:	6f 92       	push	r6
     b30:	7f 92       	push	r7
     b32:	8f 92       	push	r8
     b34:	9f 92       	push	r9
     b36:	af 92       	push	r10
     b38:	bf 92       	push	r11
     b3a:	cf 92       	push	r12
     b3c:	df 92       	push	r13
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	7b 01       	movw	r14, r22
     b4c:	8c 01       	movw	r16, r24
     b4e:	ea 01       	movw	r28, r20
 //даём команду чтения блока
 unsigned char a1=(unsigned char)((BlockAddr>>24)&0xff);
 unsigned char a2=(unsigned char)((BlockAddr>>16)&0xff);
 unsigned char a3=(unsigned char)((BlockAddr>>8)&0xff);
 unsigned char a4=(unsigned char)(BlockAddr&0xff);
 unsigned char res=SD_SendCommandR1(0x51,a1,a2,a3,a4);//посылаем CMD17
     b50:	29 2f       	mov	r18, r25
     b52:	33 27       	eor	r19, r19
     b54:	44 27       	eor	r20, r20
     b56:	55 27       	eor	r21, r21
     b58:	5c 01       	movw	r10, r24
     b5a:	cc 24       	eor	r12, r12
     b5c:	dd 24       	eor	r13, r13
     b5e:	67 2e       	mov	r6, r23
     b60:	78 2e       	mov	r7, r24
     b62:	89 2e       	mov	r8, r25
     b64:	99 24       	eor	r9, r9
     b66:	81 e5       	ldi	r24, 0x51	; 81
     b68:	62 2f       	mov	r22, r18
     b6a:	4a 2d       	mov	r20, r10
     b6c:	26 2d       	mov	r18, r6
     b6e:	0e 2d       	mov	r16, r14
     b70:	0e 94 2e 04 	call	0x85c	; 0x85c <SD_SendCommandR1>
 if (res!=0) return(false);//ошибка команды
     b74:	88 23       	and	r24, r24
     b76:	89 f5       	brne	.+98     	; 0xbda <SD_ReadBlock+0xac>
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     b78:	8f ef       	ldi	r24, 0xFF	; 255
     b7a:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     b7c:	77 9b       	sbis	0x0e, 7	; 14
     b7e:	fe cf       	rjmp	.-4      	; 0xb7c <SD_ReadBlock+0x4e>
 unsigned char res=SPDR;
     b80:	8f b1       	in	r24, 0x0f	; 15
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     b86:	9f ef       	ldi	r25, 0xFF	; 255
     b88:	9f b9       	out	0x0f, r25	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     b8a:	77 9b       	sbis	0x0e, 7	; 14
     b8c:	fe cf       	rjmp	.-4      	; 0xb8a <SD_ReadBlock+0x5c>
 unsigned char res=SPDR;
     b8e:	8f b1       	in	r24, 0x0f	; 15
 //ждём начало поступления данных
 unsigned short n;
 for(n=0;n<65535;n++)
 {
  res=SD_TransmitData(0xff);
  if (res==0xfe) break;//маркер получен
     b90:	8e 3f       	cpi	r24, 0xFE	; 254
     b92:	39 f0       	breq	.+14     	; 0xba2 <SD_ReadBlock+0x74>
 unsigned char res=SD_SendCommandR1(0x51,a1,a2,a3,a4);//посылаем CMD17
 if (res!=0) return(false);//ошибка команды
 SD_TransmitData(0xff);//байтовый промежуток
 //ждём начало поступления данных
 unsigned short n;
 for(n=0;n<65535;n++)
     b94:	2f 5f       	subi	r18, 0xFF	; 255
     b96:	3f 4f       	sbci	r19, 0xFF	; 255
     b98:	8f ef       	ldi	r24, 0xFF	; 255
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	38 07       	cpc	r19, r24
     b9e:	a1 f7       	brne	.-24     	; 0xb88 <SD_ReadBlock+0x5a>
     ba0:	1c c0       	rjmp	.+56     	; 0xbda <SD_ReadBlock+0xac>
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     ba6:	9f ef       	ldi	r25, 0xFF	; 255
     ba8:	9f b9       	out	0x0f, r25	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     baa:	77 9b       	sbis	0x0e, 7	; 14
     bac:	fe cf       	rjmp	.-4      	; 0xbaa <SD_ReadBlock+0x7c>
 unsigned char res=SPDR;
     bae:	8f b1       	in	r24, 0x0f	; 15
  if (res==0xfe) break;//маркер получен
 }
 if (n==65535) return(false);//маркер начала данных не получен
 for(n=0;n<512;n++,Addr++)
 {
  *Addr=SD_TransmitData(0xff);//читаем байт с SD-карты
     bb0:	88 83       	st	Y, r24
 {
  res=SD_TransmitData(0xff);
  if (res==0xfe) break;//маркер получен
 }
 if (n==65535) return(false);//маркер начала данных не получен
 for(n=0;n<512;n++,Addr++)
     bb2:	2f 5f       	subi	r18, 0xFF	; 255
     bb4:	3f 4f       	sbci	r19, 0xFF	; 255
     bb6:	82 e0       	ldi	r24, 0x02	; 2
     bb8:	20 30       	cpi	r18, 0x00	; 0
     bba:	38 07       	cpc	r19, r24
     bbc:	11 f0       	breq	.+4      	; 0xbc2 <SD_ReadBlock+0x94>
     bbe:	21 96       	adiw	r28, 0x01	; 1
     bc0:	f3 cf       	rjmp	.-26     	; 0xba8 <SD_ReadBlock+0x7a>
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     bc2:	8f ef       	ldi	r24, 0xFF	; 255
     bc4:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     bc6:	77 9b       	sbis	0x0e, 7	; 14
     bc8:	fe cf       	rjmp	.-4      	; 0xbc6 <SD_ReadBlock+0x98>
 unsigned char res=SPDR;
     bca:	8f b1       	in	r24, 0x0f	; 15
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     bcc:	8f ef       	ldi	r24, 0xFF	; 255
     bce:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     bd0:	77 9b       	sbis	0x0e, 7	; 14
     bd2:	fe cf       	rjmp	.-4      	; 0xbd0 <SD_ReadBlock+0xa2>
 unsigned char res=SPDR;
     bd4:	8f b1       	in	r24, 0x0f	; 15
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	01 c0       	rjmp	.+2      	; 0xbdc <SD_ReadBlock+0xae>
  *Addr=SD_TransmitData(0xff);//читаем байт с SD-карты
 }
 //считываем CRC
 SD_TransmitData(0xff);
 SD_TransmitData(0xff); 
 return(true);
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	ff 90       	pop	r15
     be6:	ef 90       	pop	r14
     be8:	df 90       	pop	r13
     bea:	cf 90       	pop	r12
     bec:	bf 90       	pop	r11
     bee:	af 90       	pop	r10
     bf0:	9f 90       	pop	r9
     bf2:	8f 90       	pop	r8
     bf4:	7f 90       	pop	r7
     bf6:	6f 90       	pop	r6
     bf8:	08 95       	ret

00000bfa <GetByte>:
}
//----------------------------------------------------------------------------------------------------
//считать байт
//----------------------------------------------------------------------------------------------------
unsigned long GetByte(unsigned long offset)
{
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	7b 01       	movw	r14, r22
     c04:	8c 01       	movw	r16, r24
 offset+=FATOffset;
     c06:	80 91 1a 01 	lds	r24, 0x011A
     c0a:	90 91 1b 01 	lds	r25, 0x011B
     c0e:	a0 91 1c 01 	lds	r26, 0x011C
     c12:	b0 91 1d 01 	lds	r27, 0x011D
     c16:	e8 0e       	add	r14, r24
     c18:	f9 1e       	adc	r15, r25
     c1a:	0a 1f       	adc	r16, r26
     c1c:	1b 1f       	adc	r17, r27
 unsigned long s=offset>>9UL;//делим на 512
     c1e:	a8 01       	movw	r20, r16
     c20:	97 01       	movw	r18, r14
     c22:	89 e0       	ldi	r24, 0x09	; 9
     c24:	56 95       	lsr	r21
     c26:	47 95       	ror	r20
     c28:	37 95       	ror	r19
     c2a:	27 95       	ror	r18
     c2c:	8a 95       	dec	r24
     c2e:	d1 f7       	brne	.-12     	; 0xc24 <GetByte+0x2a>
 if (s!=LastReadSector)
     c30:	80 91 0d 01 	lds	r24, 0x010D
     c34:	90 91 0e 01 	lds	r25, 0x010E
     c38:	a0 91 0f 01 	lds	r26, 0x010F
     c3c:	b0 91 10 01 	lds	r27, 0x0110
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	4a 07       	cpc	r20, r26
     c46:	5b 07       	cpc	r21, r27
     c48:	81 f0       	breq	.+32     	; 0xc6a <GetByte+0x70>
 {
  LastReadSector=s;
     c4a:	20 93 0d 01 	sts	0x010D, r18
     c4e:	30 93 0e 01 	sts	0x010E, r19
     c52:	40 93 0f 01 	sts	0x010F, r20
     c56:	50 93 10 01 	sts	0x0110, r21
  SD_ReadBlock(offset&0xfffffe00UL,Sector);
     c5a:	c8 01       	movw	r24, r16
     c5c:	b7 01       	movw	r22, r14
     c5e:	60 70       	andi	r22, 0x00	; 0
     c60:	7e 7f       	andi	r23, 0xFE	; 254
     c62:	44 e2       	ldi	r20, 0x24	; 36
     c64:	51 e0       	ldi	r21, 0x01	; 1
     c66:	0e 94 97 05 	call	0xb2e	; 0xb2e <SD_ReadBlock>
     c6a:	f7 01       	movw	r30, r14
     c6c:	f1 70       	andi	r31, 0x01	; 1
     c6e:	ec 5d       	subi	r30, 0xDC	; 220
     c70:	fe 4f       	sbci	r31, 0xFE	; 254
     c72:	60 81       	ld	r22, Z
  //ошибки не проверяем, всё равно ничего сделать не сможем - либо работает, либо нет
 }
 return(Sector[offset&0x1FFUL]);
}
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	1f 91       	pop	r17
     c7c:	0f 91       	pop	r16
     c7e:	ff 90       	pop	r15
     c80:	ef 90       	pop	r14
     c82:	08 95       	ret

00000c84 <GetShort>:
//----------------------------------------------------------------------------------------------------
//считать два байта
//----------------------------------------------------------------------------------------------------
unsigned long GetShort(unsigned long offset)
{
     c84:	af 92       	push	r10
     c86:	bf 92       	push	r11
     c88:	cf 92       	push	r12
     c8a:	df 92       	push	r13
     c8c:	ef 92       	push	r14
     c8e:	ff 92       	push	r15
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	5b 01       	movw	r10, r22
     c96:	6c 01       	movw	r12, r24
 unsigned long v=GetByte(offset+1UL);
     c98:	6f 5f       	subi	r22, 0xFF	; 255
     c9a:	7f 4f       	sbci	r23, 0xFF	; 255
     c9c:	8f 4f       	sbci	r24, 0xFF	; 255
     c9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ca0:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
     ca4:	7b 01       	movw	r14, r22
     ca6:	8c 01       	movw	r16, r24
 v<<=8UL;
     ca8:	10 2f       	mov	r17, r16
     caa:	0f 2d       	mov	r16, r15
     cac:	fe 2c       	mov	r15, r14
     cae:	ee 24       	eor	r14, r14
 v|=GetByte(offset);
     cb0:	c6 01       	movw	r24, r12
     cb2:	b5 01       	movw	r22, r10
     cb4:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
     cb8:	9b 01       	movw	r18, r22
     cba:	ac 01       	movw	r20, r24
     cbc:	2e 29       	or	r18, r14
     cbe:	3f 29       	or	r19, r15
     cc0:	40 2b       	or	r20, r16
     cc2:	51 2b       	or	r21, r17
 return(v);
}
     cc4:	b9 01       	movw	r22, r18
     cc6:	ca 01       	movw	r24, r20
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	ff 90       	pop	r15
     cce:	ef 90       	pop	r14
     cd0:	df 90       	pop	r13
     cd2:	cf 90       	pop	r12
     cd4:	bf 90       	pop	r11
     cd6:	af 90       	pop	r10
     cd8:	08 95       	ret

00000cda <FAT_RecordPointerStepReverse>:
}
//----------------------------------------------------------------------------------------------------
//переместиться по записи назад
//----------------------------------------------------------------------------------------------------
bool FAT_RecordPointerStepReverse(struct SFATRecordPointer *sFATRecordPointerPtr)
{
     cda:	2f 92       	push	r2
     cdc:	3f 92       	push	r3
     cde:	4f 92       	push	r4
     ce0:	5f 92       	push	r5
     ce2:	6f 92       	push	r6
     ce4:	7f 92       	push	r7
     ce6:	8f 92       	push	r8
     ce8:	9f 92       	push	r9
     cea:	af 92       	push	r10
     cec:	bf 92       	push	r11
     cee:	cf 92       	push	r12
     cf0:	df 92       	push	r13
     cf2:	ef 92       	push	r14
     cf4:	ff 92       	push	r15
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	ec 01       	movw	r28, r24
 sFATRecordPointerPtr->CurrentFolderAddr-=32UL;//возвращаемся на запись назад 
     d00:	8c 81       	ldd	r24, Y+4	; 0x04
     d02:	9d 81       	ldd	r25, Y+5	; 0x05
     d04:	ae 81       	ldd	r26, Y+6	; 0x06
     d06:	bf 81       	ldd	r27, Y+7	; 0x07
     d08:	80 97       	sbiw	r24, 0x20	; 32
     d0a:	a1 09       	sbc	r26, r1
     d0c:	b1 09       	sbc	r27, r1
     d0e:	8c 83       	std	Y+4, r24	; 0x04
     d10:	9d 83       	std	Y+5, r25	; 0x05
     d12:	ae 83       	std	Y+6, r26	; 0x06
     d14:	bf 83       	std	Y+7, r27	; 0x07
 if (sFATRecordPointerPtr->CurrentFolderAddr<sFATRecordPointerPtr->BeginFolderClusterAddr)//вышли за нижнюю границу кластера
     d16:	28 89       	ldd	r18, Y+16	; 0x10
     d18:	39 89       	ldd	r19, Y+17	; 0x11
     d1a:	4a 89       	ldd	r20, Y+18	; 0x12
     d1c:	5b 89       	ldd	r21, Y+19	; 0x13
     d1e:	82 17       	cp	r24, r18
     d20:	93 07       	cpc	r25, r19
     d22:	a4 07       	cpc	r26, r20
     d24:	b5 07       	cpc	r27, r21
     d26:	08 f0       	brcs	.+2      	; 0xd2a <FAT_RecordPointerStepReverse+0x50>
     d28:	b4 c0       	rjmp	.+360    	; 0xe92 <FAT_RecordPointerStepReverse+0x1b8>
 {
  if (sFATRecordPointerPtr->BeginFolderAddr==FirstRootFolderAddr)//если у нас корневая директория
     d2a:	28 81       	ld	r18, Y
     d2c:	39 81       	ldd	r19, Y+1	; 0x01
     d2e:	4a 81       	ldd	r20, Y+2	; 0x02
     d30:	5b 81       	ldd	r21, Y+3	; 0x03
     d32:	80 91 7d 03 	lds	r24, 0x037D
     d36:	90 91 7e 03 	lds	r25, 0x037E
     d3a:	a0 91 7f 03 	lds	r26, 0x037F
     d3e:	b0 91 80 03 	lds	r27, 0x0380
     d42:	28 17       	cp	r18, r24
     d44:	39 07       	cpc	r19, r25
     d46:	4a 07       	cpc	r20, r26
     d48:	5b 07       	cpc	r21, r27
     d4a:	09 f4       	brne	.+2      	; 0xd4e <FAT_RecordPointerStepReverse+0x74>
     d4c:	a4 c0       	rjmp	.+328    	; 0xe96 <FAT_RecordPointerStepReverse+0x1bc>
  {
   return(false);//вышли за пределы директории   
  }  
  else//для не корневой директории узнаём новый адрес
  {
   unsigned long PrevCluster=sFATRecordPointerPtr->BeginFolderCluster;//предыдущий кластер   
     d4e:	28 84       	ldd	r2, Y+8	; 0x08
     d50:	39 84       	ldd	r3, Y+9	; 0x09
     d52:	4a 84       	ldd	r4, Y+10	; 0x0a
     d54:	5b 84       	ldd	r5, Y+11	; 0x0b
   while(1)
   {
    unsigned long FATClusterOffset=0;//смещение по таблице FAT в байтах (в FAT32 они 4-х байтные, а в FAT16 - двухбайтные)
    if (FATType==FAT16) FATClusterOffset=PrevCluster*2UL;
     d56:	80 91 1e 01 	lds	r24, 0x011E
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	21 f0       	breq	.+8      	; 0xd66 <FAT_RecordPointerStepReverse+0x8c>
     d5e:	ee 24       	eor	r14, r14
     d60:	ff 24       	eor	r15, r15
     d62:	87 01       	movw	r16, r14
     d64:	06 c0       	rjmp	.+12     	; 0xd72 <FAT_RecordPointerStepReverse+0x98>
     d66:	82 01       	movw	r16, r4
     d68:	71 01       	movw	r14, r2
     d6a:	ee 0c       	add	r14, r14
     d6c:	ff 1c       	adc	r15, r15
     d6e:	00 1f       	adc	r16, r16
     d70:	11 1f       	adc	r17, r17
    unsigned long ClusterAddr=ResvdSecCnt*BytsPerSec+FATClusterOffset;//адрес предыдущего кластера
	unsigned long cluster=GetShort(ClusterAddr);
     d72:	60 91 69 03 	lds	r22, 0x0369
     d76:	70 91 6a 03 	lds	r23, 0x036A
     d7a:	80 91 6b 03 	lds	r24, 0x036B
     d7e:	90 91 6c 03 	lds	r25, 0x036C
     d82:	20 91 49 03 	lds	r18, 0x0349
     d86:	30 91 4a 03 	lds	r19, 0x034A
     d8a:	40 91 4b 03 	lds	r20, 0x034B
     d8e:	50 91 4c 03 	lds	r21, 0x034C
     d92:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__mulsi3>
     d96:	e6 0e       	add	r14, r22
     d98:	f7 1e       	adc	r15, r23
     d9a:	08 1f       	adc	r16, r24
     d9c:	19 1f       	adc	r17, r25
     d9e:	c8 01       	movw	r24, r16
     da0:	b7 01       	movw	r22, r14
     da2:	0e 94 42 06 	call	0xc84	; 0xc84 <GetShort>
     da6:	7b 01       	movw	r14, r22
     da8:	8c 01       	movw	r16, r24
    if (cluster<=2 || cluster>=FAT16_EOC)//такого кластера нет
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	03 97       	sbiw	r24, 0x03	; 3
     db0:	a1 09       	sbc	r26, r1
     db2:	b1 09       	sbc	r27, r1
     db4:	85 5f       	subi	r24, 0xF5	; 245
     db6:	9f 4f       	sbci	r25, 0xFF	; 255
     db8:	a0 40       	sbci	r26, 0x00	; 0
     dba:	b0 40       	sbci	r27, 0x00	; 0
     dbc:	08 f0       	brcs	.+2      	; 0xdc0 <FAT_RecordPointerStepReverse+0xe6>
     dbe:	6b c0       	rjmp	.+214    	; 0xe96 <FAT_RecordPointerStepReverse+0x1bc>
	{
     return(false);//вышли за пределы директории        	
	}
	if (cluster==sFATRecordPointerPtr->CurrentFolderCluster) break;//мы нашли предшествующий кластер
     dc0:	8c 85       	ldd	r24, Y+12	; 0x0c
     dc2:	9d 85       	ldd	r25, Y+13	; 0x0d
     dc4:	ae 85       	ldd	r26, Y+14	; 0x0e
     dc6:	bf 85       	ldd	r27, Y+15	; 0x0f
     dc8:	e8 16       	cp	r14, r24
     dca:	f9 06       	cpc	r15, r25
     dcc:	0a 07       	cpc	r16, r26
     dce:	1b 07       	cpc	r17, r27
     dd0:	29 f0       	breq	.+10     	; 0xddc <FAT_RecordPointerStepReverse+0x102>
     dd2:	c7 01       	movw	r24, r14
     dd4:	d8 01       	movw	r26, r16
     dd6:	1c 01       	movw	r2, r24
     dd8:	2d 01       	movw	r4, r26
     dda:	bd cf       	rjmp	.-134    	; 0xd56 <FAT_RecordPointerStepReverse+0x7c>
	PrevCluster=cluster;
   }
   if (PrevCluster<=2 || PrevCluster>=FAT16_EOC)//такого кластера нет
     ddc:	d2 01       	movw	r26, r4
     dde:	c1 01       	movw	r24, r2
     de0:	03 97       	sbiw	r24, 0x03	; 3
     de2:	a1 09       	sbc	r26, r1
     de4:	b1 09       	sbc	r27, r1
     de6:	85 5f       	subi	r24, 0xF5	; 245
     de8:	9f 4f       	sbci	r25, 0xFF	; 255
     dea:	a0 40       	sbci	r26, 0x00	; 0
     dec:	b0 40       	sbci	r27, 0x00	; 0
     dee:	08 f0       	brcs	.+2      	; 0xdf2 <FAT_RecordPointerStepReverse+0x118>
     df0:	52 c0       	rjmp	.+164    	; 0xe96 <FAT_RecordPointerStepReverse+0x1bc>
   {
    return(false);//вышли за пределы директории        	
   }
   sFATRecordPointerPtr->CurrentFolderCluster=PrevCluster;//переходим к предыдущему кластеру
     df2:	2c 86       	std	Y+12, r2	; 0x0c
     df4:	3d 86       	std	Y+13, r3	; 0x0d
     df6:	4e 86       	std	Y+14, r4	; 0x0e
     df8:	5f 86       	std	Y+15, r5	; 0x0f
   unsigned long FirstSectorofCluster=((sFATRecordPointerPtr->CurrentFolderCluster-2UL)*SecPerClus)+FirstDataSector; 
     dfa:	60 90 41 03 	lds	r6, 0x0341
     dfe:	70 90 42 03 	lds	r7, 0x0342
     e02:	80 90 43 03 	lds	r8, 0x0343
     e06:	90 90 44 03 	lds	r9, 0x0344
   sFATRecordPointerPtr->BeginFolderClusterAddr=FirstSectorofCluster*BytsPerSec; 	
     e0a:	a0 90 69 03 	lds	r10, 0x0369
     e0e:	b0 90 6a 03 	lds	r11, 0x036A
     e12:	c0 90 6b 03 	lds	r12, 0x036B
     e16:	d0 90 6c 03 	lds	r13, 0x036C
     e1a:	8e ef       	ldi	r24, 0xFE	; 254
     e1c:	9f ef       	ldi	r25, 0xFF	; 255
     e1e:	af ef       	ldi	r26, 0xFF	; 255
     e20:	bf ef       	ldi	r27, 0xFF	; 255
     e22:	28 0e       	add	r2, r24
     e24:	39 1e       	adc	r3, r25
     e26:	4a 1e       	adc	r4, r26
     e28:	5b 1e       	adc	r5, r27
     e2a:	c2 01       	movw	r24, r4
     e2c:	b1 01       	movw	r22, r2
     e2e:	a4 01       	movw	r20, r8
     e30:	93 01       	movw	r18, r6
     e32:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__mulsi3>
     e36:	9b 01       	movw	r18, r22
     e38:	ac 01       	movw	r20, r24
     e3a:	60 91 3d 03 	lds	r22, 0x033D
     e3e:	70 91 3e 03 	lds	r23, 0x033E
     e42:	80 91 3f 03 	lds	r24, 0x033F
     e46:	90 91 40 03 	lds	r25, 0x0340
     e4a:	62 0f       	add	r22, r18
     e4c:	73 1f       	adc	r23, r19
     e4e:	84 1f       	adc	r24, r20
     e50:	95 1f       	adc	r25, r21
     e52:	a6 01       	movw	r20, r12
     e54:	95 01       	movw	r18, r10
     e56:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__mulsi3>
     e5a:	7b 01       	movw	r14, r22
     e5c:	8c 01       	movw	r16, r24
     e5e:	68 8b       	std	Y+16, r22	; 0x10
     e60:	79 8b       	std	Y+17, r23	; 0x11
     e62:	8a 8b       	std	Y+18, r24	; 0x12
     e64:	9b 8b       	std	Y+19, r25	; 0x13
   sFATRecordPointerPtr->EndFolderClusterAddr=sFATRecordPointerPtr->BeginFolderClusterAddr+SecPerClus*BytsPerSec;
     e66:	c6 01       	movw	r24, r12
     e68:	b5 01       	movw	r22, r10
     e6a:	a4 01       	movw	r20, r8
     e6c:	93 01       	movw	r18, r6
     e6e:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__mulsi3>
     e72:	6e 0d       	add	r22, r14
     e74:	7f 1d       	adc	r23, r15
     e76:	80 1f       	adc	r24, r16
     e78:	91 1f       	adc	r25, r17
     e7a:	6c 8b       	std	Y+20, r22	; 0x14
     e7c:	7d 8b       	std	Y+21, r23	; 0x15
     e7e:	8e 8b       	std	Y+22, r24	; 0x16
     e80:	9f 8b       	std	Y+23, r25	; 0x17
   sFATRecordPointerPtr->CurrentFolderAddr=sFATRecordPointerPtr->EndFolderClusterAddr-32UL;//на запись назад
     e82:	60 52       	subi	r22, 0x20	; 32
     e84:	70 40       	sbci	r23, 0x00	; 0
     e86:	80 40       	sbci	r24, 0x00	; 0
     e88:	90 40       	sbci	r25, 0x00	; 0
     e8a:	6c 83       	std	Y+4, r22	; 0x04
     e8c:	7d 83       	std	Y+5, r23	; 0x05
     e8e:	8e 83       	std	Y+6, r24	; 0x06
     e90:	9f 83       	std	Y+7, r25	; 0x07
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <FAT_RecordPointerStepReverse+0x1be>
     e96:	80 e0       	ldi	r24, 0x00	; 0
  }
 }
 return(true);
}
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	bf 90       	pop	r11
     eaa:	af 90       	pop	r10
     eac:	9f 90       	pop	r9
     eae:	8f 90       	pop	r8
     eb0:	7f 90       	pop	r7
     eb2:	6f 90       	pop	r6
     eb4:	5f 90       	pop	r5
     eb6:	4f 90       	pop	r4
     eb8:	3f 90       	pop	r3
     eba:	2f 90       	pop	r2
     ebc:	08 95       	ret

00000ebe <FAT_PrevFileSearch>:
}
//----------------------------------------------------------------------------------------------------
//перейти к предыдущему файлу в каталоге
//----------------------------------------------------------------------------------------------------
bool FAT_PrevFileSearch(void)
{
     ebe:	af 92       	push	r10
     ec0:	bf 92       	push	r11
     ec2:	cf 92       	push	r12
     ec4:	df 92       	push	r13
     ec6:	ef 92       	push	r14
     ec8:	ff 92       	push	r15
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	68 97       	sbiw	r28, 0x18	; 24
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
 struct SFATRecordPointer sFATRecordPointer_Copy=sFATRecordPointer;
     ee2:	de 01       	movw	r26, r28
     ee4:	11 96       	adiw	r26, 0x01	; 1
     ee6:	e1 e5       	ldi	r30, 0x51	; 81
     ee8:	f3 e0       	ldi	r31, 0x03	; 3
     eea:	88 e1       	ldi	r24, 0x18	; 24
     eec:	01 90       	ld	r0, Z+
     eee:	0d 92       	st	X+, r0
     ef0:	81 50       	subi	r24, 0x01	; 1
     ef2:	e1 f7       	brne	.-8      	; 0xeec <FAT_PrevFileSearch+0x2e>
 while(1)
 {
  if (FAT_RecordPointerStepReverse(&sFATRecordPointer_Copy)==false) return(false);  
     ef4:	5e 01       	movw	r10, r28
     ef6:	08 94       	sec
     ef8:	a1 1c       	adc	r10, r1
     efa:	b1 1c       	adc	r11, r1
     efc:	c5 01       	movw	r24, r10
     efe:	0e 94 6d 06 	call	0xcda	; 0xcda <FAT_RecordPointerStepReverse>
     f02:	88 23       	and	r24, r24
     f04:	09 f4       	brne	.+2      	; 0xf08 <FAT_PrevFileSearch+0x4a>
     f06:	6c c0       	rjmp	.+216    	; 0xfe0 <FAT_PrevFileSearch+0x122>
     f08:	cc 24       	eor	r12, r12
     f0a:	dd 24       	eor	r13, r13
     f0c:	76 01       	movw	r14, r12
  //анализируем имя файла
  unsigned char n;
  bool res=true;
  for(n=0;n<11;n++)
  {
   unsigned char b=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+(unsigned long)(n));
     f0e:	6d 81       	ldd	r22, Y+5	; 0x05
     f10:	7e 81       	ldd	r23, Y+6	; 0x06
     f12:	8f 81       	ldd	r24, Y+7	; 0x07
     f14:	98 85       	ldd	r25, Y+8	; 0x08
     f16:	6c 0d       	add	r22, r12
     f18:	7d 1d       	adc	r23, r13
     f1a:	8e 1d       	adc	r24, r14
     f1c:	9f 1d       	adc	r25, r15
     f1e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
     f22:	8c 2d       	mov	r24, r12
   if (n==0)
     f24:	cc 20       	and	r12, r12
     f26:	21 f4       	brne	.+8      	; 0xf30 <FAT_PrevFileSearch+0x72>
   {
    if (b==0x20 || b==0xE5)
     f28:	60 32       	cpi	r22, 0x20	; 32
     f2a:	41 f3       	breq	.-48     	; 0xefc <FAT_PrevFileSearch+0x3e>
     f2c:	65 3e       	cpi	r22, 0xE5	; 229
     f2e:	31 f3       	breq	.-52     	; 0xefc <FAT_PrevFileSearch+0x3e>
	{
     res=false;
     break;	
	}
   }
   if (b<0x20)
     f30:	60 32       	cpi	r22, 0x20	; 32
     f32:	20 f3       	brcs	.-56     	; 0xefc <FAT_PrevFileSearch+0x3e>
   {
    res=false;
    break;
   }
   if (n==1)
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	a9 f4       	brne	.+42     	; 0xf62 <FAT_PrevFileSearch+0xa4>
   {
    unsigned char a=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr);
     f38:	6d 81       	ldd	r22, Y+5	; 0x05
     f3a:	7e 81       	ldd	r23, Y+6	; 0x06
     f3c:	8f 81       	ldd	r24, Y+7	; 0x07
     f3e:	98 85       	ldd	r25, Y+8	; 0x08
     f40:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
     f44:	16 2f       	mov	r17, r22
    unsigned char b=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+1UL);
     f46:	6d 81       	ldd	r22, Y+5	; 0x05
     f48:	7e 81       	ldd	r23, Y+6	; 0x06
     f4a:	8f 81       	ldd	r24, Y+7	; 0x07
     f4c:	98 85       	ldd	r25, Y+8	; 0x08
     f4e:	6f 5f       	subi	r22, 0xFF	; 255
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	8f 4f       	sbci	r24, 0xFF	; 255
     f54:	9f 4f       	sbci	r25, 0xFF	; 255
     f56:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    if (a==(unsigned char)'.' && b!=(unsigned char)'.')
     f5a:	1e 32       	cpi	r17, 0x2E	; 46
     f5c:	11 f4       	brne	.+4      	; 0xf62 <FAT_PrevFileSearch+0xa4>
     f5e:	6e 32       	cpi	r22, 0x2E	; 46
     f60:	69 f6       	brne	.-102    	; 0xefc <FAT_PrevFileSearch+0x3e>
     f62:	08 94       	sec
     f64:	c1 1c       	adc	r12, r1
     f66:	d1 1c       	adc	r13, r1
     f68:	e1 1c       	adc	r14, r1
     f6a:	f1 1c       	adc	r15, r1
 {
  if (FAT_RecordPointerStepReverse(&sFATRecordPointer_Copy)==false) return(false);  
  //анализируем имя файла
  unsigned char n;
  bool res=true;
  for(n=0;n<11;n++)
     f6c:	8b e0       	ldi	r24, 0x0B	; 11
     f6e:	c8 16       	cp	r12, r24
     f70:	d1 04       	cpc	r13, r1
     f72:	e1 04       	cpc	r14, r1
     f74:	f1 04       	cpc	r15, r1
     f76:	59 f6       	brne	.-106    	; 0xf0e <FAT_PrevFileSearch+0x50>
     f78:	44 c0       	rjmp	.+136    	; 0x1002 <FAT_PrevFileSearch+0x144>
  if (res==true)
  {  
   unsigned char type=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+11UL);
   if ((type&0x10)==0)//это файл
   {
    unsigned char a=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+10UL);
     f7a:	6d 81       	ldd	r22, Y+5	; 0x05
     f7c:	7e 81       	ldd	r23, Y+6	; 0x06
     f7e:	8f 81       	ldd	r24, Y+7	; 0x07
     f80:	98 85       	ldd	r25, Y+8	; 0x08
     f82:	66 5f       	subi	r22, 0xF6	; 246
     f84:	7f 4f       	sbci	r23, 0xFF	; 255
     f86:	8f 4f       	sbci	r24, 0xFF	; 255
     f88:	9f 4f       	sbci	r25, 0xFF	; 255
     f8a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
     f8e:	16 2f       	mov	r17, r22
    unsigned char b=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+9UL);
     f90:	6d 81       	ldd	r22, Y+5	; 0x05
     f92:	7e 81       	ldd	r23, Y+6	; 0x06
     f94:	8f 81       	ldd	r24, Y+7	; 0x07
     f96:	98 85       	ldd	r25, Y+8	; 0x08
     f98:	67 5f       	subi	r22, 0xF7	; 247
     f9a:	7f 4f       	sbci	r23, 0xFF	; 255
     f9c:	8f 4f       	sbci	r24, 0xFF	; 255
     f9e:	9f 4f       	sbci	r25, 0xFF	; 255
     fa0:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
     fa4:	06 2f       	mov	r16, r22
    unsigned char c=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+8UL);
     fa6:	6d 81       	ldd	r22, Y+5	; 0x05
     fa8:	7e 81       	ldd	r23, Y+6	; 0x06
     faa:	8f 81       	ldd	r24, Y+7	; 0x07
     fac:	98 85       	ldd	r25, Y+8	; 0x08
     fae:	68 5f       	subi	r22, 0xF8	; 248
     fb0:	7f 4f       	sbci	r23, 0xFF	; 255
     fb2:	8f 4f       	sbci	r24, 0xFF	; 255
     fb4:	9f 4f       	sbci	r25, 0xFF	; 255
     fb6:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    if (!(a=='P' && b=='A' && c=='T')) continue;//неверное расширение
     fba:	10 35       	cpi	r17, 0x50	; 80
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <FAT_PrevFileSearch+0x102>
     fbe:	9e cf       	rjmp	.-196    	; 0xefc <FAT_PrevFileSearch+0x3e>
     fc0:	01 34       	cpi	r16, 0x41	; 65
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <FAT_PrevFileSearch+0x108>
     fc4:	9b cf       	rjmp	.-202    	; 0xefc <FAT_PrevFileSearch+0x3e>
     fc6:	64 35       	cpi	r22, 0x54	; 84
     fc8:	09 f0       	breq	.+2      	; 0xfcc <FAT_PrevFileSearch+0x10e>
     fca:	98 cf       	rjmp	.-208    	; 0xefc <FAT_PrevFileSearch+0x3e>
   }
   sFATRecordPointer=sFATRecordPointer_Copy;
     fcc:	a1 e5       	ldi	r26, 0x51	; 81
     fce:	b3 e0       	ldi	r27, 0x03	; 3
     fd0:	fe 01       	movw	r30, r28
     fd2:	31 96       	adiw	r30, 0x01	; 1
     fd4:	88 e1       	ldi	r24, 0x18	; 24
     fd6:	01 90       	ld	r0, Z+
     fd8:	0d 92       	st	X+, r0
     fda:	81 50       	subi	r24, 0x01	; 1
     fdc:	e1 f7       	brne	.-8      	; 0xfd6 <FAT_PrevFileSearch+0x118>
     fde:	81 e0       	ldi	r24, 0x01	; 1
   return(true);
  }
 }
 return(false);
}
     fe0:	68 96       	adiw	r28, 0x18	; 24
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	1f 91       	pop	r17
     ff2:	0f 91       	pop	r16
     ff4:	ff 90       	pop	r15
     ff6:	ef 90       	pop	r14
     ff8:	df 90       	pop	r13
     ffa:	cf 90       	pop	r12
     ffc:	bf 90       	pop	r11
     ffe:	af 90       	pop	r10
    1000:	08 95       	ret
   }   
  }
  //смотрим расширение
  if (res==true)
  {  
   unsigned char type=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+11UL);
    1002:	6d 81       	ldd	r22, Y+5	; 0x05
    1004:	7e 81       	ldd	r23, Y+6	; 0x06
    1006:	8f 81       	ldd	r24, Y+7	; 0x07
    1008:	98 85       	ldd	r25, Y+8	; 0x08
    100a:	65 5f       	subi	r22, 0xF5	; 245
    100c:	7f 4f       	sbci	r23, 0xFF	; 255
    100e:	8f 4f       	sbci	r24, 0xFF	; 255
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
   if ((type&0x10)==0)//это файл
    1016:	64 ff       	sbrs	r22, 4
    1018:	b0 cf       	rjmp	.-160    	; 0xf7a <FAT_PrevFileSearch+0xbc>
    101a:	d8 cf       	rjmp	.-80     	; 0xfcc <FAT_PrevFileSearch+0x10e>

0000101c <FAT_RecordPointerStepForward>:
}
//----------------------------------------------------------------------------------------------------
//переместиться по записи вперёд
//----------------------------------------------------------------------------------------------------
bool FAT_RecordPointerStepForward(struct SFATRecordPointer *sFATRecordPointerPtr)
{
    101c:	6f 92       	push	r6
    101e:	7f 92       	push	r7
    1020:	8f 92       	push	r8
    1022:	9f 92       	push	r9
    1024:	af 92       	push	r10
    1026:	bf 92       	push	r11
    1028:	cf 92       	push	r12
    102a:	df 92       	push	r13
    102c:	ef 92       	push	r14
    102e:	ff 92       	push	r15
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	ec 01       	movw	r28, r24
 sFATRecordPointerPtr->CurrentFolderAddr+=32UL;//переходим к следующей записи 
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	9d 81       	ldd	r25, Y+5	; 0x05
    103e:	ae 81       	ldd	r26, Y+6	; 0x06
    1040:	bf 81       	ldd	r27, Y+7	; 0x07
    1042:	80 96       	adiw	r24, 0x20	; 32
    1044:	a1 1d       	adc	r26, r1
    1046:	b1 1d       	adc	r27, r1
    1048:	8c 83       	std	Y+4, r24	; 0x04
    104a:	9d 83       	std	Y+5, r25	; 0x05
    104c:	ae 83       	std	Y+6, r26	; 0x06
    104e:	bf 83       	std	Y+7, r27	; 0x07
 if (sFATRecordPointerPtr->CurrentFolderAddr>=sFATRecordPointerPtr->EndFolderClusterAddr)//вышли за границу кластера или директории
    1050:	2c 89       	ldd	r18, Y+20	; 0x14
    1052:	3d 89       	ldd	r19, Y+21	; 0x15
    1054:	4e 89       	ldd	r20, Y+22	; 0x16
    1056:	5f 89       	ldd	r21, Y+23	; 0x17
    1058:	82 17       	cp	r24, r18
    105a:	93 07       	cpc	r25, r19
    105c:	a4 07       	cpc	r26, r20
    105e:	b5 07       	cpc	r27, r21
    1060:	08 f4       	brcc	.+2      	; 0x1064 <FAT_RecordPointerStepForward+0x48>
    1062:	a9 c0       	rjmp	.+338    	; 0x11b6 <FAT_RecordPointerStepForward+0x19a>
 {
  if (sFATRecordPointerPtr->BeginFolderAddr==FirstRootFolderAddr)//если у нас закончилась корневая директория
    1064:	28 81       	ld	r18, Y
    1066:	39 81       	ldd	r19, Y+1	; 0x01
    1068:	4a 81       	ldd	r20, Y+2	; 0x02
    106a:	5b 81       	ldd	r21, Y+3	; 0x03
    106c:	80 91 7d 03 	lds	r24, 0x037D
    1070:	90 91 7e 03 	lds	r25, 0x037E
    1074:	a0 91 7f 03 	lds	r26, 0x037F
    1078:	b0 91 80 03 	lds	r27, 0x0380
    107c:	28 17       	cp	r18, r24
    107e:	39 07       	cpc	r19, r25
    1080:	4a 07       	cpc	r20, r26
    1082:	5b 07       	cpc	r21, r27
    1084:	09 f4       	brne	.+2      	; 0x1088 <FAT_RecordPointerStepForward+0x6c>
    1086:	99 c0       	rjmp	.+306    	; 0x11ba <FAT_RecordPointerStepForward+0x19e>
   return(false);
  }  
  else//для не корневой директории узнаём новый адрес кластера
  {
   unsigned long FATClusterOffset=0;//смещение по таблице FAT в байтах (в FAT32 они 4-х байтные, а в FAT16 - двухбайтные)
   if (FATType==FAT16) FATClusterOffset=sFATRecordPointerPtr->CurrentFolderCluster*2UL;//узнаём смещение в таблице FAT
    1088:	e0 91 1e 01 	lds	r30, 0x011E
    108c:	e1 30       	cpi	r30, 0x01	; 1
    108e:	21 f0       	breq	.+8      	; 0x1098 <FAT_RecordPointerStepForward+0x7c>
    1090:	ee 24       	eor	r14, r14
    1092:	ff 24       	eor	r15, r15
    1094:	87 01       	movw	r16, r14
    1096:	08 c0       	rjmp	.+16     	; 0x10a8 <FAT_RecordPointerStepForward+0x8c>
    1098:	ec 84       	ldd	r14, Y+12	; 0x0c
    109a:	fd 84       	ldd	r15, Y+13	; 0x0d
    109c:	0e 85       	ldd	r16, Y+14	; 0x0e
    109e:	1f 85       	ldd	r17, Y+15	; 0x0f
    10a0:	ee 0c       	add	r14, r14
    10a2:	ff 1c       	adc	r15, r15
    10a4:	00 1f       	adc	r16, r16
    10a6:	11 1f       	adc	r17, r17
   unsigned long NextClusterAddr=ResvdSecCnt*BytsPerSec+FATClusterOffset;//адрес следующего кластера
    10a8:	20 91 49 03 	lds	r18, 0x0349
    10ac:	30 91 4a 03 	lds	r19, 0x034A
    10b0:	40 91 4b 03 	lds	r20, 0x034B
    10b4:	50 91 4c 03 	lds	r21, 0x034C
    10b8:	60 91 69 03 	lds	r22, 0x0369
    10bc:	70 91 6a 03 	lds	r23, 0x036A
    10c0:	80 91 6b 03 	lds	r24, 0x036B
    10c4:	90 91 6c 03 	lds	r25, 0x036C
   //считываем номер следующего кластера файла
   unsigned long NextCluster=0;
   if (FATType==FAT16) NextCluster=GetShort(NextClusterAddr);
    10c8:	e1 30       	cpi	r30, 0x01	; 1
    10ca:	09 f0       	breq	.+2      	; 0x10ce <FAT_RecordPointerStepForward+0xb2>
    10cc:	76 c0       	rjmp	.+236    	; 0x11ba <FAT_RecordPointerStepForward+0x19e>
    10ce:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__mulsi3>
    10d2:	e6 0e       	add	r14, r22
    10d4:	f7 1e       	adc	r15, r23
    10d6:	08 1f       	adc	r16, r24
    10d8:	19 1f       	adc	r17, r25
    10da:	c8 01       	movw	r24, r16
    10dc:	b7 01       	movw	r22, r14
    10de:	0e 94 42 06 	call	0xc84	; 0xc84 <GetShort>
    10e2:	9b 01       	movw	r18, r22
    10e4:	ac 01       	movw	r20, r24
   if (NextCluster==0 || NextCluster>=CountofClusters+2UL || NextCluster>=FAT16_EOC)//такого кластера нет
    10e6:	61 15       	cp	r22, r1
    10e8:	71 05       	cpc	r23, r1
    10ea:	81 05       	cpc	r24, r1
    10ec:	91 05       	cpc	r25, r1
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <FAT_RecordPointerStepForward+0xd6>
    10f0:	64 c0       	rjmp	.+200    	; 0x11ba <FAT_RecordPointerStepForward+0x19e>
    10f2:	80 91 71 03 	lds	r24, 0x0371
    10f6:	90 91 72 03 	lds	r25, 0x0372
    10fa:	a0 91 73 03 	lds	r26, 0x0373
    10fe:	b0 91 74 03 	lds	r27, 0x0374
    1102:	02 96       	adiw	r24, 0x02	; 2
    1104:	a1 1d       	adc	r26, r1
    1106:	b1 1d       	adc	r27, r1
    1108:	28 17       	cp	r18, r24
    110a:	39 07       	cpc	r19, r25
    110c:	4a 07       	cpc	r20, r26
    110e:	5b 07       	cpc	r21, r27
    1110:	08 f0       	brcs	.+2      	; 0x1114 <FAT_RecordPointerStepForward+0xf8>
    1112:	53 c0       	rjmp	.+166    	; 0x11ba <FAT_RecordPointerStepForward+0x19e>
    1114:	28 3f       	cpi	r18, 0xF8	; 248
    1116:	8f ef       	ldi	r24, 0xFF	; 255
    1118:	38 07       	cpc	r19, r24
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	48 07       	cpc	r20, r24
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	58 07       	cpc	r21, r24
    1122:	08 f0       	brcs	.+2      	; 0x1126 <FAT_RecordPointerStepForward+0x10a>
    1124:	4a c0       	rjmp	.+148    	; 0x11ba <FAT_RecordPointerStepForward+0x19e>
   {
    return(false);        	
   }
   sFATRecordPointerPtr->CurrentFolderCluster=NextCluster;//переходим к следующему кластеру
    1126:	2c 87       	std	Y+12, r18	; 0x0c
    1128:	3d 87       	std	Y+13, r19	; 0x0d
    112a:	4e 87       	std	Y+14, r20	; 0x0e
    112c:	5f 87       	std	Y+15, r21	; 0x0f
   unsigned long FirstSectorofCluster=((sFATRecordPointerPtr->CurrentFolderCluster-2UL)*SecPerClus)+FirstDataSector; 
    112e:	60 90 41 03 	lds	r6, 0x0341
    1132:	70 90 42 03 	lds	r7, 0x0342
    1136:	80 90 43 03 	lds	r8, 0x0343
    113a:	90 90 44 03 	lds	r9, 0x0344
   sFATRecordPointerPtr->CurrentFolderAddr=FirstSectorofCluster*BytsPerSec; 
    113e:	a0 90 69 03 	lds	r10, 0x0369
    1142:	b0 90 6a 03 	lds	r11, 0x036A
    1146:	c0 90 6b 03 	lds	r12, 0x036B
    114a:	d0 90 6c 03 	lds	r13, 0x036C
    114e:	22 50       	subi	r18, 0x02	; 2
    1150:	30 40       	sbci	r19, 0x00	; 0
    1152:	40 40       	sbci	r20, 0x00	; 0
    1154:	50 40       	sbci	r21, 0x00	; 0
    1156:	ca 01       	movw	r24, r20
    1158:	b9 01       	movw	r22, r18
    115a:	a4 01       	movw	r20, r8
    115c:	93 01       	movw	r18, r6
    115e:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__mulsi3>
    1162:	9b 01       	movw	r18, r22
    1164:	ac 01       	movw	r20, r24
    1166:	60 91 3d 03 	lds	r22, 0x033D
    116a:	70 91 3e 03 	lds	r23, 0x033E
    116e:	80 91 3f 03 	lds	r24, 0x033F
    1172:	90 91 40 03 	lds	r25, 0x0340
    1176:	62 0f       	add	r22, r18
    1178:	73 1f       	adc	r23, r19
    117a:	84 1f       	adc	r24, r20
    117c:	95 1f       	adc	r25, r21
    117e:	a6 01       	movw	r20, r12
    1180:	95 01       	movw	r18, r10
    1182:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__mulsi3>
    1186:	7b 01       	movw	r14, r22
    1188:	8c 01       	movw	r16, r24
    118a:	6c 83       	std	Y+4, r22	; 0x04
    118c:	7d 83       	std	Y+5, r23	; 0x05
    118e:	8e 83       	std	Y+6, r24	; 0x06
    1190:	9f 83       	std	Y+7, r25	; 0x07
   sFATRecordPointerPtr->BeginFolderClusterAddr=sFATRecordPointerPtr->CurrentFolderAddr;
    1192:	68 8b       	std	Y+16, r22	; 0x10
    1194:	79 8b       	std	Y+17, r23	; 0x11
    1196:	8a 8b       	std	Y+18, r24	; 0x12
    1198:	9b 8b       	std	Y+19, r25	; 0x13
   sFATRecordPointerPtr->EndFolderClusterAddr=sFATRecordPointerPtr->CurrentFolderAddr+SecPerClus*BytsPerSec;
    119a:	c6 01       	movw	r24, r12
    119c:	b5 01       	movw	r22, r10
    119e:	a4 01       	movw	r20, r8
    11a0:	93 01       	movw	r18, r6
    11a2:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__mulsi3>
    11a6:	6e 0d       	add	r22, r14
    11a8:	7f 1d       	adc	r23, r15
    11aa:	80 1f       	adc	r24, r16
    11ac:	91 1f       	adc	r25, r17
    11ae:	6c 8b       	std	Y+20, r22	; 0x14
    11b0:	7d 8b       	std	Y+21, r23	; 0x15
    11b2:	8e 8b       	std	Y+22, r24	; 0x16
    11b4:	9f 8b       	std	Y+23, r25	; 0x17
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <FAT_RecordPointerStepForward+0x1a0>
    11ba:	80 e0       	ldi	r24, 0x00	; 0
  }
 }
 return(true);
}
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	ff 90       	pop	r15
    11c6:	ef 90       	pop	r14
    11c8:	df 90       	pop	r13
    11ca:	cf 90       	pop	r12
    11cc:	bf 90       	pop	r11
    11ce:	af 90       	pop	r10
    11d0:	9f 90       	pop	r9
    11d2:	8f 90       	pop	r8
    11d4:	7f 90       	pop	r7
    11d6:	6f 90       	pop	r6
    11d8:	08 95       	ret

000011da <FAT_NextFileSearch>:
}
//----------------------------------------------------------------------------------------------------
//перейти к следующему файлу в каталоге
//----------------------------------------------------------------------------------------------------
bool FAT_NextFileSearch(void)
{
    11da:	af 92       	push	r10
    11dc:	bf 92       	push	r11
    11de:	cf 92       	push	r12
    11e0:	df 92       	push	r13
    11e2:	ef 92       	push	r14
    11e4:	ff 92       	push	r15
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	68 97       	sbiw	r28, 0x18	; 24
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
 struct SFATRecordPointer sFATRecordPointer_Copy=sFATRecordPointer;
    11fe:	de 01       	movw	r26, r28
    1200:	11 96       	adiw	r26, 0x01	; 1
    1202:	e1 e5       	ldi	r30, 0x51	; 81
    1204:	f3 e0       	ldi	r31, 0x03	; 3
    1206:	88 e1       	ldi	r24, 0x18	; 24
    1208:	01 90       	ld	r0, Z+
    120a:	0d 92       	st	X+, r0
    120c:	81 50       	subi	r24, 0x01	; 1
    120e:	e1 f7       	brne	.-8      	; 0x1208 <FAT_NextFileSearch+0x2e>
 while(1)
 {
  if (FAT_RecordPointerStepForward(&sFATRecordPointer_Copy)==false) return(false); 
    1210:	5e 01       	movw	r10, r28
    1212:	08 94       	sec
    1214:	a1 1c       	adc	r10, r1
    1216:	b1 1c       	adc	r11, r1
    1218:	c5 01       	movw	r24, r10
    121a:	0e 94 0e 08 	call	0x101c	; 0x101c <FAT_RecordPointerStepForward>
    121e:	88 23       	and	r24, r24
    1220:	09 f4       	brne	.+2      	; 0x1224 <FAT_NextFileSearch+0x4a>
    1222:	6c c0       	rjmp	.+216    	; 0x12fc <FAT_NextFileSearch+0x122>
    1224:	cc 24       	eor	r12, r12
    1226:	dd 24       	eor	r13, r13
    1228:	76 01       	movw	r14, r12
  unsigned char n;
  bool res=true;
  for(n=0;n<11;n++)
  {
   unsigned char b=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+(unsigned long)(n));
    122a:	6d 81       	ldd	r22, Y+5	; 0x05
    122c:	7e 81       	ldd	r23, Y+6	; 0x06
    122e:	8f 81       	ldd	r24, Y+7	; 0x07
    1230:	98 85       	ldd	r25, Y+8	; 0x08
    1232:	6c 0d       	add	r22, r12
    1234:	7d 1d       	adc	r23, r13
    1236:	8e 1d       	adc	r24, r14
    1238:	9f 1d       	adc	r25, r15
    123a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    123e:	8c 2d       	mov	r24, r12
   if (n==0)
    1240:	cc 20       	and	r12, r12
    1242:	21 f4       	brne	.+8      	; 0x124c <FAT_NextFileSearch+0x72>
   {
    if (b==0x20 || b==0xE5)
    1244:	60 32       	cpi	r22, 0x20	; 32
    1246:	41 f3       	breq	.-48     	; 0x1218 <FAT_NextFileSearch+0x3e>
    1248:	65 3e       	cpi	r22, 0xE5	; 229
    124a:	31 f3       	breq	.-52     	; 0x1218 <FAT_NextFileSearch+0x3e>
	{
     res=false;
     break;	
	}
   }
   if (b<0x20)
    124c:	60 32       	cpi	r22, 0x20	; 32
    124e:	20 f3       	brcs	.-56     	; 0x1218 <FAT_NextFileSearch+0x3e>
   {
    res=false;
    break;
   }
   if (n==1)
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	a9 f4       	brne	.+42     	; 0x127e <FAT_NextFileSearch+0xa4>
   {
    unsigned char a=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr);
    1254:	6d 81       	ldd	r22, Y+5	; 0x05
    1256:	7e 81       	ldd	r23, Y+6	; 0x06
    1258:	8f 81       	ldd	r24, Y+7	; 0x07
    125a:	98 85       	ldd	r25, Y+8	; 0x08
    125c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    1260:	16 2f       	mov	r17, r22
    unsigned char b=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+1UL);
    1262:	6d 81       	ldd	r22, Y+5	; 0x05
    1264:	7e 81       	ldd	r23, Y+6	; 0x06
    1266:	8f 81       	ldd	r24, Y+7	; 0x07
    1268:	98 85       	ldd	r25, Y+8	; 0x08
    126a:	6f 5f       	subi	r22, 0xFF	; 255
    126c:	7f 4f       	sbci	r23, 0xFF	; 255
    126e:	8f 4f       	sbci	r24, 0xFF	; 255
    1270:	9f 4f       	sbci	r25, 0xFF	; 255
    1272:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    if (a==(unsigned char)'.' && b!=(unsigned char)'.')
    1276:	1e 32       	cpi	r17, 0x2E	; 46
    1278:	11 f4       	brne	.+4      	; 0x127e <FAT_NextFileSearch+0xa4>
    127a:	6e 32       	cpi	r22, 0x2E	; 46
    127c:	69 f6       	brne	.-102    	; 0x1218 <FAT_NextFileSearch+0x3e>
    127e:	08 94       	sec
    1280:	c1 1c       	adc	r12, r1
    1282:	d1 1c       	adc	r13, r1
    1284:	e1 1c       	adc	r14, r1
    1286:	f1 1c       	adc	r15, r1
 while(1)
 {
  if (FAT_RecordPointerStepForward(&sFATRecordPointer_Copy)==false) return(false); 
  unsigned char n;
  bool res=true;
  for(n=0;n<11;n++)
    1288:	8b e0       	ldi	r24, 0x0B	; 11
    128a:	c8 16       	cp	r12, r24
    128c:	d1 04       	cpc	r13, r1
    128e:	e1 04       	cpc	r14, r1
    1290:	f1 04       	cpc	r15, r1
    1292:	59 f6       	brne	.-106    	; 0x122a <FAT_NextFileSearch+0x50>
    1294:	44 c0       	rjmp	.+136    	; 0x131e <FAT_NextFileSearch+0x144>
  if (res==true)
  {
   unsigned char type=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+11UL);
   if ((type&0x10)==0)//это файл
   {
    unsigned char a=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+10UL);
    1296:	6d 81       	ldd	r22, Y+5	; 0x05
    1298:	7e 81       	ldd	r23, Y+6	; 0x06
    129a:	8f 81       	ldd	r24, Y+7	; 0x07
    129c:	98 85       	ldd	r25, Y+8	; 0x08
    129e:	66 5f       	subi	r22, 0xF6	; 246
    12a0:	7f 4f       	sbci	r23, 0xFF	; 255
    12a2:	8f 4f       	sbci	r24, 0xFF	; 255
    12a4:	9f 4f       	sbci	r25, 0xFF	; 255
    12a6:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    12aa:	16 2f       	mov	r17, r22
    unsigned char b=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+9UL);
    12ac:	6d 81       	ldd	r22, Y+5	; 0x05
    12ae:	7e 81       	ldd	r23, Y+6	; 0x06
    12b0:	8f 81       	ldd	r24, Y+7	; 0x07
    12b2:	98 85       	ldd	r25, Y+8	; 0x08
    12b4:	67 5f       	subi	r22, 0xF7	; 247
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    12c0:	06 2f       	mov	r16, r22
    unsigned char c=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+8UL);
    12c2:	6d 81       	ldd	r22, Y+5	; 0x05
    12c4:	7e 81       	ldd	r23, Y+6	; 0x06
    12c6:	8f 81       	ldd	r24, Y+7	; 0x07
    12c8:	98 85       	ldd	r25, Y+8	; 0x08
    12ca:	68 5f       	subi	r22, 0xF8	; 248
    12cc:	7f 4f       	sbci	r23, 0xFF	; 255
    12ce:	8f 4f       	sbci	r24, 0xFF	; 255
    12d0:	9f 4f       	sbci	r25, 0xFF	; 255
    12d2:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    if (!(a=='P' && b=='A' && c=='T')) continue;//неверное расширение
    12d6:	10 35       	cpi	r17, 0x50	; 80
    12d8:	09 f0       	breq	.+2      	; 0x12dc <FAT_NextFileSearch+0x102>
    12da:	9e cf       	rjmp	.-196    	; 0x1218 <FAT_NextFileSearch+0x3e>
    12dc:	01 34       	cpi	r16, 0x41	; 65
    12de:	09 f0       	breq	.+2      	; 0x12e2 <FAT_NextFileSearch+0x108>
    12e0:	9b cf       	rjmp	.-202    	; 0x1218 <FAT_NextFileSearch+0x3e>
    12e2:	64 35       	cpi	r22, 0x54	; 84
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <FAT_NextFileSearch+0x10e>
    12e6:	98 cf       	rjmp	.-208    	; 0x1218 <FAT_NextFileSearch+0x3e>
   }
   sFATRecordPointer=sFATRecordPointer_Copy;
    12e8:	a1 e5       	ldi	r26, 0x51	; 81
    12ea:	b3 e0       	ldi	r27, 0x03	; 3
    12ec:	fe 01       	movw	r30, r28
    12ee:	31 96       	adiw	r30, 0x01	; 1
    12f0:	88 e1       	ldi	r24, 0x18	; 24
    12f2:	01 90       	ld	r0, Z+
    12f4:	0d 92       	st	X+, r0
    12f6:	81 50       	subi	r24, 0x01	; 1
    12f8:	e1 f7       	brne	.-8      	; 0x12f2 <FAT_NextFileSearch+0x118>
    12fa:	81 e0       	ldi	r24, 0x01	; 1
   return(true);
  }
 }
 return(false);
}
    12fc:	68 96       	adiw	r28, 0x18	; 24
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	1f 91       	pop	r17
    130e:	0f 91       	pop	r16
    1310:	ff 90       	pop	r15
    1312:	ef 90       	pop	r14
    1314:	df 90       	pop	r13
    1316:	cf 90       	pop	r12
    1318:	bf 90       	pop	r11
    131a:	af 90       	pop	r10
    131c:	08 95       	ret
    }	
   }     
  }
  if (res==true)
  {
   unsigned char type=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+11UL);
    131e:	6d 81       	ldd	r22, Y+5	; 0x05
    1320:	7e 81       	ldd	r23, Y+6	; 0x06
    1322:	8f 81       	ldd	r24, Y+7	; 0x07
    1324:	98 85       	ldd	r25, Y+8	; 0x08
    1326:	65 5f       	subi	r22, 0xF5	; 245
    1328:	7f 4f       	sbci	r23, 0xFF	; 255
    132a:	8f 4f       	sbci	r24, 0xFF	; 255
    132c:	9f 4f       	sbci	r25, 0xFF	; 255
    132e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
   if ((type&0x10)==0)//это файл
    1332:	64 ff       	sbrs	r22, 4
    1334:	b0 cf       	rjmp	.-160    	; 0x1296 <FAT_NextFileSearch+0xbc>
    1336:	d8 cf       	rjmp	.-80     	; 0x12e8 <FAT_NextFileSearch+0x10e>

00001338 <GetLong>:
}
//----------------------------------------------------------------------------------------------------
//считать 4 байта
//----------------------------------------------------------------------------------------------------
unsigned long GetLong(unsigned long offset)
{
    1338:	af 92       	push	r10
    133a:	bf 92       	push	r11
    133c:	cf 92       	push	r12
    133e:	df 92       	push	r13
    1340:	ef 92       	push	r14
    1342:	ff 92       	push	r15
    1344:	0f 93       	push	r16
    1346:	1f 93       	push	r17
    1348:	5b 01       	movw	r10, r22
    134a:	6c 01       	movw	r12, r24
 unsigned long v=GetByte(offset+3UL);
    134c:	6d 5f       	subi	r22, 0xFD	; 253
    134e:	7f 4f       	sbci	r23, 0xFF	; 255
    1350:	8f 4f       	sbci	r24, 0xFF	; 255
    1352:	9f 4f       	sbci	r25, 0xFF	; 255
    1354:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    1358:	7b 01       	movw	r14, r22
    135a:	8c 01       	movw	r16, r24
 v<<=8UL;
    135c:	10 2f       	mov	r17, r16
    135e:	0f 2d       	mov	r16, r15
    1360:	fe 2c       	mov	r15, r14
    1362:	ee 24       	eor	r14, r14
 v|=GetByte(offset+2UL);
    1364:	c6 01       	movw	r24, r12
    1366:	b5 01       	movw	r22, r10
    1368:	6e 5f       	subi	r22, 0xFE	; 254
    136a:	7f 4f       	sbci	r23, 0xFF	; 255
    136c:	8f 4f       	sbci	r24, 0xFF	; 255
    136e:	9f 4f       	sbci	r25, 0xFF	; 255
    1370:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    1374:	e6 2a       	or	r14, r22
    1376:	f7 2a       	or	r15, r23
    1378:	08 2b       	or	r16, r24
    137a:	19 2b       	or	r17, r25
 v<<=8UL;
    137c:	10 2f       	mov	r17, r16
    137e:	0f 2d       	mov	r16, r15
    1380:	fe 2c       	mov	r15, r14
    1382:	ee 24       	eor	r14, r14
 v|=GetByte(offset+1UL);
    1384:	c6 01       	movw	r24, r12
    1386:	b5 01       	movw	r22, r10
    1388:	6f 5f       	subi	r22, 0xFF	; 255
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	8f 4f       	sbci	r24, 0xFF	; 255
    138e:	9f 4f       	sbci	r25, 0xFF	; 255
    1390:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    1394:	e6 2a       	or	r14, r22
    1396:	f7 2a       	or	r15, r23
    1398:	08 2b       	or	r16, r24
    139a:	19 2b       	or	r17, r25
 v<<=8UL;
    139c:	10 2f       	mov	r17, r16
    139e:	0f 2d       	mov	r16, r15
    13a0:	fe 2c       	mov	r15, r14
    13a2:	ee 24       	eor	r14, r14
 v|=GetByte(offset);
    13a4:	c6 01       	movw	r24, r12
    13a6:	b5 01       	movw	r22, r10
    13a8:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    13ac:	9b 01       	movw	r18, r22
    13ae:	ac 01       	movw	r20, r24
    13b0:	2e 29       	or	r18, r14
    13b2:	3f 29       	or	r19, r15
    13b4:	40 2b       	or	r20, r16
    13b6:	51 2b       	or	r21, r17
 return(v);
}
    13b8:	b9 01       	movw	r22, r18
    13ba:	ca 01       	movw	r24, r20
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	ff 90       	pop	r15
    13c2:	ef 90       	pop	r14
    13c4:	df 90       	pop	r13
    13c6:	cf 90       	pop	r12
    13c8:	bf 90       	pop	r11
    13ca:	af 90       	pop	r10
    13cc:	08 95       	ret

000013ce <FAT_GetFileSearch>:
}
//----------------------------------------------------------------------------------------------------
//получить параметры текущего найденного файла в каталоге
//----------------------------------------------------------------------------------------------------
bool FAT_GetFileSearch(char *filename,unsigned long *FirstCluster,unsigned long *Size,signed char *directory)
{
    13ce:	2f 92       	push	r2
    13d0:	3f 92       	push	r3
    13d2:	4f 92       	push	r4
    13d4:	5f 92       	push	r5
    13d6:	6f 92       	push	r6
    13d8:	7f 92       	push	r7
    13da:	8f 92       	push	r8
    13dc:	9f 92       	push	r9
    13de:	af 92       	push	r10
    13e0:	bf 92       	push	r11
    13e2:	cf 92       	push	r12
    13e4:	df 92       	push	r13
    13e6:	ef 92       	push	r14
    13e8:	ff 92       	push	r15
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	68 97       	sbiw	r28, 0x18	; 24
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	de bf       	out	0x3e, r29	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	cd bf       	out	0x3d, r28	; 61
    1402:	4c 01       	movw	r8, r24
    1404:	2b 01       	movw	r4, r22
    1406:	1a 01       	movw	r2, r20
    1408:	39 01       	movw	r6, r18
 unsigned char n;
 bool res=true;
 *directory=0;
    140a:	d9 01       	movw	r26, r18
    140c:	1c 92       	st	X, r1
 if (filename!=NULL)
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	29 f4       	brne	.+10     	; 0x141c <FAT_GetFileSearch+0x4e>
    1412:	54 01       	movw	r10, r8
    1414:	cc 24       	eor	r12, r12
    1416:	dd 24       	eor	r13, r13
    1418:	76 01       	movw	r14, r12
    141a:	0c c0       	rjmp	.+24     	; 0x1434 <FAT_GetFileSearch+0x66>
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	90 e0       	ldi	r25, 0x00	; 0
 {
  for(n=0;n<11;n++) filename[n]=32;
    1420:	20 e2       	ldi	r18, 0x20	; 32
    1422:	f4 01       	movw	r30, r8
    1424:	e8 0f       	add	r30, r24
    1426:	f9 1f       	adc	r31, r25
    1428:	20 83       	st	Z, r18
    142a:	01 96       	adiw	r24, 0x01	; 1
    142c:	8b 30       	cpi	r24, 0x0B	; 11
    142e:	91 05       	cpc	r25, r1
    1430:	c1 f7       	brne	.-16     	; 0x1422 <FAT_GetFileSearch+0x54>
    1432:	ef cf       	rjmp	.-34     	; 0x1412 <FAT_GetFileSearch+0x44>
 }
 for(n=0;n<11;n++)
 {    
  unsigned char b=GetByte(sFATRecordPointer.CurrentFolderAddr+(unsigned long)(n));
    1434:	60 91 55 03 	lds	r22, 0x0355
    1438:	70 91 56 03 	lds	r23, 0x0356
    143c:	80 91 57 03 	lds	r24, 0x0357
    1440:	90 91 58 03 	lds	r25, 0x0358
    1444:	6c 0d       	add	r22, r12
    1446:	7d 1d       	adc	r23, r13
    1448:	8e 1d       	adc	r24, r14
    144a:	9f 1d       	adc	r25, r15
    144c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    1450:	8c 2d       	mov	r24, r12
  if (n==0)
    1452:	cc 20       	and	r12, r12
    1454:	31 f4       	brne	.+12     	; 0x1462 <FAT_GetFileSearch+0x94>
  {
   if (b==0x20 || b==0xE5)
    1456:	60 32       	cpi	r22, 0x20	; 32
    1458:	09 f4       	brne	.+2      	; 0x145c <FAT_GetFileSearch+0x8e>
    145a:	8f c1       	rjmp	.+798    	; 0x177a <FAT_GetFileSearch+0x3ac>
    145c:	65 3e       	cpi	r22, 0xE5	; 229
    145e:	09 f4       	brne	.+2      	; 0x1462 <FAT_GetFileSearch+0x94>
    1460:	8c c1       	rjmp	.+792    	; 0x177a <FAT_GetFileSearch+0x3ac>
   {
    res=false;
    break;	
   }
  }
  if (b<0x20)
    1462:	60 32       	cpi	r22, 0x20	; 32
    1464:	08 f4       	brcc	.+2      	; 0x1468 <FAT_GetFileSearch+0x9a>
    1466:	89 c1       	rjmp	.+786    	; 0x177a <FAT_GetFileSearch+0x3ac>
  {
   res=false;
   break;
  }
  if (filename!=NULL)
    1468:	81 14       	cp	r8, r1
    146a:	91 04       	cpc	r9, r1
    146c:	49 f0       	breq	.+18     	; 0x1480 <FAT_GetFileSearch+0xb2>
  {
   if (n<8) filename[n]=b;
    146e:	88 30       	cpi	r24, 0x08	; 8
    1470:	18 f4       	brcc	.+6      	; 0x1478 <FAT_GetFileSearch+0xaa>
    1472:	f5 01       	movw	r30, r10
    1474:	60 83       	st	Z, r22
    1476:	04 c0       	rjmp	.+8      	; 0x1480 <FAT_GetFileSearch+0xb2>
       else filename[n+1]=b;
    1478:	d5 01       	movw	r26, r10
    147a:	11 96       	adiw	r26, 0x01	; 1
    147c:	6c 93       	st	X, r22
    147e:	20 c0       	rjmp	.+64     	; 0x14c0 <FAT_GetFileSearch+0xf2>
  }
  if (n==1)
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	f1 f4       	brne	.+60     	; 0x14c0 <FAT_GetFileSearch+0xf2>
  {
   unsigned char a=GetByte(sFATRecordPointer.CurrentFolderAddr);
    1484:	60 91 55 03 	lds	r22, 0x0355
    1488:	70 91 56 03 	lds	r23, 0x0356
    148c:	80 91 57 03 	lds	r24, 0x0357
    1490:	90 91 58 03 	lds	r25, 0x0358
    1494:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    1498:	16 2f       	mov	r17, r22
   unsigned char b=GetByte(sFATRecordPointer.CurrentFolderAddr+1UL);
    149a:	60 91 55 03 	lds	r22, 0x0355
    149e:	70 91 56 03 	lds	r23, 0x0356
    14a2:	80 91 57 03 	lds	r24, 0x0357
    14a6:	90 91 58 03 	lds	r25, 0x0358
    14aa:	6f 5f       	subi	r22, 0xFF	; 255
    14ac:	7f 4f       	sbci	r23, 0xFF	; 255
    14ae:	8f 4f       	sbci	r24, 0xFF	; 255
    14b0:	9f 4f       	sbci	r25, 0xFF	; 255
    14b2:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
   if (a==(unsigned char)'.' && b!=(unsigned char)'.')
    14b6:	1e 32       	cpi	r17, 0x2E	; 46
    14b8:	19 f4       	brne	.+6      	; 0x14c0 <FAT_GetFileSearch+0xf2>
    14ba:	6e 32       	cpi	r22, 0x2E	; 46
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <FAT_GetFileSearch+0xf2>
    14be:	5d c1       	rjmp	.+698    	; 0x177a <FAT_GetFileSearch+0x3ac>
    14c0:	08 94       	sec
    14c2:	c1 1c       	adc	r12, r1
    14c4:	d1 1c       	adc	r13, r1
    14c6:	e1 1c       	adc	r14, r1
    14c8:	f1 1c       	adc	r15, r1
    14ca:	08 94       	sec
    14cc:	a1 1c       	adc	r10, r1
    14ce:	b1 1c       	adc	r11, r1
 *directory=0;
 if (filename!=NULL)
 {
  for(n=0;n<11;n++) filename[n]=32;
 }
 for(n=0;n<11;n++)
    14d0:	bb e0       	ldi	r27, 0x0B	; 11
    14d2:	cb 16       	cp	r12, r27
    14d4:	d1 04       	cpc	r13, r1
    14d6:	e1 04       	cpc	r14, r1
    14d8:	f1 04       	cpc	r15, r1
    14da:	09 f0       	breq	.+2      	; 0x14de <FAT_GetFileSearch+0x110>
    14dc:	ab cf       	rjmp	.-170    	; 0x1434 <FAT_GetFileSearch+0x66>
    14de:	69 c1       	rjmp	.+722    	; 0x17b2 <FAT_GetFileSearch+0x3e4>
 if (res==true)
 {
  unsigned char type=GetByte(sFATRecordPointer.CurrentFolderAddr+11UL);
  if ((type&0x10)==0)//это файл
  {
   unsigned char a=GetByte(sFATRecordPointer.CurrentFolderAddr+10UL);
    14e0:	0a 96       	adiw	r24, 0x0a	; 10
    14e2:	a1 1d       	adc	r26, r1
    14e4:	b1 1d       	adc	r27, r1
    14e6:	bc 01       	movw	r22, r24
    14e8:	cd 01       	movw	r24, r26
    14ea:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    14ee:	16 2f       	mov	r17, r22
   unsigned char b=GetByte(sFATRecordPointer.CurrentFolderAddr+9UL);
    14f0:	60 91 55 03 	lds	r22, 0x0355
    14f4:	70 91 56 03 	lds	r23, 0x0356
    14f8:	80 91 57 03 	lds	r24, 0x0357
    14fc:	90 91 58 03 	lds	r25, 0x0358
    1500:	67 5f       	subi	r22, 0xF7	; 247
    1502:	7f 4f       	sbci	r23, 0xFF	; 255
    1504:	8f 4f       	sbci	r24, 0xFF	; 255
    1506:	9f 4f       	sbci	r25, 0xFF	; 255
    1508:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    150c:	06 2f       	mov	r16, r22
   unsigned char c=GetByte(sFATRecordPointer.CurrentFolderAddr+8UL);
    150e:	60 91 55 03 	lds	r22, 0x0355
    1512:	70 91 56 03 	lds	r23, 0x0356
    1516:	80 91 57 03 	lds	r24, 0x0357
    151a:	90 91 58 03 	lds	r25, 0x0358
    151e:	68 5f       	subi	r22, 0xF8	; 248
    1520:	7f 4f       	sbci	r23, 0xFF	; 255
    1522:	8f 4f       	sbci	r24, 0xFF	; 255
    1524:	9f 4f       	sbci	r25, 0xFF	; 255
    1526:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
   if (!(a=='P' && b=='A' && c=='T')) return(false);//неверное расширение
    152a:	10 35       	cpi	r17, 0x50	; 80
    152c:	09 f0       	breq	.+2      	; 0x1530 <FAT_GetFileSearch+0x162>
    152e:	25 c1       	rjmp	.+586    	; 0x177a <FAT_GetFileSearch+0x3ac>
    1530:	01 34       	cpi	r16, 0x41	; 65
    1532:	09 f0       	breq	.+2      	; 0x1536 <FAT_GetFileSearch+0x168>
    1534:	22 c1       	rjmp	.+580    	; 0x177a <FAT_GetFileSearch+0x3ac>
    1536:	64 35       	cpi	r22, 0x54	; 84
    1538:	09 f0       	breq	.+2      	; 0x153c <FAT_GetFileSearch+0x16e>
    153a:	1f c1       	rjmp	.+574    	; 0x177a <FAT_GetFileSearch+0x3ac>
    153c:	1e c0       	rjmp	.+60     	; 0x157a <FAT_GetFileSearch+0x1ac>
  }
  else//если это директория
  {
   unsigned char a=GetByte(sFATRecordPointer.CurrentFolderAddr);
    153e:	bc 01       	movw	r22, r24
    1540:	cd 01       	movw	r24, r26
    1542:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    1546:	16 2f       	mov	r17, r22
   unsigned char b=GetByte(sFATRecordPointer.CurrentFolderAddr+1UL);  
    1548:	60 91 55 03 	lds	r22, 0x0355
    154c:	70 91 56 03 	lds	r23, 0x0356
    1550:	80 91 57 03 	lds	r24, 0x0357
    1554:	90 91 58 03 	lds	r25, 0x0358
    1558:	6f 5f       	subi	r22, 0xFF	; 255
    155a:	7f 4f       	sbci	r23, 0xFF	; 255
    155c:	8f 4f       	sbci	r24, 0xFF	; 255
    155e:	9f 4f       	sbci	r25, 0xFF	; 255
    1560:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
   if (a==(unsigned char)'.' && b==(unsigned char)'.') *directory=-1;//на директорию выше
    1564:	1e 32       	cpi	r17, 0x2E	; 46
    1566:	31 f4       	brne	.+12     	; 0x1574 <FAT_GetFileSearch+0x1a6>
    1568:	6e 32       	cpi	r22, 0x2E	; 46
    156a:	21 f4       	brne	.+8      	; 0x1574 <FAT_GetFileSearch+0x1a6>
    156c:	8f ef       	ldi	r24, 0xFF	; 255
    156e:	f3 01       	movw	r30, r6
    1570:	80 83       	st	Z, r24
    1572:	03 c0       	rjmp	.+6      	; 0x157a <FAT_GetFileSearch+0x1ac>
                                                   else *directory=1;//на директорию ниже
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	d3 01       	movw	r26, r6
    1578:	8c 93       	st	X, r24
  } 
  //первый кластер файла  
  *FirstCluster=(GetShort(sFATRecordPointer.CurrentFolderAddr+20UL)<<16)|GetShort(sFATRecordPointer.CurrentFolderAddr+26UL);
    157a:	60 91 55 03 	lds	r22, 0x0355
    157e:	70 91 56 03 	lds	r23, 0x0356
    1582:	80 91 57 03 	lds	r24, 0x0357
    1586:	90 91 58 03 	lds	r25, 0x0358
    158a:	6c 5e       	subi	r22, 0xEC	; 236
    158c:	7f 4f       	sbci	r23, 0xFF	; 255
    158e:	8f 4f       	sbci	r24, 0xFF	; 255
    1590:	9f 4f       	sbci	r25, 0xFF	; 255
    1592:	0e 94 42 06 	call	0xc84	; 0xc84 <GetShort>
    1596:	7b 01       	movw	r14, r22
    1598:	8c 01       	movw	r16, r24
    159a:	60 91 55 03 	lds	r22, 0x0355
    159e:	70 91 56 03 	lds	r23, 0x0356
    15a2:	80 91 57 03 	lds	r24, 0x0357
    15a6:	90 91 58 03 	lds	r25, 0x0358
    15aa:	66 5e       	subi	r22, 0xE6	; 230
    15ac:	7f 4f       	sbci	r23, 0xFF	; 255
    15ae:	8f 4f       	sbci	r24, 0xFF	; 255
    15b0:	9f 4f       	sbci	r25, 0xFF	; 255
    15b2:	0e 94 42 06 	call	0xc84	; 0xc84 <GetShort>
    15b6:	87 01       	movw	r16, r14
    15b8:	ff 24       	eor	r15, r15
    15ba:	ee 24       	eor	r14, r14
    15bc:	e6 2a       	or	r14, r22
    15be:	f7 2a       	or	r15, r23
    15c0:	08 2b       	or	r16, r24
    15c2:	19 2b       	or	r17, r25
    15c4:	f2 01       	movw	r30, r4
    15c6:	e0 82       	st	Z, r14
    15c8:	f1 82       	std	Z+1, r15	; 0x01
    15ca:	02 83       	std	Z+2, r16	; 0x02
    15cc:	13 83       	std	Z+3, r17	; 0x03
  //узнаём размер файла в байтах
  *Size=GetLong(sFATRecordPointer.CurrentFolderAddr+28UL);
    15ce:	60 91 55 03 	lds	r22, 0x0355
    15d2:	70 91 56 03 	lds	r23, 0x0356
    15d6:	80 91 57 03 	lds	r24, 0x0357
    15da:	90 91 58 03 	lds	r25, 0x0358
    15de:	64 5e       	subi	r22, 0xE4	; 228
    15e0:	7f 4f       	sbci	r23, 0xFF	; 255
    15e2:	8f 4f       	sbci	r24, 0xFF	; 255
    15e4:	9f 4f       	sbci	r25, 0xFF	; 255
    15e6:	0e 94 9c 09 	call	0x1338	; 0x1338 <GetLong>
    15ea:	d1 01       	movw	r26, r2
    15ec:	6d 93       	st	X+, r22
    15ee:	7d 93       	st	X+, r23
    15f0:	8d 93       	st	X+, r24
    15f2:	9c 93       	st	X, r25
    15f4:	13 97       	sbiw	r26, 0x03	; 3
  if (filename!=NULL)
    15f6:	81 14       	cp	r8, r1
    15f8:	91 04       	cpc	r9, r1
    15fa:	09 f4       	brne	.+2      	; 0x15fe <FAT_GetFileSearch+0x230>
    15fc:	c0 c0       	rjmp	.+384    	; 0x177e <FAT_GetFileSearch+0x3b0>
  {
   if ((type&0x10)==0) filename[8]='.';//файлу добавляем точку    
    15fe:	cd 28       	or	r12, r13
    1600:	19 f4       	brne	.+6      	; 0x1608 <FAT_GetFileSearch+0x23a>
    1602:	8e e2       	ldi	r24, 0x2E	; 46
    1604:	f4 01       	movw	r30, r8
    1606:	80 87       	std	Z+8, r24	; 0x08
   filename[12]=0;   
    1608:	d4 01       	movw	r26, r8
    160a:	1c 96       	adiw	r26, 0x0c	; 12
    160c:	1c 92       	st	X, r1
   //поищем длинное имя файла   
   struct SFATRecordPointer sFATRecordPointer_Local=sFATRecordPointer;
    160e:	de 01       	movw	r26, r28
    1610:	11 96       	adiw	r26, 0x01	; 1
    1612:	e1 e5       	ldi	r30, 0x51	; 81
    1614:	f3 e0       	ldi	r31, 0x03	; 3
    1616:	88 e1       	ldi	r24, 0x18	; 24
    1618:	01 90       	ld	r0, Z+
    161a:	0d 92       	st	X+, r0
    161c:	81 50       	subi	r24, 0x01	; 1
    161e:	e1 f7       	brne	.-8      	; 0x1618 <FAT_GetFileSearch+0x24a>
    1620:	dd 24       	eor	r13, r13
   unsigned char long_name_length=0;
   while(1)
   {
    if (FAT_RecordPointerStepReverse(&sFATRecordPointer_Local)==false) break;
    1622:	5e 01       	movw	r10, r28
    1624:	08 94       	sec
    1626:	a1 1c       	adc	r10, r1
    1628:	b1 1c       	adc	r11, r1
    162a:	c5 01       	movw	r24, r10
    162c:	0e 94 6d 06 	call	0xcda	; 0xcda <FAT_RecordPointerStepReverse>
    1630:	88 23       	and	r24, r24
    1632:	09 f4       	brne	.+2      	; 0x1636 <FAT_GetFileSearch+0x268>
    1634:	97 c0       	rjmp	.+302    	; 0x1764 <FAT_GetFileSearch+0x396>
    unsigned char attr=GetByte(sFATRecordPointer_Local.CurrentFolderAddr+11UL);
    1636:	6d 81       	ldd	r22, Y+5	; 0x05
    1638:	7e 81       	ldd	r23, Y+6	; 0x06
    163a:	8f 81       	ldd	r24, Y+7	; 0x07
    163c:	98 85       	ldd	r25, Y+8	; 0x08
    163e:	65 5f       	subi	r22, 0xF5	; 245
    1640:	7f 4f       	sbci	r23, 0xFF	; 255
    1642:	8f 4f       	sbci	r24, 0xFF	; 255
    1644:	9f 4f       	sbci	r25, 0xFF	; 255
    1646:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    if (attr&0xf)//это длинное имя
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	6f 70       	andi	r22, 0x0F	; 15
    164e:	70 70       	andi	r23, 0x00	; 0
    1650:	67 2b       	or	r22, r23
    1652:	09 f4       	brne	.+2      	; 0x1656 <FAT_GetFileSearch+0x288>
    1654:	87 c0       	rjmp	.+270    	; 0x1764 <FAT_GetFileSearch+0x396>
    {
     //собираем полное имя
     unsigned char name_index=GetByte(sFATRecordPointer_Local.CurrentFolderAddr);
    1656:	6d 81       	ldd	r22, Y+5	; 0x05
    1658:	7e 81       	ldd	r23, Y+6	; 0x06
    165a:	8f 81       	ldd	r24, Y+7	; 0x07
    165c:	98 85       	ldd	r25, Y+8	; 0x08
    165e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    1662:	c6 2e       	mov	r12, r22
    1664:	ee 24       	eor	r14, r14
    1666:	ff 24       	eor	r15, r15
    1668:	87 01       	movw	r16, r14
    166a:	25 c0       	rjmp	.+74     	; 0x16b6 <FAT_GetFileSearch+0x2e8>
     for(n=0;n<10 && long_name_length<=16;n+=2,long_name_length++) filename[long_name_length]=GetByte(sFATRecordPointer_Local.CurrentFolderAddr+n+1UL);
    166c:	6d 81       	ldd	r22, Y+5	; 0x05
    166e:	7e 81       	ldd	r23, Y+6	; 0x06
    1670:	8f 81       	ldd	r24, Y+7	; 0x07
    1672:	98 85       	ldd	r25, Y+8	; 0x08
    1674:	6f 5f       	subi	r22, 0xFF	; 255
    1676:	7f 4f       	sbci	r23, 0xFF	; 255
    1678:	8f 4f       	sbci	r24, 0xFF	; 255
    167a:	9f 4f       	sbci	r25, 0xFF	; 255
    167c:	6e 0d       	add	r22, r14
    167e:	7f 1d       	adc	r23, r15
    1680:	80 1f       	adc	r24, r16
    1682:	91 1f       	adc	r25, r17
    1684:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    1688:	f4 01       	movw	r30, r8
    168a:	ed 0d       	add	r30, r13
    168c:	f1 1d       	adc	r31, r1
    168e:	60 83       	st	Z, r22
    1690:	d3 94       	inc	r13
    1692:	82 e0       	ldi	r24, 0x02	; 2
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	a0 e0       	ldi	r26, 0x00	; 0
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e8 0e       	add	r14, r24
    169c:	f9 1e       	adc	r15, r25
    169e:	0a 1f       	adc	r16, r26
    16a0:	1b 1f       	adc	r17, r27
    16a2:	9a e0       	ldi	r25, 0x0A	; 10
    16a4:	e9 16       	cp	r14, r25
    16a6:	f1 04       	cpc	r15, r1
    16a8:	01 05       	cpc	r16, r1
    16aa:	11 05       	cpc	r17, r1
    16ac:	21 f4       	brne	.+8      	; 0x16b6 <FAT_GetFileSearch+0x2e8>
    16ae:	ee 24       	eor	r14, r14
    16b0:	ff 24       	eor	r15, r15
    16b2:	87 01       	movw	r16, r14
    16b4:	3c c0       	rjmp	.+120    	; 0x172e <FAT_GetFileSearch+0x360>
    16b6:	a0 e1       	ldi	r26, 0x10	; 16
    16b8:	ad 15       	cp	r26, r13
    16ba:	c0 f6       	brcc	.-80     	; 0x166c <FAT_GetFileSearch+0x29e>
    16bc:	f8 cf       	rjmp	.-16     	; 0x16ae <FAT_GetFileSearch+0x2e0>
     for(n=0;n<12 && long_name_length<=16;n+=2,long_name_length++) filename[long_name_length]=GetByte(sFATRecordPointer_Local.CurrentFolderAddr+n+14UL);
    16be:	6d 81       	ldd	r22, Y+5	; 0x05
    16c0:	7e 81       	ldd	r23, Y+6	; 0x06
    16c2:	8f 81       	ldd	r24, Y+7	; 0x07
    16c4:	98 85       	ldd	r25, Y+8	; 0x08
    16c6:	62 5f       	subi	r22, 0xF2	; 242
    16c8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ca:	8f 4f       	sbci	r24, 0xFF	; 255
    16cc:	9f 4f       	sbci	r25, 0xFF	; 255
    16ce:	6e 0d       	add	r22, r14
    16d0:	7f 1d       	adc	r23, r15
    16d2:	80 1f       	adc	r24, r16
    16d4:	91 1f       	adc	r25, r17
    16d6:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    16da:	f4 01       	movw	r30, r8
    16dc:	ed 0d       	add	r30, r13
    16de:	f1 1d       	adc	r31, r1
    16e0:	60 83       	st	Z, r22
    16e2:	d3 94       	inc	r13
    16e4:	82 e0       	ldi	r24, 0x02	; 2
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	a0 e0       	ldi	r26, 0x00	; 0
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e8 0e       	add	r14, r24
    16ee:	f9 1e       	adc	r15, r25
    16f0:	0a 1f       	adc	r16, r26
    16f2:	1b 1f       	adc	r17, r27
    16f4:	9c e0       	ldi	r25, 0x0C	; 12
    16f6:	e9 16       	cp	r14, r25
    16f8:	f1 04       	cpc	r15, r1
    16fa:	01 05       	cpc	r16, r1
    16fc:	11 05       	cpc	r17, r1
    16fe:	b9 f4       	brne	.+46     	; 0x172e <FAT_GetFileSearch+0x360>
	 for(n=0;n<4 && long_name_length<=16;n+=2,long_name_length++) filename[long_name_length]=GetByte(sFATRecordPointer_Local.CurrentFolderAddr+n+28UL);
    1700:	a0 e1       	ldi	r26, 0x10	; 16
    1702:	ad 15       	cp	r26, r13
    1704:	08 f4       	brcc	.+2      	; 0x1708 <FAT_GetFileSearch+0x33a>
    1706:	74 c0       	rjmp	.+232    	; 0x17f0 <FAT_GetFileSearch+0x422>
    1708:	6d 81       	ldd	r22, Y+5	; 0x05
    170a:	7e 81       	ldd	r23, Y+6	; 0x06
    170c:	8f 81       	ldd	r24, Y+7	; 0x07
    170e:	98 85       	ldd	r25, Y+8	; 0x08
    1710:	64 5e       	subi	r22, 0xE4	; 228
    1712:	7f 4f       	sbci	r23, 0xFF	; 255
    1714:	8f 4f       	sbci	r24, 0xFF	; 255
    1716:	9f 4f       	sbci	r25, 0xFF	; 255
    1718:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    171c:	f4 01       	movw	r30, r8
    171e:	ed 0d       	add	r30, r13
    1720:	f1 1d       	adc	r31, r1
    1722:	60 83       	st	Z, r22
    1724:	1d 2d       	mov	r17, r13
    1726:	1f 5f       	subi	r17, 0xFF	; 255
    1728:	11 31       	cpi	r17, 0x11	; 17
    172a:	29 f4       	brne	.+10     	; 0x1736 <FAT_GetFileSearch+0x368>
    172c:	61 c0       	rjmp	.+194    	; 0x17f0 <FAT_GetFileSearch+0x422>
    if (attr&0xf)//это длинное имя
    {
     //собираем полное имя
     unsigned char name_index=GetByte(sFATRecordPointer_Local.CurrentFolderAddr);
     for(n=0;n<10 && long_name_length<=16;n+=2,long_name_length++) filename[long_name_length]=GetByte(sFATRecordPointer_Local.CurrentFolderAddr+n+1UL);
     for(n=0;n<12 && long_name_length<=16;n+=2,long_name_length++) filename[long_name_length]=GetByte(sFATRecordPointer_Local.CurrentFolderAddr+n+14UL);
    172e:	b0 e1       	ldi	r27, 0x10	; 16
    1730:	bd 15       	cp	r27, r13
    1732:	28 f6       	brcc	.-118    	; 0x16be <FAT_GetFileSearch+0x2f0>
    1734:	5d c0       	rjmp	.+186    	; 0x17f0 <FAT_GetFileSearch+0x422>
	 for(n=0;n<4 && long_name_length<=16;n+=2,long_name_length++) filename[long_name_length]=GetByte(sFATRecordPointer_Local.CurrentFolderAddr+n+28UL);
    1736:	6d 81       	ldd	r22, Y+5	; 0x05
    1738:	7e 81       	ldd	r23, Y+6	; 0x06
    173a:	8f 81       	ldd	r24, Y+7	; 0x07
    173c:	98 85       	ldd	r25, Y+8	; 0x08
    173e:	62 5e       	subi	r22, 0xE2	; 226
    1740:	7f 4f       	sbci	r23, 0xFF	; 255
    1742:	8f 4f       	sbci	r24, 0xFF	; 255
    1744:	9f 4f       	sbci	r25, 0xFF	; 255
    1746:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    174a:	f4 01       	movw	r30, r8
    174c:	e1 0f       	add	r30, r17
    174e:	f1 1d       	adc	r31, r1
    1750:	60 83       	st	Z, r22
    1752:	d1 2e       	mov	r13, r17
    1754:	d3 94       	inc	r13
	 if (long_name_length>16) break;
    1756:	e1 e1       	ldi	r30, 0x11	; 17
    1758:	de 16       	cp	r13, r30
    175a:	09 f4       	brne	.+2      	; 0x175e <FAT_GetFileSearch+0x390>
    175c:	49 c0       	rjmp	.+146    	; 0x17f0 <FAT_GetFileSearch+0x422>
     if (name_index&0x40) break;//последняя часть имени
    175e:	c6 fe       	sbrs	r12, 6
    1760:	64 cf       	rjmp	.-312    	; 0x162a <FAT_GetFileSearch+0x25c>
    1762:	06 c0       	rjmp	.+12     	; 0x1770 <FAT_GetFileSearch+0x3a2>
    }
    else break;//это не длинное имя
   }
   if (long_name_length>16) long_name_length=16;
    1764:	f0 e1       	ldi	r31, 0x10	; 16
    1766:	fd 15       	cp	r31, r13
    1768:	08 f4       	brcc	.+2      	; 0x176c <FAT_GetFileSearch+0x39e>
    176a:	42 c0       	rjmp	.+132    	; 0x17f0 <FAT_GetFileSearch+0x422>
   if (long_name_length>0) filename[long_name_length]=0;
    176c:	dd 20       	and	r13, r13
    176e:	39 f0       	breq	.+14     	; 0x177e <FAT_GetFileSearch+0x3b0>
    1770:	8d 0c       	add	r8, r13
    1772:	91 1c       	adc	r9, r1
    1774:	d4 01       	movw	r26, r8
    1776:	1c 92       	st	X, r1
    1778:	02 c0       	rjmp	.+4      	; 0x177e <FAT_GetFileSearch+0x3b0>
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	01 c0       	rjmp	.+2      	; 0x1780 <FAT_GetFileSearch+0x3b2>
    177e:	81 e0       	ldi	r24, 0x01	; 1
  }
  return(true);
 }
 return(false); 
}
    1780:	68 96       	adiw	r28, 0x18	; 24
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	ff 90       	pop	r15
    1796:	ef 90       	pop	r14
    1798:	df 90       	pop	r13
    179a:	cf 90       	pop	r12
    179c:	bf 90       	pop	r11
    179e:	af 90       	pop	r10
    17a0:	9f 90       	pop	r9
    17a2:	8f 90       	pop	r8
    17a4:	7f 90       	pop	r7
    17a6:	6f 90       	pop	r6
    17a8:	5f 90       	pop	r5
    17aa:	4f 90       	pop	r4
    17ac:	3f 90       	pop	r3
    17ae:	2f 90       	pop	r2
    17b0:	08 95       	ret
   }	
  }     
 }
 if (res==true)
 {
  unsigned char type=GetByte(sFATRecordPointer.CurrentFolderAddr+11UL);
    17b2:	60 91 55 03 	lds	r22, 0x0355
    17b6:	70 91 56 03 	lds	r23, 0x0356
    17ba:	80 91 57 03 	lds	r24, 0x0357
    17be:	90 91 58 03 	lds	r25, 0x0358
    17c2:	65 5f       	subi	r22, 0xF5	; 245
    17c4:	7f 4f       	sbci	r23, 0xFF	; 255
    17c6:	8f 4f       	sbci	r24, 0xFF	; 255
    17c8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ca:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
  if ((type&0x10)==0)//это файл
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	80 91 55 03 	lds	r24, 0x0355
    17d4:	90 91 56 03 	lds	r25, 0x0356
    17d8:	a0 91 57 03 	lds	r26, 0x0357
    17dc:	b0 91 58 03 	lds	r27, 0x0358
    17e0:	e0 e1       	ldi	r30, 0x10	; 16
    17e2:	ce 2e       	mov	r12, r30
    17e4:	d1 2c       	mov	r13, r1
    17e6:	c6 22       	and	r12, r22
    17e8:	d7 22       	and	r13, r23
    17ea:	64 ff       	sbrs	r22, 4
    17ec:	79 ce       	rjmp	.-782    	; 0x14e0 <FAT_GetFileSearch+0x112>
    17ee:	a7 ce       	rjmp	.-690    	; 0x153e <FAT_GetFileSearch+0x170>
    17f0:	70 e1       	ldi	r23, 0x10	; 16
    17f2:	d7 2e       	mov	r13, r23
    17f4:	bd cf       	rjmp	.-134    	; 0x1770 <FAT_GetFileSearch+0x3a2>

000017f6 <FAT_WriteBlock>:
}
//----------------------------------------------------------------------------------------------------
//записать в ОЗУ блок файла
//----------------------------------------------------------------------------------------------------
bool FAT_WriteBlock(unsigned short *BlockSize,unsigned short Block)
{
    17f6:	2f 92       	push	r2
    17f8:	3f 92       	push	r3
    17fa:	4f 92       	push	r4
    17fc:	5f 92       	push	r5
    17fe:	6f 92       	push	r6
    1800:	7f 92       	push	r7
    1802:	8f 92       	push	r8
    1804:	9f 92       	push	r9
    1806:	af 92       	push	r10
    1808:	bf 92       	push	r11
    180a:	cf 92       	push	r12
    180c:	df 92       	push	r13
    180e:	ef 92       	push	r14
    1810:	ff 92       	push	r15
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	66 97       	sbiw	r28, 0x16	; 22
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	9a 8b       	std	Y+18, r25	; 0x12
    182c:	89 8b       	std	Y+17, r24	; 0x11
    182e:	7c 8b       	std	Y+20, r23	; 0x14
    1830:	6b 8b       	std	Y+19, r22	; 0x13
 unsigned long i=0;//номер считываемого байта файла
 unsigned short dram_addr=0;//адрес в динамической памяти
 unsigned short current_block=0;//текущий номер блока
 unsigned short block_size=0;//размер блока
 signed char Directory;//не директория ли файл
 *BlockSize=0;
    1832:	fc 01       	movw	r30, r24
    1834:	11 82       	std	Z+1, r1	; 0x01
    1836:	10 82       	st	Z, r1
 if (FAT_GetFileSearch(string,&CurrentCluster,&Size,&Directory)==false) return(false);
    1838:	84 e2       	ldi	r24, 0x24	; 36
    183a:	93 e0       	ldi	r25, 0x03	; 3
    183c:	be 01       	movw	r22, r28
    183e:	6e 5f       	subi	r22, 0xFE	; 254
    1840:	7f 4f       	sbci	r23, 0xFF	; 255
    1842:	ae 01       	movw	r20, r28
    1844:	4a 5f       	subi	r20, 0xFA	; 250
    1846:	5f 4f       	sbci	r21, 0xFF	; 255
    1848:	9e 01       	movw	r18, r28
    184a:	2f 5f       	subi	r18, 0xFF	; 255
    184c:	3f 4f       	sbci	r19, 0xFF	; 255
    184e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <FAT_GetFileSearch>
    1852:	88 23       	and	r24, r24
    1854:	09 f4       	brne	.+2      	; 0x1858 <FAT_WriteBlock+0x62>
    1856:	0b c1       	rjmp	.+534    	; 0x1a6e <FAT_WriteBlock+0x278>
    1858:	66 24       	eor	r6, r6
    185a:	77 24       	eor	r7, r7
    185c:	43 01       	movw	r8, r6
    185e:	22 24       	eor	r2, r2
    1860:	33 24       	eor	r3, r3
    1862:	18 8a       	std	Y+16, r1	; 0x10
    1864:	1f 86       	std	Y+15, r1	; 0x0f
    1866:	44 24       	eor	r4, r4
    1868:	55 24       	eor	r5, r5
    186a:	1e 86       	std	Y+14, r1	; 0x0e
    186c:	f6 c0       	rjmp	.+492    	; 0x1a5a <FAT_WriteBlock+0x264>
 unsigned char mode=0;              
 while(i<Size)
 {
  DRAM_Refresh();//производим регенерацию памяти 
    186e:	0e 94 1b 01 	call	0x236	; 0x236 <DRAM_Refresh>
  //считываем данные
  unsigned long length=ClusterSize;
    1872:	a0 90 79 03 	lds	r10, 0x0379
    1876:	b0 90 7a 03 	lds	r11, 0x037A
    187a:	c0 90 7b 03 	lds	r12, 0x037B
    187e:	d0 90 7c 03 	lds	r13, 0x037C
  if (length+i>=Size) length=Size-i;
    1882:	2e 81       	ldd	r18, Y+6	; 0x06
    1884:	3f 81       	ldd	r19, Y+7	; 0x07
    1886:	48 85       	ldd	r20, Y+8	; 0x08
    1888:	59 85       	ldd	r21, Y+9	; 0x09
    188a:	d4 01       	movw	r26, r8
    188c:	c3 01       	movw	r24, r6
    188e:	8a 0d       	add	r24, r10
    1890:	9b 1d       	adc	r25, r11
    1892:	ac 1d       	adc	r26, r12
    1894:	bd 1d       	adc	r27, r13
    1896:	82 17       	cp	r24, r18
    1898:	93 07       	cpc	r25, r19
    189a:	a4 07       	cpc	r26, r20
    189c:	b5 07       	cpc	r27, r21
    189e:	30 f0       	brcs	.+12     	; 0x18ac <FAT_WriteBlock+0xb6>
    18a0:	59 01       	movw	r10, r18
    18a2:	6a 01       	movw	r12, r20
    18a4:	a6 18       	sub	r10, r6
    18a6:	b7 08       	sbc	r11, r7
    18a8:	c8 08       	sbc	r12, r8
    18aa:	d9 08       	sbc	r13, r9
  //получаем первый сектор кластера
  unsigned long FirstSectorofCluster=((CurrentCluster-2UL)*SecPerClus)+FirstDataSector; 
  unsigned long addr=FirstSectorofCluster*BytsPerSec;
    18ac:	6a 81       	ldd	r22, Y+2	; 0x02
    18ae:	7b 81       	ldd	r23, Y+3	; 0x03
    18b0:	8c 81       	ldd	r24, Y+4	; 0x04
    18b2:	9d 81       	ldd	r25, Y+5	; 0x05
    18b4:	62 50       	subi	r22, 0x02	; 2
    18b6:	70 40       	sbci	r23, 0x00	; 0
    18b8:	80 40       	sbci	r24, 0x00	; 0
    18ba:	90 40       	sbci	r25, 0x00	; 0
    18bc:	20 91 41 03 	lds	r18, 0x0341
    18c0:	30 91 42 03 	lds	r19, 0x0342
    18c4:	40 91 43 03 	lds	r20, 0x0343
    18c8:	50 91 44 03 	lds	r21, 0x0344
    18cc:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__mulsi3>
    18d0:	9b 01       	movw	r18, r22
    18d2:	ac 01       	movw	r20, r24
    18d4:	60 91 3d 03 	lds	r22, 0x033D
    18d8:	70 91 3e 03 	lds	r23, 0x033E
    18dc:	80 91 3f 03 	lds	r24, 0x033F
    18e0:	90 91 40 03 	lds	r25, 0x0340
    18e4:	62 0f       	add	r22, r18
    18e6:	73 1f       	adc	r23, r19
    18e8:	84 1f       	adc	r24, r20
    18ea:	95 1f       	adc	r25, r21
    18ec:	20 91 69 03 	lds	r18, 0x0369
    18f0:	30 91 6a 03 	lds	r19, 0x036A
    18f4:	40 91 6b 03 	lds	r20, 0x036B
    18f8:	50 91 6c 03 	lds	r21, 0x036C
    18fc:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__mulsi3>
    1900:	6a 87       	std	Y+10, r22	; 0x0a
    1902:	7b 87       	std	Y+11, r23	; 0x0b
    1904:	8c 87       	std	Y+12, r24	; 0x0c
    1906:	9d 87       	std	Y+13, r25	; 0x0d
    1908:	ee 24       	eor	r14, r14
    190a:	ff 24       	eor	r15, r15
    190c:	87 01       	movw	r16, r14
    190e:	58 c0       	rjmp	.+176    	; 0x19c0 <FAT_WriteBlock+0x1ca>
  for(unsigned long m=0;m<length;m++,i++)
  {
   DRAM_Refresh();//производим регенерацию памяти
    1910:	0e 94 1b 01 	call	0x236	; 0x236 <DRAM_Refresh>
   unsigned char b=GetByte(addr+m);
    1914:	6a 85       	ldd	r22, Y+10	; 0x0a
    1916:	7b 85       	ldd	r23, Y+11	; 0x0b
    1918:	8c 85       	ldd	r24, Y+12	; 0x0c
    191a:	9d 85       	ldd	r25, Y+13	; 0x0d
    191c:	6e 0d       	add	r22, r14
    191e:	7f 1d       	adc	r23, r15
    1920:	80 1f       	adc	r24, r16
    1922:	91 1f       	adc	r25, r17
    1924:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    1928:	46 2f       	mov	r20, r22
   if (mode==0)//чтение младшего байта длины
    192a:	fe 85       	ldd	r31, Y+14	; 0x0e
    192c:	ff 23       	and	r31, r31
    192e:	29 f4       	brne	.+10     	; 0x193a <FAT_WriteBlock+0x144>
   {
    block_size=b;
    1930:	46 2e       	mov	r4, r22
    1932:	55 24       	eor	r5, r5
    1934:	21 e0       	ldi	r18, 0x01	; 1
    1936:	2e 87       	std	Y+14, r18	; 0x0e
    1938:	39 c0       	rjmp	.+114    	; 0x19ac <FAT_WriteBlock+0x1b6>
	mode=1;
	continue;
   }
   if (mode==1)//чтение старшего байта длины
    193a:	3e 85       	ldd	r19, Y+14	; 0x0e
    193c:	31 30       	cpi	r19, 0x01	; 1
    193e:	59 f4       	brne	.+22     	; 0x1956 <FAT_WriteBlock+0x160>
   {
    block_size|=((unsigned short)b)<<8;
    1940:	6e 8b       	std	Y+22, r22	; 0x16
    1942:	1d 8a       	std	Y+21, r1	; 0x15
    1944:	8d 89       	ldd	r24, Y+21	; 0x15
    1946:	9e 89       	ldd	r25, Y+22	; 0x16
    1948:	48 2a       	or	r4, r24
    194a:	59 2a       	or	r5, r25
    194c:	22 24       	eor	r2, r2
    194e:	33 24       	eor	r3, r3
    1950:	92 e0       	ldi	r25, 0x02	; 2
    1952:	9e 87       	std	Y+14, r25	; 0x0e
    1954:	2b c0       	rjmp	.+86     	; 0x19ac <FAT_WriteBlock+0x1b6>
	mode=2;
	dram_addr=0;
	continue;
   }
   if (mode==2)//чтение данных
    1956:	ee 85       	ldd	r30, Y+14	; 0x0e
    1958:	e2 30       	cpi	r30, 0x02	; 2
    195a:	41 f5       	brne	.+80     	; 0x19ac <FAT_WriteBlock+0x1b6>
   {
    if (current_block==Block) DRAM_WriteByte(dram_addr,b);//это выбранный блок
    195c:	2f 85       	ldd	r18, Y+15	; 0x0f
    195e:	38 89       	ldd	r19, Y+16	; 0x10
    1960:	8b 89       	ldd	r24, Y+19	; 0x13
    1962:	9c 89       	ldd	r25, Y+20	; 0x14
    1964:	28 17       	cp	r18, r24
    1966:	39 07       	cpc	r19, r25
    1968:	29 f4       	brne	.+10     	; 0x1974 <FAT_WriteBlock+0x17e>
    196a:	b1 01       	movw	r22, r2
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	0e 94 9d 01 	call	0x33a	; 0x33a <DRAM_WriteByte>
	dram_addr++;
    1974:	08 94       	sec
    1976:	21 1c       	adc	r2, r1
    1978:	31 1c       	adc	r3, r1
	if (dram_addr>=block_size)//блок закончен
    197a:	24 14       	cp	r2, r4
    197c:	35 04       	cpc	r3, r5
    197e:	b0 f0       	brcs	.+44     	; 0x19ac <FAT_WriteBlock+0x1b6>
	{
	 if (current_block==Block)//закончился выбранный блок
    1980:	ef 85       	ldd	r30, Y+15	; 0x0f
    1982:	f8 89       	ldd	r31, Y+16	; 0x10
    1984:	2b 89       	ldd	r18, Y+19	; 0x13
    1986:	3c 89       	ldd	r19, Y+20	; 0x14
    1988:	e2 17       	cp	r30, r18
    198a:	f3 07       	cpc	r31, r19
    198c:	31 f4       	brne	.+12     	; 0x199a <FAT_WriteBlock+0x1a4>
	 {
	  *BlockSize=block_size;  
    198e:	e9 89       	ldd	r30, Y+17	; 0x11
    1990:	fa 89       	ldd	r31, Y+18	; 0x12
    1992:	51 82       	std	Z+1, r5	; 0x01
    1994:	40 82       	st	Z, r4
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	6b c0       	rjmp	.+214    	; 0x1a70 <FAT_WriteBlock+0x27a>
	  return(true);
	 }
	 //переходим к следующему блоку
	 block_size=0;
	 current_block++;
    199a:	2f 85       	ldd	r18, Y+15	; 0x0f
    199c:	38 89       	ldd	r19, Y+16	; 0x10
    199e:	2f 5f       	subi	r18, 0xFF	; 255
    19a0:	3f 4f       	sbci	r19, 0xFF	; 255
    19a2:	38 8b       	std	Y+16, r19	; 0x10
    19a4:	2f 87       	std	Y+15, r18	; 0x0f
    19a6:	44 24       	eor	r4, r4
    19a8:	55 24       	eor	r5, r5
    19aa:	1e 86       	std	Y+14, r1	; 0x0e
  unsigned long length=ClusterSize;
  if (length+i>=Size) length=Size-i;
  //получаем первый сектор кластера
  unsigned long FirstSectorofCluster=((CurrentCluster-2UL)*SecPerClus)+FirstDataSector; 
  unsigned long addr=FirstSectorofCluster*BytsPerSec;
  for(unsigned long m=0;m<length;m++,i++)
    19ac:	08 94       	sec
    19ae:	e1 1c       	adc	r14, r1
    19b0:	f1 1c       	adc	r15, r1
    19b2:	01 1d       	adc	r16, r1
    19b4:	11 1d       	adc	r17, r1
    19b6:	08 94       	sec
    19b8:	61 1c       	adc	r6, r1
    19ba:	71 1c       	adc	r7, r1
    19bc:	81 1c       	adc	r8, r1
    19be:	91 1c       	adc	r9, r1
    19c0:	ea 14       	cp	r14, r10
    19c2:	fb 04       	cpc	r15, r11
    19c4:	0c 05       	cpc	r16, r12
    19c6:	1d 05       	cpc	r17, r13
    19c8:	08 f4       	brcc	.+2      	; 0x19cc <FAT_WriteBlock+0x1d6>
    19ca:	a2 cf       	rjmp	.-188    	; 0x1910 <FAT_WriteBlock+0x11a>
	}
   } 
  }
  //переходим к следующему кластеру файла
  unsigned long FATClusterOffset=0;//смещение по таблице FAT в байтах (в FAT32 они 4-х байтные, а в FAT16 - двухбайтные)
  if (FATType==FAT16) FATClusterOffset=CurrentCluster*2UL;
    19cc:	e0 91 1e 01 	lds	r30, 0x011E
    19d0:	e1 30       	cpi	r30, 0x01	; 1
    19d2:	21 f0       	breq	.+8      	; 0x19dc <FAT_WriteBlock+0x1e6>
    19d4:	ee 24       	eor	r14, r14
    19d6:	ff 24       	eor	r15, r15
    19d8:	87 01       	movw	r16, r14
    19da:	08 c0       	rjmp	.+16     	; 0x19ec <FAT_WriteBlock+0x1f6>
    19dc:	ea 80       	ldd	r14, Y+2	; 0x02
    19de:	fb 80       	ldd	r15, Y+3	; 0x03
    19e0:	0c 81       	ldd	r16, Y+4	; 0x04
    19e2:	1d 81       	ldd	r17, Y+5	; 0x05
    19e4:	ee 0c       	add	r14, r14
    19e6:	ff 1c       	adc	r15, r15
    19e8:	00 1f       	adc	r16, r16
    19ea:	11 1f       	adc	r17, r17
  unsigned long NextClusterAddr=ResvdSecCnt*BytsPerSec+FATClusterOffset;//адрес следующего кластера
    19ec:	20 91 49 03 	lds	r18, 0x0349
    19f0:	30 91 4a 03 	lds	r19, 0x034A
    19f4:	40 91 4b 03 	lds	r20, 0x034B
    19f8:	50 91 4c 03 	lds	r21, 0x034C
    19fc:	60 91 69 03 	lds	r22, 0x0369
    1a00:	70 91 6a 03 	lds	r23, 0x036A
    1a04:	80 91 6b 03 	lds	r24, 0x036B
    1a08:	90 91 6c 03 	lds	r25, 0x036C
  //считываем номер следующего кластера файла
  unsigned long NextCluster=0;
  if (FATType==FAT16) NextCluster=GetShort(NextClusterAddr);
    1a0c:	e1 30       	cpi	r30, 0x01	; 1
    1a0e:	79 f5       	brne	.+94     	; 0x1a6e <FAT_WriteBlock+0x278>
    1a10:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__mulsi3>
    1a14:	e6 0e       	add	r14, r22
    1a16:	f7 1e       	adc	r15, r23
    1a18:	08 1f       	adc	r16, r24
    1a1a:	19 1f       	adc	r17, r25
    1a1c:	c8 01       	movw	r24, r16
    1a1e:	b7 01       	movw	r22, r14
    1a20:	0e 94 42 06 	call	0xc84	; 0xc84 <GetShort>
    1a24:	9b 01       	movw	r18, r22
    1a26:	ac 01       	movw	r20, r24
  if (NextCluster==0) break;//неиспользуемый кластер
    1a28:	61 15       	cp	r22, r1
    1a2a:	71 05       	cpc	r23, r1
    1a2c:	81 05       	cpc	r24, r1
    1a2e:	91 05       	cpc	r25, r1
    1a30:	f1 f0       	breq	.+60     	; 0x1a6e <FAT_WriteBlock+0x278>
  if (NextCluster>=CountofClusters+2UL) break;//номер больше максимально возможного номера кластера - конец файла или сбой
    1a32:	80 91 71 03 	lds	r24, 0x0371
    1a36:	90 91 72 03 	lds	r25, 0x0372
    1a3a:	a0 91 73 03 	lds	r26, 0x0373
    1a3e:	b0 91 74 03 	lds	r27, 0x0374
    1a42:	02 96       	adiw	r24, 0x02	; 2
    1a44:	a1 1d       	adc	r26, r1
    1a46:	b1 1d       	adc	r27, r1
    1a48:	28 17       	cp	r18, r24
    1a4a:	39 07       	cpc	r19, r25
    1a4c:	4a 07       	cpc	r20, r26
    1a4e:	5b 07       	cpc	r21, r27
    1a50:	70 f4       	brcc	.+28     	; 0x1a6e <FAT_WriteBlock+0x278>
  CurrentCluster=NextCluster;
    1a52:	2a 83       	std	Y+2, r18	; 0x02
    1a54:	3b 83       	std	Y+3, r19	; 0x03
    1a56:	4c 83       	std	Y+4, r20	; 0x04
    1a58:	5d 83       	std	Y+5, r21	; 0x05
 unsigned short block_size=0;//размер блока
 signed char Directory;//не директория ли файл
 *BlockSize=0;
 if (FAT_GetFileSearch(string,&CurrentCluster,&Size,&Directory)==false) return(false);
 unsigned char mode=0;              
 while(i<Size)
    1a5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a5e:	a8 85       	ldd	r26, Y+8	; 0x08
    1a60:	b9 85       	ldd	r27, Y+9	; 0x09
    1a62:	68 16       	cp	r6, r24
    1a64:	79 06       	cpc	r7, r25
    1a66:	8a 06       	cpc	r8, r26
    1a68:	9b 06       	cpc	r9, r27
    1a6a:	08 f4       	brcc	.+2      	; 0x1a6e <FAT_WriteBlock+0x278>
    1a6c:	00 cf       	rjmp	.-512    	; 0x186e <FAT_WriteBlock+0x78>
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
  if (NextCluster>=CountofClusters+2UL) break;//номер больше максимально возможного номера кластера - конец файла или сбой
  CurrentCluster=NextCluster;
 }
 //конец файла
 return(false);
}
    1a70:	66 96       	adiw	r28, 0x16	; 22
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	1f 91       	pop	r17
    1a82:	0f 91       	pop	r16
    1a84:	ff 90       	pop	r15
    1a86:	ef 90       	pop	r14
    1a88:	df 90       	pop	r13
    1a8a:	cf 90       	pop	r12
    1a8c:	bf 90       	pop	r11
    1a8e:	af 90       	pop	r10
    1a90:	9f 90       	pop	r9
    1a92:	8f 90       	pop	r8
    1a94:	7f 90       	pop	r7
    1a96:	6f 90       	pop	r6
    1a98:	5f 90       	pop	r5
    1a9a:	4f 90       	pop	r4
    1a9c:	3f 90       	pop	r3
    1a9e:	2f 90       	pop	r2
    1aa0:	08 95       	ret

00001aa2 <FAT_BeginFileSearch>:
}
//----------------------------------------------------------------------------------------------------
//начать поиск файла в кталоге
//----------------------------------------------------------------------------------------------------
bool FAT_BeginFileSearch(void)
{
    1aa2:	af 92       	push	r10
    1aa4:	bf 92       	push	r11
    1aa6:	cf 92       	push	r12
    1aa8:	df 92       	push	r13
    1aaa:	ef 92       	push	r14
    1aac:	ff 92       	push	r15
    1aae:	0f 93       	push	r16
    1ab0:	1f 93       	push	r17
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	29 97       	sbiw	r28, 0x09	; 9
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
 unsigned long FirstCluster;//первый кластер файла
 unsigned long Size;//размер файла
 signed char Directory;//не директория ли файл
 
 sFATRecordPointer.CurrentFolderAddr=sFATRecordPointer.BeginFolderAddr;
    1ac6:	e0 90 51 03 	lds	r14, 0x0351
    1aca:	f0 90 52 03 	lds	r15, 0x0352
    1ace:	00 91 53 03 	lds	r16, 0x0353
    1ad2:	10 91 54 03 	lds	r17, 0x0354
    1ad6:	e0 92 55 03 	sts	0x0355, r14
    1ada:	f0 92 56 03 	sts	0x0356, r15
    1ade:	00 93 57 03 	sts	0x0357, r16
    1ae2:	10 93 58 03 	sts	0x0358, r17
 sFATRecordPointer.CurrentFolderCluster=sFATRecordPointer.BeginFolderCluster;
    1ae6:	80 91 59 03 	lds	r24, 0x0359
    1aea:	90 91 5a 03 	lds	r25, 0x035A
    1aee:	a0 91 5b 03 	lds	r26, 0x035B
    1af2:	b0 91 5c 03 	lds	r27, 0x035C
    1af6:	80 93 5d 03 	sts	0x035D, r24
    1afa:	90 93 5e 03 	sts	0x035E, r25
    1afe:	a0 93 5f 03 	sts	0x035F, r26
    1b02:	b0 93 60 03 	sts	0x0360, r27
 sFATRecordPointer.BeginFolderClusterAddr=sFATRecordPointer.CurrentFolderAddr;
    1b06:	e0 92 61 03 	sts	0x0361, r14
    1b0a:	f0 92 62 03 	sts	0x0362, r15
    1b0e:	00 93 63 03 	sts	0x0363, r16
    1b12:	10 93 64 03 	sts	0x0364, r17
 if (sFATRecordPointer.BeginFolderAddr!=FirstRootFolderAddr)//это не корневая директория
    1b16:	80 91 7d 03 	lds	r24, 0x037D
    1b1a:	90 91 7e 03 	lds	r25, 0x037E
    1b1e:	a0 91 7f 03 	lds	r26, 0x037F
    1b22:	b0 91 80 03 	lds	r27, 0x0380
    1b26:	a0 90 69 03 	lds	r10, 0x0369
    1b2a:	b0 90 6a 03 	lds	r11, 0x036A
    1b2e:	c0 90 6b 03 	lds	r12, 0x036B
    1b32:	d0 90 6c 03 	lds	r13, 0x036C
    1b36:	e8 16       	cp	r14, r24
    1b38:	f9 06       	cpc	r15, r25
    1b3a:	0a 07       	cpc	r16, r26
    1b3c:	1b 07       	cpc	r17, r27
    1b3e:	49 f0       	breq	.+18     	; 0x1b52 <FAT_BeginFileSearch+0xb0>
 {
  sFATRecordPointer.EndFolderClusterAddr=sFATRecordPointer.BeginFolderAddr+SecPerClus*BytsPerSec;
    1b40:	20 91 41 03 	lds	r18, 0x0341
    1b44:	30 91 42 03 	lds	r19, 0x0342
    1b48:	40 91 43 03 	lds	r20, 0x0343
    1b4c:	50 91 44 03 	lds	r21, 0x0344
    1b50:	08 c0       	rjmp	.+16     	; 0x1b62 <FAT_BeginFileSearch+0xc0>
 }
 else sFATRecordPointer.EndFolderClusterAddr=sFATRecordPointer.BeginFolderAddr+(RootDirSectors*BytsPerSec);//конечный адрес имён файлов внутри директории (или кластера)
    1b52:	20 91 75 03 	lds	r18, 0x0375
    1b56:	30 91 76 03 	lds	r19, 0x0376
    1b5a:	40 91 77 03 	lds	r20, 0x0377
    1b5e:	50 91 78 03 	lds	r21, 0x0378
    1b62:	c6 01       	movw	r24, r12
    1b64:	b5 01       	movw	r22, r10
    1b66:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__mulsi3>
    1b6a:	e6 0e       	add	r14, r22
    1b6c:	f7 1e       	adc	r15, r23
    1b6e:	08 1f       	adc	r16, r24
    1b70:	19 1f       	adc	r17, r25
    1b72:	e0 92 65 03 	sts	0x0365, r14
    1b76:	f0 92 66 03 	sts	0x0366, r15
    1b7a:	00 93 67 03 	sts	0x0367, r16
    1b7e:	10 93 68 03 	sts	0x0368, r17
 //переходим к первому нужному нам файлу
 while(1)
 {
  if (FAT_GetFileSearch(NULL,&FirstCluster,&Size,&Directory)==false)
    1b82:	12 e0       	ldi	r17, 0x02	; 2
    1b84:	c1 2e       	mov	r12, r17
    1b86:	d1 2c       	mov	r13, r1
    1b88:	cc 0e       	add	r12, r28
    1b8a:	dd 1e       	adc	r13, r29
    1b8c:	b6 e0       	ldi	r27, 0x06	; 6
    1b8e:	eb 2e       	mov	r14, r27
    1b90:	f1 2c       	mov	r15, r1
    1b92:	ec 0e       	add	r14, r28
    1b94:	fd 1e       	adc	r15, r29
    1b96:	8e 01       	movw	r16, r28
    1b98:	0f 5f       	subi	r16, 0xFF	; 255
    1b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	b6 01       	movw	r22, r12
    1ba2:	a7 01       	movw	r20, r14
    1ba4:	98 01       	movw	r18, r16
    1ba6:	0e 94 e7 09 	call	0x13ce	; 0x13ce <FAT_GetFileSearch>
    1baa:	88 23       	and	r24, r24
    1bac:	11 f0       	breq	.+4      	; 0x1bb2 <FAT_BeginFileSearch+0x110>
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	04 c0       	rjmp	.+8      	; 0x1bba <FAT_BeginFileSearch+0x118>
  {
   if (FAT_NextFileSearch()==false) return(false);
    1bb2:	0e 94 ed 08 	call	0x11da	; 0x11da <FAT_NextFileSearch>
    1bb6:	88 23       	and	r24, r24
    1bb8:	89 f7       	brne	.-30     	; 0x1b9c <FAT_BeginFileSearch+0xfa>
  } 
  else return(true);
 }
 return(false);
}
    1bba:	29 96       	adiw	r28, 0x09	; 9
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	ff 90       	pop	r15
    1bd0:	ef 90       	pop	r14
    1bd2:	df 90       	pop	r13
    1bd4:	cf 90       	pop	r12
    1bd6:	bf 90       	pop	r11
    1bd8:	af 90       	pop	r10
    1bda:	08 95       	ret

00001bdc <FAT_EnterDirectory>:
}
//----------------------------------------------------------------------------------------------------
//зайти в директорию и найти первый файл
//----------------------------------------------------------------------------------------------------
bool FAT_EnterDirectory(unsigned long FirstCluster)
{ 
    1bdc:	2f 92       	push	r2
    1bde:	3f 92       	push	r3
    1be0:	4f 92       	push	r4
    1be2:	5f 92       	push	r5
    1be4:	6f 92       	push	r6
    1be6:	7f 92       	push	r7
    1be8:	8f 92       	push	r8
    1bea:	9f 92       	push	r9
    1bec:	af 92       	push	r10
    1bee:	bf 92       	push	r11
    1bf0:	cf 92       	push	r12
    1bf2:	df 92       	push	r13
    1bf4:	ef 92       	push	r14
    1bf6:	ff 92       	push	r15
    1bf8:	0f 93       	push	r16
    1bfa:	1f 93       	push	r17
    1bfc:	1b 01       	movw	r2, r22
    1bfe:	2c 01       	movw	r4, r24
    1c00:	60 90 69 03 	lds	r6, 0x0369
    1c04:	70 90 6a 03 	lds	r7, 0x036A
    1c08:	80 90 6b 03 	lds	r8, 0x036B
    1c0c:	90 90 6c 03 	lds	r9, 0x036C
 if (FirstCluster==0UL)//это корневая директория (номер первого кластера, распределяемого директории)
    1c10:	61 15       	cp	r22, r1
    1c12:	71 05       	cpc	r23, r1
    1c14:	81 05       	cpc	r24, r1
    1c16:	91 05       	cpc	r25, r1
    1c18:	d9 f4       	brne	.+54     	; 0x1c50 <FAT_EnterDirectory+0x74>
 {
  sFATRecordPointer.BeginFolderAddr=FirstRootFolderAddr; 
    1c1a:	e0 90 7d 03 	lds	r14, 0x037D
    1c1e:	f0 90 7e 03 	lds	r15, 0x037E
    1c22:	00 91 7f 03 	lds	r16, 0x037F
    1c26:	10 91 80 03 	lds	r17, 0x0380
    1c2a:	e0 92 51 03 	sts	0x0351, r14
    1c2e:	f0 92 52 03 	sts	0x0352, r15
    1c32:	00 93 53 03 	sts	0x0353, r16
    1c36:	10 93 54 03 	sts	0x0354, r17
  sFATRecordPointer.EndFolderClusterAddr=sFATRecordPointer.BeginFolderAddr+(RootDirSectors*BytsPerSec);//конечный адрес имён файлов внутри директории (или кластера)
    1c3a:	20 91 75 03 	lds	r18, 0x0375
    1c3e:	30 91 76 03 	lds	r19, 0x0376
    1c42:	40 91 77 03 	lds	r20, 0x0377
    1c46:	50 91 78 03 	lds	r21, 0x0378
    1c4a:	c4 01       	movw	r24, r8
    1c4c:	b3 01       	movw	r22, r6
    1c4e:	30 c0       	rjmp	.+96     	; 0x1cb0 <FAT_EnterDirectory+0xd4>
 }
 else
 {
  unsigned long FirstSectorofCluster=((FirstCluster-2UL)*SecPerClus)+FirstDataSector; 
    1c50:	a0 90 41 03 	lds	r10, 0x0341
    1c54:	b0 90 42 03 	lds	r11, 0x0342
    1c58:	c0 90 43 03 	lds	r12, 0x0343
    1c5c:	d0 90 44 03 	lds	r13, 0x0344
  sFATRecordPointer.BeginFolderAddr=FirstSectorofCluster*BytsPerSec;//начальный адрес имён файлов внутри директории
    1c60:	62 50       	subi	r22, 0x02	; 2
    1c62:	70 40       	sbci	r23, 0x00	; 0
    1c64:	80 40       	sbci	r24, 0x00	; 0
    1c66:	90 40       	sbci	r25, 0x00	; 0
    1c68:	a6 01       	movw	r20, r12
    1c6a:	95 01       	movw	r18, r10
    1c6c:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__mulsi3>
    1c70:	9b 01       	movw	r18, r22
    1c72:	ac 01       	movw	r20, r24
    1c74:	60 91 3d 03 	lds	r22, 0x033D
    1c78:	70 91 3e 03 	lds	r23, 0x033E
    1c7c:	80 91 3f 03 	lds	r24, 0x033F
    1c80:	90 91 40 03 	lds	r25, 0x0340
    1c84:	62 0f       	add	r22, r18
    1c86:	73 1f       	adc	r23, r19
    1c88:	84 1f       	adc	r24, r20
    1c8a:	95 1f       	adc	r25, r21
    1c8c:	a4 01       	movw	r20, r8
    1c8e:	93 01       	movw	r18, r6
    1c90:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__mulsi3>
    1c94:	7b 01       	movw	r14, r22
    1c96:	8c 01       	movw	r16, r24
    1c98:	60 93 51 03 	sts	0x0351, r22
    1c9c:	70 93 52 03 	sts	0x0352, r23
    1ca0:	80 93 53 03 	sts	0x0353, r24
    1ca4:	90 93 54 03 	sts	0x0354, r25
  sFATRecordPointer.EndFolderClusterAddr=sFATRecordPointer.BeginFolderAddr+SecPerClus*BytsPerSec;
    1ca8:	c4 01       	movw	r24, r8
    1caa:	b3 01       	movw	r22, r6
    1cac:	a6 01       	movw	r20, r12
    1cae:	95 01       	movw	r18, r10
    1cb0:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__mulsi3>
    1cb4:	e6 0e       	add	r14, r22
    1cb6:	f7 1e       	adc	r15, r23
    1cb8:	08 1f       	adc	r16, r24
    1cba:	19 1f       	adc	r17, r25
    1cbc:	e0 92 65 03 	sts	0x0365, r14
    1cc0:	f0 92 66 03 	sts	0x0366, r15
    1cc4:	00 93 67 03 	sts	0x0367, r16
    1cc8:	10 93 68 03 	sts	0x0368, r17
 }
 sFATRecordPointer.BeginFolderCluster=FirstCluster;//начальный кластер имени файла внутри директории
    1ccc:	20 92 59 03 	sts	0x0359, r2
    1cd0:	30 92 5a 03 	sts	0x035A, r3
    1cd4:	40 92 5b 03 	sts	0x035B, r4
    1cd8:	50 92 5c 03 	sts	0x035C, r5
 sFATRecordPointer.CurrentFolderCluster=sFATRecordPointer.BeginFolderCluster;//текущий кластер имени файла внутри директории
    1cdc:	20 92 5d 03 	sts	0x035D, r2
    1ce0:	30 92 5e 03 	sts	0x035E, r3
    1ce4:	40 92 5f 03 	sts	0x035F, r4
    1ce8:	50 92 60 03 	sts	0x0360, r5
 sFATRecordPointer.CurrentFolderAddr=sFATRecordPointer.BeginFolderAddr;//текущий адрес имён файлов внутри директории
    1cec:	80 91 51 03 	lds	r24, 0x0351
    1cf0:	90 91 52 03 	lds	r25, 0x0352
    1cf4:	a0 91 53 03 	lds	r26, 0x0353
    1cf8:	b0 91 54 03 	lds	r27, 0x0354
    1cfc:	80 93 55 03 	sts	0x0355, r24
    1d00:	90 93 56 03 	sts	0x0356, r25
    1d04:	a0 93 57 03 	sts	0x0357, r26
    1d08:	b0 93 58 03 	sts	0x0358, r27
 sFATRecordPointer.BeginFolderClusterAddr=sFATRecordPointer.BeginFolderAddr; 
    1d0c:	80 93 61 03 	sts	0x0361, r24
    1d10:	90 93 62 03 	sts	0x0362, r25
    1d14:	a0 93 63 03 	sts	0x0363, r26
    1d18:	b0 93 64 03 	sts	0x0364, r27
 return(FAT_BeginFileSearch());
    1d1c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <FAT_BeginFileSearch>
}
    1d20:	1f 91       	pop	r17
    1d22:	0f 91       	pop	r16
    1d24:	ff 90       	pop	r15
    1d26:	ef 90       	pop	r14
    1d28:	df 90       	pop	r13
    1d2a:	cf 90       	pop	r12
    1d2c:	bf 90       	pop	r11
    1d2e:	af 90       	pop	r10
    1d30:	9f 90       	pop	r9
    1d32:	8f 90       	pop	r8
    1d34:	7f 90       	pop	r7
    1d36:	6f 90       	pop	r6
    1d38:	5f 90       	pop	r5
    1d3a:	4f 90       	pop	r4
    1d3c:	3f 90       	pop	r3
    1d3e:	2f 90       	pop	r2
    1d40:	08 95       	ret

00001d42 <WaitAnyKey>:
}
//----------------------------------------------------------------------------------------------------
//ожидание любой клавиши
//----------------------------------------------------------------------------------------------------
void WaitAnyKey(void)
{
    1d42:	80 ed       	ldi	r24, 0xD0	; 208
    1d44:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d46:	20 e9       	ldi	r18, 0x90	; 144
    1d48:	31 e0       	ldi	r19, 0x01	; 1
    1d4a:	f9 01       	movw	r30, r18
    1d4c:	31 97       	sbiw	r30, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <WaitAnyKey+0xa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d50:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d52:	d9 f7       	brne	.-10     	; 0x1d4a <WaitAnyKey+0x8>
 _delay_ms(200);
 while(1)
 {
  if (BUTTON_UP_PIN&(1<<BUTTON_UP)) break;
    1d54:	83 99       	sbic	0x10, 3	; 16
    1d56:	06 c0       	rjmp	.+12     	; 0x1d64 <WaitAnyKey+0x22>
  if (BUTTON_DOWN_PIN&(1<<BUTTON_DOWN)) break;
    1d58:	81 99       	sbic	0x10, 1	; 16
    1d5a:	04 c0       	rjmp	.+8      	; 0x1d64 <WaitAnyKey+0x22>
  if (BUTTON_CENTER_PIN&(1<<BUTTON_CENTER)) break;    
    1d5c:	82 99       	sbic	0x10, 2	; 16
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <WaitAnyKey+0x22>
  if (BUTTON_SELECT_PIN&(1<<BUTTON_SELECT)) break;
    1d60:	84 9b       	sbis	0x10, 4	; 16
    1d62:	f8 cf       	rjmp	.-16     	; 0x1d54 <WaitAnyKey+0x12>
    1d64:	08 95       	ret

00001d66 <InitAVR>:
//----------------------------------------------------------------------------------------------------
//инициализация контроллера
//----------------------------------------------------------------------------------------------------
void InitAVR(void)
{
 cli();
    1d66:	f8 94       	cli
 
 //настраиваем порты
 DDRA=0;
    1d68:	1a ba       	out	0x1a, r1	; 26
 DDRB=0;
    1d6a:	17 ba       	out	0x17, r1	; 23
 DDRD=0; 
    1d6c:	11 ba       	out	0x11, r1	; 17
 DDRC=0;
    1d6e:	14 ba       	out	0x14, r1	; 20
 
 BUTTON_UP_DDR&=0xff^(1<<BUTTON_UP);
    1d70:	8b 98       	cbi	0x11, 3	; 17
 BUTTON_DOWN_DDR&=0xff^(1<<BUTTON_DOWN);
    1d72:	89 98       	cbi	0x11, 1	; 17
 BUTTON_CENTER_DDR&=0xff^(1<<BUTTON_CENTER);
    1d74:	8a 98       	cbi	0x11, 2	; 17
 BUTTON_SELECT_DDR&=0xff^(1<<BUTTON_SELECT);
    1d76:	8c 98       	cbi	0x11, 4	; 17

 TAPE_OUT_DDR|=(1<<TAPE_OUT);
    1d78:	88 9a       	sbi	0x11, 0	; 17
 
 //задаём состояние портов
 PORTA=0xff;
    1d7a:	8f ef       	ldi	r24, 0xFF	; 255
    1d7c:	8b bb       	out	0x1b, r24	; 27
 PORTB=0xff;
    1d7e:	88 bb       	out	0x18, r24	; 24
 PORTD=0xff;
    1d80:	82 bb       	out	0x12, r24	; 18
 PORTC=0xff;
    1d82:	85 bb       	out	0x15, r24	; 21
 
 //настраиваем таймер T0
 TCCR0=((0<<CS02)|(1<<CS01)|(1<<CS00));//выбран режим деления тактовых импульсов на 64
    1d84:	83 e0       	ldi	r24, 0x03	; 3
    1d86:	83 bf       	out	0x33, r24	; 51
 TCNT0=0;//начальное значение таймера
    1d88:	12 be       	out	0x32, r1	; 50
 TIMSK=(1<<TOIE0);//прерывание по переполнению таймера (таймер T0 восьмибитный и считает на увеличение до 0xff)
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	89 bf       	out	0x39, r24	; 57
 
 TAPE_OUT_PORT&=0xff^(1<<TAPE_OUT);
    1d8e:	90 98       	cbi	0x12, 0	; 18
}
    1d90:	08 95       	ret

00001d92 <__vector_9>:
//----------------------------------------------------------------------------------------------------
//обработчик вектора прерывания таймера T0 (8-ми разрядный таймер) по переполнению
//----------------------------------------------------------------------------------------------------
ISR(TIMER0_OVF_vect)
{ 
    1d92:	1f 92       	push	r1
    1d94:	0f 92       	push	r0
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	0f 92       	push	r0
    1d9a:	11 24       	eor	r1, r1
    1d9c:	2f 93       	push	r18
    1d9e:	3f 93       	push	r19
    1da0:	4f 93       	push	r20
    1da2:	5f 93       	push	r21
    1da4:	6f 93       	push	r22
    1da6:	7f 93       	push	r23
    1da8:	8f 93       	push	r24
    1daa:	9f 93       	push	r25
    1dac:	af 93       	push	r26
    1dae:	bf 93       	push	r27
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
    1db4:	ef 93       	push	r30
    1db6:	ff 93       	push	r31
 static unsigned char byte=0;//выдаваемый байт
 static unsigned char index=0;//номер выдаваемого бита
 static unsigned short addr=0;//текущий адрес
 TCNT0=0;
    1db8:	12 be       	out	0x32, r1	; 50
 if (TapeOutMode==TAPE_OUT_STOP)
    1dba:	80 91 18 01 	lds	r24, 0x0118
    1dbe:	84 30       	cpi	r24, 0x04	; 4
    1dc0:	11 f4       	brne	.+4      	; 0x1dc6 <__vector_9+0x34>
 {
  TAPE_OUT_PORT&=0xff^(1<<TAPE_OUT);
    1dc2:	90 98       	cbi	0x12, 0	; 18
    1dc4:	aa c0       	rjmp	.+340    	; 0x1f1a <__vector_9+0x188>
  return;
 }
 if (TapeOutVolume==true)
    1dc6:	80 91 19 01 	lds	r24, 0x0119
    1dca:	81 30       	cpi	r24, 0x01	; 1
    1dcc:	21 f4       	brne	.+8      	; 0x1dd6 <__vector_9+0x44>
 {
  TAPE_OUT_PORT|=1<<TAPE_OUT;
    1dce:	90 9a       	sbi	0x12, 0	; 18
  TapeOutVolume=false;
    1dd0:	10 92 19 01 	sts	0x0119, r1
    1dd4:	04 c0       	rjmp	.+8      	; 0x1dde <__vector_9+0x4c>
 }
 else
 {
  TAPE_OUT_PORT&=0xff^(1<<TAPE_OUT);  
    1dd6:	90 98       	cbi	0x12, 0	; 18
  TapeOutVolume=true;
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	80 93 19 01 	sts	0x0119, r24
 }
 //выводим пилот-тон
 if (TapeOutMode==TAPE_OUT_LEAD)
    1dde:	80 91 18 01 	lds	r24, 0x0118
    1de2:	88 23       	and	r24, r24
    1de4:	f1 f4       	brne	.+60     	; 0x1e22 <__vector_9+0x90>
 {
  TCNT0=255-(142>>Speed);//начальное значение таймера
    1de6:	80 91 23 01 	lds	r24, 0x0123
    1dea:	2e e8       	ldi	r18, 0x8E	; 142
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <__vector_9+0x62>
    1df0:	35 95       	asr	r19
    1df2:	27 95       	ror	r18
    1df4:	8a 95       	dec	r24
    1df6:	e2 f7       	brpl	.-8      	; 0x1df0 <__vector_9+0x5e>
    1df8:	20 95       	com	r18
    1dfa:	22 bf       	out	0x32, r18	; 50
  if (LeadToneCounter>0) LeadToneCounter--;
    1dfc:	80 91 16 01 	lds	r24, 0x0116
    1e00:	90 91 17 01 	lds	r25, 0x0117
    1e04:	18 16       	cp	r1, r24
    1e06:	19 06       	cpc	r1, r25
    1e08:	54 f4       	brge	.+20     	; 0x1e1e <__vector_9+0x8c>
    1e0a:	80 91 16 01 	lds	r24, 0x0116
    1e0e:	90 91 17 01 	lds	r25, 0x0117
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	90 93 17 01 	sts	0x0117, r25
    1e18:	80 93 16 01 	sts	0x0116, r24
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <__vector_9+0x90>
  else
  {
   TapeOutMode=TAPE_OUT_SYNCHRO_1;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	10 c0       	rjmp	.+32     	; 0x1e42 <__vector_9+0xb0>
   return;
  }
 }
 //выводим синхросигнал 1
 if (TapeOutMode==TAPE_OUT_SYNCHRO_1)
    1e22:	80 91 18 01 	lds	r24, 0x0118
    1e26:	81 30       	cpi	r24, 0x01	; 1
    1e28:	79 f4       	brne	.+30     	; 0x1e48 <__vector_9+0xb6>
 {
  TCNT0=255-(43>>Speed);//начальное значение таймера
    1e2a:	80 91 23 01 	lds	r24, 0x0123
    1e2e:	2b e2       	ldi	r18, 0x2B	; 43
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <__vector_9+0xa6>
    1e34:	35 95       	asr	r19
    1e36:	27 95       	ror	r18
    1e38:	8a 95       	dec	r24
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <__vector_9+0xa2>
    1e3c:	20 95       	com	r18
    1e3e:	22 bf       	out	0x32, r18	; 50
  TapeOutMode=TAPE_OUT_SYNCHRO_2;
    1e40:	82 e0       	ldi	r24, 0x02	; 2
    1e42:	80 93 18 01 	sts	0x0118, r24
    1e46:	69 c0       	rjmp	.+210    	; 0x1f1a <__vector_9+0x188>
  return;
 }
 //выводим синхросигнал 2
 if (TapeOutMode==TAPE_OUT_SYNCHRO_2)
    1e48:	80 91 18 01 	lds	r24, 0x0118
    1e4c:	82 30       	cpi	r24, 0x02	; 2
    1e4e:	c1 f4       	brne	.+48     	; 0x1e80 <__vector_9+0xee>
 {
  TCNT0=255-(48>>Speed);//начальное значение таймера
    1e50:	20 91 23 01 	lds	r18, 0x0123
    1e54:	80 e3       	ldi	r24, 0x30	; 48
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <__vector_9+0xcc>
    1e5a:	95 95       	asr	r25
    1e5c:	87 95       	ror	r24
    1e5e:	2a 95       	dec	r18
    1e60:	e2 f7       	brpl	.-8      	; 0x1e5a <__vector_9+0xc8>
    1e62:	80 95       	com	r24
    1e64:	82 bf       	out	0x32, r24	; 50
  TapeOutMode=TAPE_OUT_DATA;
    1e66:	83 e0       	ldi	r24, 0x03	; 3
    1e68:	80 93 18 01 	sts	0x0118, r24
  index=16;
    1e6c:	80 e1       	ldi	r24, 0x10	; 16
    1e6e:	80 93 21 01 	sts	0x0121, r24
  byte=0;
    1e72:	10 92 22 01 	sts	0x0122, r1
  addr=0;
    1e76:	10 92 20 01 	sts	0x0120, r1
    1e7a:	10 92 1f 01 	sts	0x011F, r1
    1e7e:	4d c0       	rjmp	.+154    	; 0x1f1a <__vector_9+0x188>
  return;
 }
 //передаём данные 
 if (TapeOutMode==TAPE_OUT_DATA)
    1e80:	80 91 18 01 	lds	r24, 0x0118
    1e84:	83 30       	cpi	r24, 0x03	; 3
    1e86:	09 f0       	breq	.+2      	; 0x1e8a <__vector_9+0xf8>
    1e88:	48 c0       	rjmp	.+144    	; 0x1f1a <__vector_9+0x188>
 {   
  if (index>=16)
    1e8a:	80 91 21 01 	lds	r24, 0x0121
    1e8e:	80 31       	cpi	r24, 0x10	; 16
    1e90:	30 f1       	brcs	.+76     	; 0x1ede <__vector_9+0x14c>
  {     
   if (addr>=BlockSize)
    1e92:	c0 91 1f 01 	lds	r28, 0x011F
    1e96:	d0 91 20 01 	lds	r29, 0x0120
    1e9a:	80 91 12 01 	lds	r24, 0x0112
    1e9e:	90 91 13 01 	lds	r25, 0x0113
    1ea2:	c8 17       	cp	r28, r24
    1ea4:	d9 07       	cpc	r29, r25
    1ea6:	40 f0       	brcs	.+16     	; 0x1eb8 <__vector_9+0x126>
   {
    TapeOutMode=TAPE_OUT_STOP;
    1ea8:	84 e0       	ldi	r24, 0x04	; 4
    1eaa:	80 93 18 01 	sts	0x0118, r24
	DataCounter=0;
    1eae:	10 92 15 01 	sts	0x0115, r1
    1eb2:	10 92 14 01 	sts	0x0114, r1
    1eb6:	31 c0       	rjmp	.+98     	; 0x1f1a <__vector_9+0x188>
	return;
   }
   index=0;
    1eb8:	10 92 21 01 	sts	0x0121, r1
   byte=DRAM_ReadByte(addr);
    1ebc:	be 01       	movw	r22, r28
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	0e 94 83 01 	call	0x306	; 0x306 <DRAM_ReadByte>
    1ec6:	80 93 22 01 	sts	0x0122, r24
   addr++;
    1eca:	ce 01       	movw	r24, r28
    1ecc:	01 96       	adiw	r24, 0x01	; 1
    1ece:	90 93 20 01 	sts	0x0120, r25
    1ed2:	80 93 1f 01 	sts	0x011F, r24
   DataCounter=addr;
    1ed6:	90 93 15 01 	sts	0x0115, r25
    1eda:	80 93 14 01 	sts	0x0114, r24
  }
  //выдаём бит
  if (byte&128) TCNT0=255-(112>>Speed);//начальное значение таймера
    1ede:	30 91 22 01 	lds	r19, 0x0122
    1ee2:	37 ff       	sbrs	r19, 7
    1ee4:	05 c0       	rjmp	.+10     	; 0x1ef0 <__vector_9+0x15e>
    1ee6:	20 91 23 01 	lds	r18, 0x0123
    1eea:	80 e7       	ldi	r24, 0x70	; 112
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	04 c0       	rjmp	.+8      	; 0x1ef8 <__vector_9+0x166>
            else TCNT0=255-(56>>Speed);//начальное значение таймера
    1ef0:	20 91 23 01 	lds	r18, 0x0123
    1ef4:	88 e3       	ldi	r24, 0x38	; 56
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <__vector_9+0x16c>
    1efa:	95 95       	asr	r25
    1efc:	87 95       	ror	r24
    1efe:	2a 95       	dec	r18
    1f00:	e2 f7       	brpl	.-8      	; 0x1efa <__vector_9+0x168>
    1f02:	80 95       	com	r24
    1f04:	82 bf       	out	0x32, r24	; 50
  if ((index%2)==1) byte<<=1;  
    1f06:	80 91 21 01 	lds	r24, 0x0121
    1f0a:	80 ff       	sbrs	r24, 0
    1f0c:	03 c0       	rjmp	.+6      	; 0x1f14 <__vector_9+0x182>
    1f0e:	33 0f       	add	r19, r19
    1f10:	30 93 22 01 	sts	0x0122, r19
  index++;
    1f14:	8f 5f       	subi	r24, 0xFF	; 255
    1f16:	80 93 21 01 	sts	0x0121, r24
  return;		
 } 
    1f1a:	ff 91       	pop	r31
    1f1c:	ef 91       	pop	r30
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	bf 91       	pop	r27
    1f24:	af 91       	pop	r26
    1f26:	9f 91       	pop	r25
    1f28:	8f 91       	pop	r24
    1f2a:	7f 91       	pop	r23
    1f2c:	6f 91       	pop	r22
    1f2e:	5f 91       	pop	r21
    1f30:	4f 91       	pop	r20
    1f32:	3f 91       	pop	r19
    1f34:	2f 91       	pop	r18
    1f36:	0f 90       	pop	r0
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	0f 90       	pop	r0
    1f3c:	1f 90       	pop	r1
    1f3e:	18 95       	reti

00001f40 <OutputImage>:
}
//----------------------------------------------------------------------------------------------------
//запуск образа
//----------------------------------------------------------------------------------------------------
void OutputImage(void)
{
    1f40:	2f 92       	push	r2
    1f42:	3f 92       	push	r3
    1f44:	4f 92       	push	r4
    1f46:	5f 92       	push	r5
    1f48:	6f 92       	push	r6
    1f4a:	7f 92       	push	r7
    1f4c:	8f 92       	push	r8
    1f4e:	9f 92       	push	r9
    1f50:	af 92       	push	r10
    1f52:	bf 92       	push	r11
    1f54:	cf 92       	push	r12
    1f56:	df 92       	push	r13
    1f58:	ef 92       	push	r14
    1f5a:	ff 92       	push	r15
    1f5c:	0f 93       	push	r16
    1f5e:	1f 93       	push	r17
    1f60:	cf 93       	push	r28
    1f62:	df 93       	push	r29
    1f64:	88 e8       	ldi	r24, 0x88	; 136
    1f66:	93 e1       	ldi	r25, 0x13	; 19
    1f68:	20 e9       	ldi	r18, 0x90	; 144
    1f6a:	31 e0       	ldi	r19, 0x01	; 1
    1f6c:	f9 01       	movw	r30, r18
    1f6e:	31 97       	sbiw	r30, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <OutputImage+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f72:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f74:	d9 f7       	brne	.-10     	; 0x1f6c <OutputImage+0x2c>
    1f76:	00 e0       	ldi	r16, 0x00	; 0
    1f78:	10 e0       	ldi	r17, 0x00	; 0
 unsigned short block=0;
 while(1)
 {  
  if (FAT_WriteBlock(&BlockSize,block)==false) break;//блоки файла закончились 
  //выводим номер блока файла
  sprintf(string,"Block:%u [%u]",block+1,BlockSize);
    1f7a:	54 e2       	ldi	r21, 0x24	; 36
    1f7c:	a5 2e       	mov	r10, r21
    1f7e:	53 e0       	ldi	r21, 0x03	; 3
    1f80:	b5 2e       	mov	r11, r21
    1f82:	40 e6       	ldi	r20, 0x60	; 96
    1f84:	84 2e       	mov	r8, r20
    1f86:	40 e0       	ldi	r20, 0x00	; 0
    1f88:	94 2e       	mov	r9, r20
  WH1602_SetTextUpLine(string);  
  //запускаем таймер и регенерируем память    
  TCNT0=0;//начальное значение таймера
  LeadToneCounter=6000<<Speed;
    1f8a:	30 e7       	ldi	r19, 0x70	; 112
    1f8c:	23 2e       	mov	r2, r19
    1f8e:	37 e1       	ldi	r19, 0x17	; 23
    1f90:	33 2e       	mov	r3, r19
    1f92:	20 e9       	ldi	r18, 0x90	; 144
    1f94:	e2 2e       	mov	r14, r18
    1f96:	21 e0       	ldi	r18, 0x01	; 1
    1f98:	f2 2e       	mov	r15, r18
  {
   cli();
   DRAM_Refresh();
   if (TapeOutMode==TAPE_OUT_STOP) 
   {    
    sprintf(string,"Block:%u [0]",block+1);
    1f9a:	9e e6       	ldi	r25, 0x6E	; 110
    1f9c:	49 2e       	mov	r4, r25
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	59 2e       	mov	r5, r25
    1fa2:	80 e4       	ldi	r24, 0x40	; 64
    1fa4:	68 2e       	mov	r6, r24
    1fa6:	8c e9       	ldi	r24, 0x9C	; 156
    1fa8:	78 2e       	mov	r7, r24
 _delay_ms(500);
 //повторяем для каждого блока tap-файла
 unsigned short block=0;
 while(1)
 {  
  if (FAT_WriteBlock(&BlockSize,block)==false) break;//блоки файла закончились 
    1faa:	82 e1       	ldi	r24, 0x12	; 18
    1fac:	91 e0       	ldi	r25, 0x01	; 1
    1fae:	b8 01       	movw	r22, r16
    1fb0:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <FAT_WriteBlock>
    1fb4:	88 23       	and	r24, r24
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <OutputImage+0x7a>
    1fb8:	20 c1       	rjmp	.+576    	; 0x21fa <OutputImage+0x2ba>
  //выводим номер блока файла
  sprintf(string,"Block:%u [%u]",block+1,BlockSize);
    1fba:	68 01       	movw	r12, r16
    1fbc:	08 94       	sec
    1fbe:	c1 1c       	adc	r12, r1
    1fc0:	d1 1c       	adc	r13, r1
    1fc2:	2d b7       	in	r18, 0x3d	; 61
    1fc4:	3e b7       	in	r19, 0x3e	; 62
    1fc6:	28 50       	subi	r18, 0x08	; 8
    1fc8:	30 40       	sbci	r19, 0x00	; 0
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	f8 94       	cli
    1fce:	3e bf       	out	0x3e, r19	; 62
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	2d bf       	out	0x3d, r18	; 61
    1fd4:	ed b7       	in	r30, 0x3d	; 61
    1fd6:	fe b7       	in	r31, 0x3e	; 62
    1fd8:	31 96       	adiw	r30, 0x01	; 1
    1fda:	ad b7       	in	r26, 0x3d	; 61
    1fdc:	be b7       	in	r27, 0x3e	; 62
    1fde:	12 96       	adiw	r26, 0x02	; 2
    1fe0:	bc 92       	st	X, r11
    1fe2:	ae 92       	st	-X, r10
    1fe4:	11 97       	sbiw	r26, 0x01	; 1
    1fe6:	93 82       	std	Z+3, r9	; 0x03
    1fe8:	82 82       	std	Z+2, r8	; 0x02
    1fea:	d5 82       	std	Z+5, r13	; 0x05
    1fec:	c4 82       	std	Z+4, r12	; 0x04
    1fee:	80 91 12 01 	lds	r24, 0x0112
    1ff2:	90 91 13 01 	lds	r25, 0x0113
    1ff6:	97 83       	std	Z+7, r25	; 0x07
    1ff8:	86 83       	std	Z+6, r24	; 0x06
    1ffa:	0e 94 13 18 	call	0x3026	; 0x3026 <sprintf>
  WH1602_SetTextUpLine(string);  
    1ffe:	2d b7       	in	r18, 0x3d	; 61
    2000:	3e b7       	in	r19, 0x3e	; 62
    2002:	28 5f       	subi	r18, 0xF8	; 248
    2004:	3f 4f       	sbci	r19, 0xFF	; 255
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	3e bf       	out	0x3e, r19	; 62
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	2d bf       	out	0x3d, r18	; 61
    2010:	c5 01       	movw	r24, r10
    2012:	0e 94 71 02 	call	0x4e2	; 0x4e2 <WH1602_SetTextUpLine>
  //запускаем таймер и регенерируем память    
  TCNT0=0;//начальное значение таймера
    2016:	12 be       	out	0x32, r1	; 50
  LeadToneCounter=6000<<Speed;
    2018:	80 91 23 01 	lds	r24, 0x0123
    201c:	d1 01       	movw	r26, r2
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <OutputImage+0xe4>
    2020:	aa 0f       	add	r26, r26
    2022:	bb 1f       	adc	r27, r27
    2024:	8a 95       	dec	r24
    2026:	e2 f7       	brpl	.-8      	; 0x2020 <OutputImage+0xe0>
    2028:	b0 93 17 01 	sts	0x0117, r27
    202c:	a0 93 16 01 	sts	0x0116, r26
  TapeOutMode=TAPE_OUT_LEAD;
    2030:	10 92 18 01 	sts	0x0118, r1
  TapeOutVolume=0;    
    2034:	10 92 19 01 	sts	0x0119, r1
  DataCounter=0;
    2038:	10 92 15 01 	sts	0x0115, r1
    203c:	10 92 14 01 	sts	0x0114, r1
  unsigned short dl=0;
  sei();  
    2040:	78 94       	sei
    2042:	c0 e0       	ldi	r28, 0x00	; 0
    2044:	d0 e0       	ldi	r29, 0x00	; 0
  while(1)
  {
   cli();
    2046:	f8 94       	cli
   DRAM_Refresh();
    2048:	0e 94 1b 01 	call	0x236	; 0x236 <DRAM_Refresh>
   if (TapeOutMode==TAPE_OUT_STOP) 
    204c:	80 91 18 01 	lds	r24, 0x0118
    2050:	84 30       	cpi	r24, 0x04	; 4
    2052:	09 f0       	breq	.+2      	; 0x2056 <OutputImage+0x116>
    2054:	62 c0       	rjmp	.+196    	; 0x211a <OutputImage+0x1da>
   {    
    sprintf(string,"Block:%u [0]",block+1);
    2056:	00 d0       	rcall	.+0      	; 0x2058 <OutputImage+0x118>
    2058:	00 d0       	rcall	.+0      	; 0x205a <OutputImage+0x11a>
    205a:	00 d0       	rcall	.+0      	; 0x205c <OutputImage+0x11c>
    205c:	ed b7       	in	r30, 0x3d	; 61
    205e:	fe b7       	in	r31, 0x3e	; 62
    2060:	31 96       	adiw	r30, 0x01	; 1
    2062:	ad b7       	in	r26, 0x3d	; 61
    2064:	be b7       	in	r27, 0x3e	; 62
    2066:	12 96       	adiw	r26, 0x02	; 2
    2068:	bc 92       	st	X, r11
    206a:	ae 92       	st	-X, r10
    206c:	11 97       	sbiw	r26, 0x01	; 1
    206e:	53 82       	std	Z+3, r5	; 0x03
    2070:	42 82       	std	Z+2, r4	; 0x02
    2072:	d5 82       	std	Z+5, r13	; 0x05
    2074:	c4 82       	std	Z+4, r12	; 0x04
    2076:	0e 94 13 18 	call	0x3026	; 0x3026 <sprintf>
    WH1602_SetTextUpLine(string);
    207a:	2d b7       	in	r18, 0x3d	; 61
    207c:	3e b7       	in	r19, 0x3e	; 62
    207e:	2a 5f       	subi	r18, 0xFA	; 250
    2080:	3f 4f       	sbci	r19, 0xFF	; 255
    2082:	0f b6       	in	r0, 0x3f	; 63
    2084:	f8 94       	cli
    2086:	3e bf       	out	0x3e, r19	; 62
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	2d bf       	out	0x3d, r18	; 61
    208c:	c5 01       	movw	r24, r10
    208e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <WH1602_SetTextUpLine>
    unsigned short new_block=block+1;
    //формируем паузу
    int delay=200;
    if (BlockSize>0x13) delay=500;//передавался файл
    2092:	80 91 12 01 	lds	r24, 0x0112
    2096:	90 91 13 01 	lds	r25, 0x0113
    209a:	44 97       	sbiw	r24, 0x14	; 20
    209c:	18 f0       	brcs	.+6      	; 0x20a4 <OutputImage+0x164>
    209e:	44 ef       	ldi	r20, 0xF4	; 244
    20a0:	51 e0       	ldi	r21, 0x01	; 1
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <OutputImage+0x168>
    20a4:	48 ec       	ldi	r20, 0xC8	; 200
    20a6:	50 e0       	ldi	r21, 0x00	; 0
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	31 c0       	rjmp	.+98     	; 0x2110 <OutputImage+0x1d0>
    20ae:	c3 01       	movw	r24, r6
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <OutputImage+0x170>
    for(unsigned short n=0;n<delay;n++)
    {
     _delay_ms(10);
     if (BUTTON_SELECT_PIN&(1<<BUTTON_SELECT))//выход
    20b4:	84 99       	sbic	0x10, 4	; 16
    20b6:	a1 c0       	rjmp	.+322    	; 0x21fa <OutputImage+0x2ba>
     {    
	  TAPE_OUT_PORT&=0xff^(1<<TAPE_OUT);
	  return;
     }   
     if (BUTTON_CENTER_PIN&(1<<BUTTON_CENTER))//пауза
    20b8:	82 9b       	sbis	0x10, 2	; 16
    20ba:	10 c0       	rjmp	.+32     	; 0x20dc <OutputImage+0x19c>
    20bc:	80 ed       	ldi	r24, 0xD0	; 208
    20be:	97 e0       	ldi	r25, 0x07	; 7
    20c0:	f7 01       	movw	r30, r14
    20c2:	31 97       	sbiw	r30, 0x01	; 1
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <OutputImage+0x182>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c8:	d9 f7       	brne	.-10     	; 0x20c0 <OutputImage+0x180>
     {
	  _delay_ms(200);
	  while(1)
	  {
	   if (BUTTON_CENTER_PIN&(1<<BUTTON_CENTER)) break;
    20ca:	82 9b       	sbis	0x10, 2	; 16
    20cc:	fe cf       	rjmp	.-4      	; 0x20ca <OutputImage+0x18a>
    20ce:	80 ed       	ldi	r24, 0xD0	; 208
    20d0:	97 e0       	ldi	r25, 0x07	; 7
    20d2:	f7 01       	movw	r30, r14
    20d4:	31 97       	sbiw	r30, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <OutputImage+0x194>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20da:	d9 f7       	brne	.-10     	; 0x20d2 <OutputImage+0x192>
	  }
	  _delay_ms(200);
     }
     if (BUTTON_UP_PIN&(1<<BUTTON_UP))//на блок вперёд
    20dc:	83 9b       	sbis	0x10, 3	; 16
    20de:	08 c0       	rjmp	.+16     	; 0x20f0 <OutputImage+0x1b0>
    20e0:	80 ed       	ldi	r24, 0xD0	; 208
    20e2:	97 e0       	ldi	r25, 0x07	; 7
    20e4:	f7 01       	movw	r30, r14
    20e6:	31 97       	sbiw	r30, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <OutputImage+0x1a6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ec:	d9 f7       	brne	.-10     	; 0x20e4 <OutputImage+0x1a4>
    20ee:	82 c0       	rjmp	.+260    	; 0x21f4 <OutputImage+0x2b4>
     {
      _delay_ms(200);
      new_block=block+1;
      break;
     }
     if (BUTTON_DOWN_PIN&(1<<BUTTON_DOWN))//на блок назад
    20f0:	81 9b       	sbis	0x10, 1	; 16
    20f2:	0c c0       	rjmp	.+24     	; 0x210c <OutputImage+0x1cc>
    20f4:	80 ed       	ldi	r24, 0xD0	; 208
    20f6:	97 e0       	ldi	r25, 0x07	; 7
    20f8:	f7 01       	movw	r30, r14
    20fa:	31 97       	sbiw	r30, 0x01	; 1
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <OutputImage+0x1ba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2100:	d9 f7       	brne	.-10     	; 0x20f8 <OutputImage+0x1b8>
     {
      _delay_ms(200);
      if (block>0) new_block=block-1;
    2102:	01 15       	cp	r16, r1
    2104:	11 05       	cpc	r17, r1
    2106:	09 f4       	brne	.+2      	; 0x210a <OutputImage+0x1ca>
    2108:	75 c0       	rjmp	.+234    	; 0x21f4 <OutputImage+0x2b4>
    210a:	68 c0       	rjmp	.+208    	; 0x21dc <OutputImage+0x29c>
    WH1602_SetTextUpLine(string);
    unsigned short new_block=block+1;
    //формируем паузу
    int delay=200;
    if (BlockSize>0x13) delay=500;//передавался файл
    for(unsigned short n=0;n<delay;n++)
    210c:	2f 5f       	subi	r18, 0xFF	; 255
    210e:	3f 4f       	sbci	r19, 0xFF	; 255
    2110:	24 17       	cp	r18, r20
    2112:	35 07       	cpc	r19, r21
    2114:	08 f4       	brcc	.+2      	; 0x2118 <OutputImage+0x1d8>
    2116:	cb cf       	rjmp	.-106    	; 0x20ae <OutputImage+0x16e>
    2118:	6d c0       	rjmp	.+218    	; 0x21f4 <OutputImage+0x2b4>
     }
    }
	block=new_block;
    break;   
   }
   unsigned short dc=BlockSize-DataCounter;
    211a:	20 91 12 01 	lds	r18, 0x0112
    211e:	30 91 13 01 	lds	r19, 0x0113
    2122:	40 91 14 01 	lds	r20, 0x0114
    2126:	50 91 15 01 	lds	r21, 0x0115
   unsigned short tm=TapeOutMode;
    212a:	80 91 18 01 	lds	r24, 0x0118
   sei();
    212e:	78 94       	sei
   if (tm==TAPE_OUT_DATA)
    2130:	83 30       	cpi	r24, 0x03	; 3
    2132:	69 f5       	brne	.+90     	; 0x218e <OutputImage+0x24e>
   {       
    if (dl==30000)
    2134:	85 e7       	ldi	r24, 0x75	; 117
    2136:	c0 33       	cpi	r28, 0x30	; 48
    2138:	d8 07       	cpc	r29, r24
    213a:	41 f5       	brne	.+80     	; 0x218c <OutputImage+0x24c>
	{
     sprintf(string,"Block:%u [%u]",block+1,dc);
    213c:	ad b7       	in	r26, 0x3d	; 61
    213e:	be b7       	in	r27, 0x3e	; 62
    2140:	18 97       	sbiw	r26, 0x08	; 8
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	be bf       	out	0x3e, r27	; 62
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	ad bf       	out	0x3d, r26	; 61
    214c:	ed b7       	in	r30, 0x3d	; 61
    214e:	fe b7       	in	r31, 0x3e	; 62
    2150:	31 96       	adiw	r30, 0x01	; 1
    2152:	12 96       	adiw	r26, 0x02	; 2
    2154:	bc 92       	st	X, r11
    2156:	ae 92       	st	-X, r10
    2158:	11 97       	sbiw	r26, 0x01	; 1
    215a:	93 82       	std	Z+3, r9	; 0x03
    215c:	82 82       	std	Z+2, r8	; 0x02
    215e:	d5 82       	std	Z+5, r13	; 0x05
    2160:	c4 82       	std	Z+4, r12	; 0x04
    2162:	24 1b       	sub	r18, r20
    2164:	35 0b       	sbc	r19, r21
    2166:	37 83       	std	Z+7, r19	; 0x07
    2168:	26 83       	std	Z+6, r18	; 0x06
    216a:	0e 94 13 18 	call	0x3026	; 0x3026 <sprintf>
     WH1602_SetTextUpLine(string);
    216e:	2d b7       	in	r18, 0x3d	; 61
    2170:	3e b7       	in	r19, 0x3e	; 62
    2172:	28 5f       	subi	r18, 0xF8	; 248
    2174:	3f 4f       	sbci	r19, 0xFF	; 255
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	f8 94       	cli
    217a:	3e bf       	out	0x3e, r19	; 62
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	2d bf       	out	0x3d, r18	; 61
    2180:	c5 01       	movw	r24, r10
    2182:	0e 94 71 02 	call	0x4e2	; 0x4e2 <WH1602_SetTextUpLine>
    2186:	c0 e0       	ldi	r28, 0x00	; 0
    2188:	d0 e0       	ldi	r29, 0x00	; 0
    218a:	01 c0       	rjmp	.+2      	; 0x218e <OutputImage+0x24e>
	 dl=0;
	}
	else dl++;
    218c:	21 96       	adiw	r28, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    218e:	85 e3       	ldi	r24, 0x35	; 53
    2190:	8a 95       	dec	r24
    2192:	f1 f7       	brne	.-4      	; 0x2190 <OutputImage+0x250>
   }
   _delay_us(10);
   if (BUTTON_SELECT_PIN&(1<<BUTTON_SELECT))//выход
    2194:	84 9b       	sbis	0x10, 4	; 16
    2196:	02 c0       	rjmp	.+4      	; 0x219c <OutputImage+0x25c>
   {
    cli();
    2198:	f8 94       	cli
    219a:	2f c0       	rjmp	.+94     	; 0x21fa <OutputImage+0x2ba>
	TAPE_OUT_PORT&=0xff^(1<<TAPE_OUT);
	return;
   }   
   if (BUTTON_CENTER_PIN&(1<<BUTTON_CENTER))//пауза
    219c:	82 9b       	sbis	0x10, 2	; 16
    219e:	12 c0       	rjmp	.+36     	; 0x21c4 <OutputImage+0x284>
   {
	cli();
    21a0:	f8 94       	cli
    21a2:	80 ed       	ldi	r24, 0xD0	; 208
    21a4:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21a6:	f7 01       	movw	r30, r14
    21a8:	31 97       	sbiw	r30, 0x01	; 1
    21aa:	f1 f7       	brne	.-4      	; 0x21a8 <OutputImage+0x268>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ae:	d9 f7       	brne	.-10     	; 0x21a6 <OutputImage+0x266>
	_delay_ms(200);
	while(1)
	{
	 if (BUTTON_CENTER_PIN&(1<<BUTTON_CENTER)) break;
    21b0:	82 9b       	sbis	0x10, 2	; 16
    21b2:	fe cf       	rjmp	.-4      	; 0x21b0 <OutputImage+0x270>
	}
	sei();
    21b4:	78 94       	sei
    21b6:	80 ed       	ldi	r24, 0xD0	; 208
    21b8:	97 e0       	ldi	r25, 0x07	; 7
    21ba:	f7 01       	movw	r30, r14
    21bc:	31 97       	sbiw	r30, 0x01	; 1
    21be:	f1 f7       	brne	.-4      	; 0x21bc <OutputImage+0x27c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c2:	d9 f7       	brne	.-10     	; 0x21ba <OutputImage+0x27a>
	_delay_ms(200);
   }
   
   if (BUTTON_UP_PIN&(1<<BUTTON_UP))//на блок вперёд
    21c4:	83 9b       	sbis	0x10, 3	; 16
    21c6:	0d c0       	rjmp	.+26     	; 0x21e2 <OutputImage+0x2a2>
    21c8:	80 ed       	ldi	r24, 0xD0	; 208
    21ca:	97 e0       	ldi	r25, 0x07	; 7
    21cc:	f7 01       	movw	r30, r14
    21ce:	31 97       	sbiw	r30, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <OutputImage+0x28e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d4:	d9 f7       	brne	.-10     	; 0x21cc <OutputImage+0x28c>
   {
    _delay_ms(200);
    if (block>0) block--;
    21d6:	01 15       	cp	r16, r1
    21d8:	11 05       	cpc	r17, r1
    21da:	69 f0       	breq	.+26     	; 0x21f6 <OutputImage+0x2b6>
    21dc:	01 50       	subi	r16, 0x01	; 1
    21de:	10 40       	sbci	r17, 0x00	; 0
    21e0:	0a c0       	rjmp	.+20     	; 0x21f6 <OutputImage+0x2b6>
    break;
   }
   if (BUTTON_DOWN_PIN&(1<<BUTTON_DOWN))//на блок назад
    21e2:	81 9b       	sbis	0x10, 1	; 16
    21e4:	30 cf       	rjmp	.-416    	; 0x2046 <OutputImage+0x106>
    21e6:	80 ed       	ldi	r24, 0xD0	; 208
    21e8:	97 e0       	ldi	r25, 0x07	; 7
    21ea:	f7 01       	movw	r30, r14
    21ec:	31 97       	sbiw	r30, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <OutputImage+0x2ac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f2:	d9 f7       	brne	.-10     	; 0x21ea <OutputImage+0x2aa>
    21f4:	86 01       	movw	r16, r12
    _delay_ms(200);
    block++;
    break;
   }
  }
  cli();
    21f6:	f8 94       	cli
    21f8:	d8 ce       	rjmp	.-592    	; 0x1faa <OutputImage+0x6a>
 }
 TAPE_OUT_PORT&=0xff^(1<<TAPE_OUT);
    21fa:	90 98       	cbi	0x12, 0	; 18
}
    21fc:	df 91       	pop	r29
    21fe:	cf 91       	pop	r28
    2200:	1f 91       	pop	r17
    2202:	0f 91       	pop	r16
    2204:	ff 90       	pop	r15
    2206:	ef 90       	pop	r14
    2208:	df 90       	pop	r13
    220a:	cf 90       	pop	r12
    220c:	bf 90       	pop	r11
    220e:	af 90       	pop	r10
    2210:	9f 90       	pop	r9
    2212:	8f 90       	pop	r8
    2214:	7f 90       	pop	r7
    2216:	6f 90       	pop	r6
    2218:	5f 90       	pop	r5
    221a:	4f 90       	pop	r4
    221c:	3f 90       	pop	r3
    221e:	2f 90       	pop	r2
    2220:	08 95       	ret

00002222 <MemoryTest>:
}
//----------------------------------------------------------------------------------------------------
//тест памяти
//----------------------------------------------------------------------------------------------------
void MemoryTest(void)
{ 
    2222:	4f 92       	push	r4
    2224:	5f 92       	push	r5
    2226:	6f 92       	push	r6
    2228:	7f 92       	push	r7
    222a:	8f 92       	push	r8
    222c:	9f 92       	push	r9
    222e:	af 92       	push	r10
    2230:	bf 92       	push	r11
    2232:	cf 92       	push	r12
    2234:	df 92       	push	r13
    2236:	ef 92       	push	r14
    2238:	ff 92       	push	r15
    223a:	0f 93       	push	r16
    223c:	1f 93       	push	r17
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
 WH1602_SetTextProgmemUpLine(Text_Main_Memory_Test);  
    2242:	86 e6       	ldi	r24, 0x66	; 102
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	0e 94 53 03 	call	0x6a6	; 0x6a6 <WH1602_SetTextProgmemUpLine>
    224a:	1f ef       	ldi	r17, 0xFF	; 255
    224c:	cc 24       	eor	r12, r12
    224e:	dd 24       	eor	r13, r13
    2250:	76 01       	movw	r14, r12
    2252:	88 24       	eor	r8, r8
    2254:	99 24       	eor	r9, r9
    2256:	54 01       	movw	r10, r8
 for(unsigned long addr=0;addr<131072UL;addr++)
 {
  unsigned char progress=(unsigned char)(100UL*addr/131071UL);
  if (progress!=last_p)
  {
   sprintf(string,"Progress:%i %%",progress);
    2258:	c4 e2       	ldi	r28, 0x24	; 36
    225a:	d3 e0       	ldi	r29, 0x03	; 3
    225c:	6b e7       	ldi	r22, 0x7B	; 123
    225e:	46 2e       	mov	r4, r22
    2260:	60 e0       	ldi	r22, 0x00	; 0
    2262:	56 2e       	mov	r5, r22
{ 
 WH1602_SetTextProgmemUpLine(Text_Main_Memory_Test);  
 unsigned char last_p=0xff;
 for(unsigned long addr=0;addr<131072UL;addr++)
 {
  unsigned char progress=(unsigned char)(100UL*addr/131071UL);
    2264:	c5 01       	movw	r24, r10
    2266:	b4 01       	movw	r22, r8
    2268:	2f ef       	ldi	r18, 0xFF	; 255
    226a:	3f ef       	ldi	r19, 0xFF	; 255
    226c:	41 e0       	ldi	r20, 0x01	; 1
    226e:	50 e0       	ldi	r21, 0x00	; 0
    2270:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__udivmodsi4>
    2274:	72 2e       	mov	r7, r18
  if (progress!=last_p)
    2276:	21 17       	cp	r18, r17
    2278:	e9 f0       	breq	.+58     	; 0x22b4 <MemoryTest+0x92>
  {
   sprintf(string,"Progress:%i %%",progress);
    227a:	00 d0       	rcall	.+0      	; 0x227c <MemoryTest+0x5a>
    227c:	00 d0       	rcall	.+0      	; 0x227e <MemoryTest+0x5c>
    227e:	00 d0       	rcall	.+0      	; 0x2280 <MemoryTest+0x5e>
    2280:	ed b7       	in	r30, 0x3d	; 61
    2282:	fe b7       	in	r31, 0x3e	; 62
    2284:	31 96       	adiw	r30, 0x01	; 1
    2286:	ad b7       	in	r26, 0x3d	; 61
    2288:	be b7       	in	r27, 0x3e	; 62
    228a:	12 96       	adiw	r26, 0x02	; 2
    228c:	dc 93       	st	X, r29
    228e:	ce 93       	st	-X, r28
    2290:	11 97       	sbiw	r26, 0x01	; 1
    2292:	53 82       	std	Z+3, r5	; 0x03
    2294:	42 82       	std	Z+2, r4	; 0x02
    2296:	24 83       	std	Z+4, r18	; 0x04
    2298:	15 82       	std	Z+5, r1	; 0x05
    229a:	0e 94 13 18 	call	0x3026	; 0x3026 <sprintf>
   WH1602_SetTextDownLine(string); 
    229e:	8d b7       	in	r24, 0x3d	; 61
    22a0:	9e b7       	in	r25, 0x3e	; 62
    22a2:	06 96       	adiw	r24, 0x06	; 6
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	9e bf       	out	0x3e, r25	; 62
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	8d bf       	out	0x3d, r24	; 61
    22ae:	ce 01       	movw	r24, r28
    22b0:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <WH1602_SetTextDownLine>
    22b4:	11 e0       	ldi	r17, 0x01	; 1
    22b6:	00 e0       	ldi	r16, 0x00	; 0
   last_p=progress;
  }  
  unsigned char byte=0x01;
  for(unsigned char n=0;n<8;n++,byte<<=1)
  {
   DRAM_WriteByte(addr,byte);
    22b8:	c7 01       	movw	r24, r14
    22ba:	b6 01       	movw	r22, r12
    22bc:	41 2f       	mov	r20, r17
    22be:	0e 94 9d 01 	call	0x33a	; 0x33a <DRAM_WriteByte>
   DRAM_Refresh();
    22c2:	0e 94 1b 01 	call	0x236	; 0x236 <DRAM_Refresh>
   unsigned char byte_r=DRAM_ReadByte(addr);
    22c6:	c7 01       	movw	r24, r14
    22c8:	b6 01       	movw	r22, r12
    22ca:	0e 94 83 01 	call	0x306	; 0x306 <DRAM_ReadByte>
    22ce:	68 2e       	mov	r6, r24
   if (byte!=byte_r)
    22d0:	18 17       	cp	r17, r24
    22d2:	b1 f1       	breq	.+108    	; 0x2340 <MemoryTest+0x11e>
   {
    WH1602_SetTextProgmemUpLine(Text_Main_Memory_Test_Error);
    22d4:	88 e7       	ldi	r24, 0x78	; 120
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	0e 94 53 03 	call	0x6a6	; 0x6a6 <WH1602_SetTextProgmemUpLine>
    sprintf(string,"%05x = [%02x , %02x]",(unsigned int)addr,byte,byte_r);
    22dc:	ad b7       	in	r26, 0x3d	; 61
    22de:	be b7       	in	r27, 0x3e	; 62
    22e0:	1a 97       	sbiw	r26, 0x0a	; 10
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	f8 94       	cli
    22e6:	be bf       	out	0x3e, r27	; 62
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	ad bf       	out	0x3d, r26	; 61
    22ec:	ed b7       	in	r30, 0x3d	; 61
    22ee:	fe b7       	in	r31, 0x3e	; 62
    22f0:	31 96       	adiw	r30, 0x01	; 1
    22f2:	c4 e2       	ldi	r28, 0x24	; 36
    22f4:	d3 e0       	ldi	r29, 0x03	; 3
    22f6:	12 96       	adiw	r26, 0x02	; 2
    22f8:	dc 93       	st	X, r29
    22fa:	ce 93       	st	-X, r28
    22fc:	11 97       	sbiw	r26, 0x01	; 1
    22fe:	8a e8       	ldi	r24, 0x8A	; 138
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	93 83       	std	Z+3, r25	; 0x03
    2304:	82 83       	std	Z+2, r24	; 0x02
    2306:	d5 82       	std	Z+5, r13	; 0x05
    2308:	c4 82       	std	Z+4, r12	; 0x04
    230a:	16 83       	std	Z+6, r17	; 0x06
    230c:	17 82       	std	Z+7, r1	; 0x07
    230e:	60 86       	std	Z+8, r6	; 0x08
    2310:	11 86       	std	Z+9, r1	; 0x09
    2312:	0e 94 13 18 	call	0x3026	; 0x3026 <sprintf>
    WH1602_SetTextDownLine(string);
    2316:	8d b7       	in	r24, 0x3d	; 61
    2318:	9e b7       	in	r25, 0x3e	; 62
    231a:	0a 96       	adiw	r24, 0x0a	; 10
    231c:	0f b6       	in	r0, 0x3f	; 63
    231e:	f8 94       	cli
    2320:	9e bf       	out	0x3e, r25	; 62
    2322:	0f be       	out	0x3f, r0	; 63
    2324:	8d bf       	out	0x3d, r24	; 61
    2326:	ce 01       	movw	r24, r28
    2328:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <WH1602_SetTextDownLine>
    232c:	80 e5       	ldi	r24, 0x50	; 80
    232e:	93 ec       	ldi	r25, 0xC3	; 195
    2330:	20 e9       	ldi	r18, 0x90	; 144
    2332:	31 e0       	ldi	r19, 0x01	; 1
    2334:	f9 01       	movw	r30, r18
    2336:	31 97       	sbiw	r30, 0x01	; 1
    2338:	f1 f7       	brne	.-4      	; 0x2336 <MemoryTest+0x114>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233c:	d9 f7       	brne	.-10     	; 0x2334 <MemoryTest+0x112>
    233e:	2e c0       	rjmp	.+92     	; 0x239c <MemoryTest+0x17a>
   sprintf(string,"Progress:%i %%",progress);
   WH1602_SetTextDownLine(string); 
   last_p=progress;
  }  
  unsigned char byte=0x01;
  for(unsigned char n=0;n<8;n++,byte<<=1)
    2340:	0f 5f       	subi	r16, 0xFF	; 255
    2342:	08 30       	cpi	r16, 0x08	; 8
    2344:	11 f0       	breq	.+4      	; 0x234a <MemoryTest+0x128>
    2346:	11 0f       	add	r17, r17
    2348:	b7 cf       	rjmp	.-146    	; 0x22b8 <MemoryTest+0x96>
//----------------------------------------------------------------------------------------------------
void MemoryTest(void)
{ 
 WH1602_SetTextProgmemUpLine(Text_Main_Memory_Test);  
 unsigned char last_p=0xff;
 for(unsigned long addr=0;addr<131072UL;addr++)
    234a:	08 94       	sec
    234c:	c1 1c       	adc	r12, r1
    234e:	d1 1c       	adc	r13, r1
    2350:	e1 1c       	adc	r14, r1
    2352:	f1 1c       	adc	r15, r1
    2354:	84 e6       	ldi	r24, 0x64	; 100
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	a0 e0       	ldi	r26, 0x00	; 0
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	88 0e       	add	r8, r24
    235e:	99 1e       	adc	r9, r25
    2360:	aa 1e       	adc	r10, r26
    2362:	bb 1e       	adc	r11, r27
    2364:	17 2d       	mov	r17, r7
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	c9 16       	cp	r12, r25
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	d9 06       	cpc	r13, r25
    236e:	92 e0       	ldi	r25, 0x02	; 2
    2370:	e9 06       	cpc	r14, r25
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	f9 06       	cpc	r15, r25
    2376:	09 f0       	breq	.+2      	; 0x237a <MemoryTest+0x158>
    2378:	75 cf       	rjmp	.-278    	; 0x2264 <MemoryTest+0x42>
	_delay_ms(5000);
    return;
   }
  }
 }
 WH1602_SetTextProgmemUpLine(Text_Main_Memory_Test_OK);
    237a:	89 e8       	ldi	r24, 0x89	; 137
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <WH1602_SetTextProgmemUpLine>
 WH1602_SetTextDownLine("");
    2382:	8f e9       	ldi	r24, 0x9F	; 159
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <WH1602_SetTextDownLine>
    238a:	80 e3       	ldi	r24, 0x30	; 48
    238c:	95 e7       	ldi	r25, 0x75	; 117
    238e:	20 e9       	ldi	r18, 0x90	; 144
    2390:	31 e0       	ldi	r19, 0x01	; 1
    2392:	f9 01       	movw	r30, r18
    2394:	31 97       	sbiw	r30, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <MemoryTest+0x172>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2398:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239a:	d9 f7       	brne	.-10     	; 0x2392 <MemoryTest+0x170>
 _delay_ms(3000);
}
    239c:	df 91       	pop	r29
    239e:	cf 91       	pop	r28
    23a0:	1f 91       	pop	r17
    23a2:	0f 91       	pop	r16
    23a4:	ff 90       	pop	r15
    23a6:	ef 90       	pop	r14
    23a8:	df 90       	pop	r13
    23aa:	cf 90       	pop	r12
    23ac:	bf 90       	pop	r11
    23ae:	af 90       	pop	r10
    23b0:	9f 90       	pop	r9
    23b2:	8f 90       	pop	r8
    23b4:	7f 90       	pop	r7
    23b6:	6f 90       	pop	r6
    23b8:	5f 90       	pop	r5
    23ba:	4f 90       	pop	r4
    23bc:	08 95       	ret

000023be <TapeMenu>:

//----------------------------------------------------------------------------------------------------
//меню магнитофона
//----------------------------------------------------------------------------------------------------
void TapeMenu(void)
{
    23be:	2f 92       	push	r2
    23c0:	3f 92       	push	r3
    23c2:	4f 92       	push	r4
    23c4:	5f 92       	push	r5
    23c6:	6f 92       	push	r6
    23c8:	7f 92       	push	r7
    23ca:	8f 92       	push	r8
    23cc:	9f 92       	push	r9
    23ce:	af 92       	push	r10
    23d0:	bf 92       	push	r11
    23d2:	cf 92       	push	r12
    23d4:	df 92       	push	r13
    23d6:	ef 92       	push	r14
    23d8:	ff 92       	push	r15
    23da:	0f 93       	push	r16
    23dc:	1f 93       	push	r17
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	e1 97       	sbiw	r28, 0x31	; 49
    23e8:	0f b6       	in	r0, 0x3f	; 63
    23ea:	f8 94       	cli
    23ec:	de bf       	out	0x3e, r29	; 62
    23ee:	0f be       	out	0x3f, r0	; 63
    23f0:	cd bf       	out	0x3d, r28	; 61
 unsigned char n;
 //переходим к первому имени файла на карте
 if (FAT_BeginFileSearch()==false)
    23f2:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <FAT_BeginFileSearch>
    23f6:	88 23       	and	r24, r24
    23f8:	91 f4       	brne	.+36     	; 0x241e <TapeMenu+0x60>
 {
  WH1602_SetTextProgmemUpLine(Text_Tape_Menu_No_Image); 
    23fa:	83 e9       	ldi	r24, 0x93	; 147
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	0e 94 53 03 	call	0x6a6	; 0x6a6 <WH1602_SetTextProgmemUpLine>
  WH1602_SetTextDownLine(""); 
    2402:	8f e9       	ldi	r24, 0x9F	; 159
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <WH1602_SetTextDownLine>
    240a:	80 e2       	ldi	r24, 0x20	; 32
    240c:	9e e4       	ldi	r25, 0x4E	; 78
    240e:	20 e9       	ldi	r18, 0x90	; 144
    2410:	31 e0       	ldi	r19, 0x01	; 1
    2412:	f9 01       	movw	r30, r18
    2414:	31 97       	sbiw	r30, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <TapeMenu+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2418:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241a:	d9 f7       	brne	.-10     	; 0x2412 <TapeMenu+0x54>
    241c:	f5 c0       	rjmp	.+490    	; 0x2608 <TapeMenu+0x24a>
 unsigned long FirstCluster;//первый кластер файла
 unsigned long Size;//размер файла
 unsigned short index=1;//номер файла
 unsigned short level_index[20];//20 уровней вложенности
 unsigned char level=0;
 level_index[0]=index;
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	9b 87       	std	Y+11, r25	; 0x0b
    2424:	8a 87       	std	Y+10, r24	; 0x0a
    2426:	dd 24       	eor	r13, r13
    2428:	61 e0       	ldi	r22, 0x01	; 1
    242a:	e6 2e       	mov	r14, r22
    242c:	f1 2c       	mov	r15, r1
 while(1)
 { 
  //выводим данные с SD-карты
  //читаем имя файла 
  if (FAT_GetFileSearch(string,&FirstCluster,&Size,&Directory)==true) WH1602_SetTextDownLine(string);
    242e:	54 e2       	ldi	r21, 0x24	; 36
    2430:	85 2e       	mov	r8, r21
    2432:	53 e0       	ldi	r21, 0x03	; 3
    2434:	95 2e       	mov	r9, r21
    2436:	5e 01       	movw	r10, r28
    2438:	08 94       	sec
    243a:	a1 1c       	adc	r10, r1
    243c:	b1 1c       	adc	r11, r1
  if (Directory==false) sprintf(string,"[%02u:%05u] File",level,index);
    243e:	40 ea       	ldi	r20, 0xA0	; 160
    2440:	24 2e       	mov	r2, r20
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	34 2e       	mov	r3, r20
    2446:	30 e9       	ldi	r19, 0x90	; 144
    2448:	43 2e       	mov	r4, r19
    244a:	31 e0       	ldi	r19, 0x01	; 1
    244c:	53 2e       	mov	r5, r19
     FAT_EnterDirectory(FirstCluster);//заходим в директорию	
	 //проматываем до выбранного файла
	 index=1;
	 if (level<20)
	 {
	  for(unsigned short s=1;s<level_index[level];s++)
    244e:	21 e0       	ldi	r18, 0x01	; 1
    2450:	62 2e       	mov	r6, r18
    2452:	71 2c       	mov	r7, r1
    2454:	01 c0       	rjmp	.+2      	; 0x2458 <TapeMenu+0x9a>
 unsigned long FirstCluster;//первый кластер файла
 unsigned long Size;//размер файла
 unsigned short index=1;//номер файла
 unsigned short level_index[20];//20 уровней вложенности
 unsigned char level=0;
 level_index[0]=index;
    2456:	78 01       	movw	r14, r16
 while(1)
 { 
  //выводим данные с SD-карты
  //читаем имя файла 
  if (FAT_GetFileSearch(string,&FirstCluster,&Size,&Directory)==true) WH1602_SetTextDownLine(string);
    2458:	84 e2       	ldi	r24, 0x24	; 36
    245a:	93 e0       	ldi	r25, 0x03	; 3
    245c:	be 01       	movw	r22, r28
    245e:	6e 5f       	subi	r22, 0xFE	; 254
    2460:	7f 4f       	sbci	r23, 0xFF	; 255
    2462:	ae 01       	movw	r20, r28
    2464:	4a 5f       	subi	r20, 0xFA	; 250
    2466:	5f 4f       	sbci	r21, 0xFF	; 255
    2468:	95 01       	movw	r18, r10
    246a:	0e 94 e7 09 	call	0x13ce	; 0x13ce <FAT_GetFileSearch>
    246e:	81 30       	cpi	r24, 0x01	; 1
    2470:	21 f4       	brne	.+8      	; 0x247a <TapeMenu+0xbc>
    2472:	84 e2       	ldi	r24, 0x24	; 36
    2474:	93 e0       	ldi	r25, 0x03	; 3
    2476:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <WH1602_SetTextDownLine>
  if (Directory==false) sprintf(string,"[%02u:%05u] File",level,index);
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	88 23       	and	r24, r24
    247e:	11 f5       	brne	.+68     	; 0x24c4 <TapeMenu+0x106>
    2480:	8d b7       	in	r24, 0x3d	; 61
    2482:	9e b7       	in	r25, 0x3e	; 62
    2484:	08 97       	sbiw	r24, 0x08	; 8
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	9e bf       	out	0x3e, r25	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	8d bf       	out	0x3d, r24	; 61
    2490:	ed b7       	in	r30, 0x3d	; 61
    2492:	fe b7       	in	r31, 0x3e	; 62
    2494:	31 96       	adiw	r30, 0x01	; 1
    2496:	ad b7       	in	r26, 0x3d	; 61
    2498:	be b7       	in	r27, 0x3e	; 62
    249a:	12 96       	adiw	r26, 0x02	; 2
    249c:	9c 92       	st	X, r9
    249e:	8e 92       	st	-X, r8
    24a0:	11 97       	sbiw	r26, 0x01	; 1
    24a2:	33 82       	std	Z+3, r3	; 0x03
    24a4:	22 82       	std	Z+2, r2	; 0x02
    24a6:	d4 82       	std	Z+4, r13	; 0x04
    24a8:	15 82       	std	Z+5, r1	; 0x05
    24aa:	f7 82       	std	Z+7, r15	; 0x07
    24ac:	e6 82       	std	Z+6, r14	; 0x06
    24ae:	0e 94 13 18 	call	0x3026	; 0x3026 <sprintf>
    24b2:	8d b7       	in	r24, 0x3d	; 61
    24b4:	9e b7       	in	r25, 0x3e	; 62
    24b6:	08 96       	adiw	r24, 0x08	; 8
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	9e bf       	out	0x3e, r25	; 62
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	8d bf       	out	0x3d, r24	; 61
    24c2:	21 c0       	rjmp	.+66     	; 0x2506 <TapeMenu+0x148>
                   else sprintf(string,"[%02u:%05u] Papka",level,index);
    24c4:	ad b7       	in	r26, 0x3d	; 61
    24c6:	be b7       	in	r27, 0x3e	; 62
    24c8:	18 97       	sbiw	r26, 0x08	; 8
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	be bf       	out	0x3e, r27	; 62
    24d0:	0f be       	out	0x3f, r0	; 63
    24d2:	ad bf       	out	0x3d, r26	; 61
    24d4:	ed b7       	in	r30, 0x3d	; 61
    24d6:	fe b7       	in	r31, 0x3e	; 62
    24d8:	31 96       	adiw	r30, 0x01	; 1
    24da:	12 96       	adiw	r26, 0x02	; 2
    24dc:	9c 92       	st	X, r9
    24de:	8e 92       	st	-X, r8
    24e0:	11 97       	sbiw	r26, 0x01	; 1
    24e2:	81 eb       	ldi	r24, 0xB1	; 177
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	93 83       	std	Z+3, r25	; 0x03
    24e8:	82 83       	std	Z+2, r24	; 0x02
    24ea:	d4 82       	std	Z+4, r13	; 0x04
    24ec:	15 82       	std	Z+5, r1	; 0x05
    24ee:	f7 82       	std	Z+7, r15	; 0x07
    24f0:	e6 82       	std	Z+6, r14	; 0x06
    24f2:	0e 94 13 18 	call	0x3026	; 0x3026 <sprintf>
    24f6:	ad b7       	in	r26, 0x3d	; 61
    24f8:	be b7       	in	r27, 0x3e	; 62
    24fa:	18 96       	adiw	r26, 0x08	; 8
    24fc:	0f b6       	in	r0, 0x3f	; 63
    24fe:	f8 94       	cli
    2500:	be bf       	out	0x3e, r27	; 62
    2502:	0f be       	out	0x3f, r0	; 63
    2504:	ad bf       	out	0x3d, r26	; 61
  WH1602_SetTextUpLine(string);  
    2506:	84 e2       	ldi	r24, 0x24	; 36
    2508:	93 e0       	ldi	r25, 0x03	; 3
    250a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <WH1602_SetTextUpLine>
    250e:	80 ed       	ldi	r24, 0xD0	; 208
    2510:	97 e0       	ldi	r25, 0x07	; 7
    2512:	f2 01       	movw	r30, r4
    2514:	31 97       	sbiw	r30, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <TapeMenu+0x156>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2518:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251a:	d9 f7       	brne	.-10     	; 0x2512 <TapeMenu+0x154>
  _delay_ms(200);
  //ждём нажатий кнопок
  while(1)
  {
   if (BUTTON_UP_PIN&(1<<BUTTON_UP))
    251c:	83 9b       	sbis	0x10, 3	; 16
    251e:	14 c0       	rjmp	.+40     	; 0x2548 <TapeMenu+0x18a>
   {
    unsigned char i=1;
	if (BUTTON_CENTER_PIN&(1<<BUTTON_CENTER)) i=10;
    2520:	82 9b       	sbis	0x10, 2	; 16
    2522:	03 c0       	rjmp	.+6      	; 0x252a <TapeMenu+0x16c>
    2524:	9a e0       	ldi	r25, 0x0A	; 10
    2526:	c9 2e       	mov	r12, r25
    2528:	02 c0       	rjmp	.+4      	; 0x252e <TapeMenu+0x170>
    252a:	cc 24       	eor	r12, r12
    252c:	c3 94       	inc	r12
    252e:	87 01       	movw	r16, r14
	for(n=0;n<i;n++)
	{
	 if (FAT_PrevFileSearch()==true) index--;
    2530:	0e 94 5f 07 	call	0xebe	; 0xebe <FAT_PrevFileSearch>
    2534:	81 30       	cpi	r24, 0x01	; 1
    2536:	09 f0       	breq	.+2      	; 0x253a <TapeMenu+0x17c>
    2538:	8e cf       	rjmp	.-228    	; 0x2456 <TapeMenu+0x98>
    253a:	01 50       	subi	r16, 0x01	; 1
    253c:	10 40       	sbci	r17, 0x00	; 0
  {
   if (BUTTON_UP_PIN&(1<<BUTTON_UP))
   {
    unsigned char i=1;
	if (BUTTON_CENTER_PIN&(1<<BUTTON_CENTER)) i=10;
	for(n=0;n<i;n++)
    253e:	8e 2d       	mov	r24, r14
    2540:	80 1b       	sub	r24, r16
    2542:	8c 15       	cp	r24, r12
    2544:	a8 f3       	brcs	.-22     	; 0x2530 <TapeMenu+0x172>
    2546:	87 cf       	rjmp	.-242    	; 0x2456 <TapeMenu+0x98>
	 if (FAT_PrevFileSearch()==true) index--;
	                             else break;
	}
    break;
   }
   if (BUTTON_DOWN_PIN&(1<<BUTTON_DOWN))
    2548:	81 9b       	sbis	0x10, 1	; 16
    254a:	14 c0       	rjmp	.+40     	; 0x2574 <TapeMenu+0x1b6>
   {
    unsigned char i=1;
	if (BUTTON_CENTER_PIN&(1<<BUTTON_CENTER)) i=10;
    254c:	82 9b       	sbis	0x10, 2	; 16
    254e:	03 c0       	rjmp	.+6      	; 0x2556 <TapeMenu+0x198>
    2550:	8a e0       	ldi	r24, 0x0A	; 10
    2552:	c8 2e       	mov	r12, r24
    2554:	02 c0       	rjmp	.+4      	; 0x255a <TapeMenu+0x19c>
    2556:	cc 24       	eor	r12, r12
    2558:	c3 94       	inc	r12
    255a:	87 01       	movw	r16, r14
	for(n=0;n<i;n++)
	{
     if (FAT_NextFileSearch()==true) index++;
    255c:	0e 94 ed 08 	call	0x11da	; 0x11da <FAT_NextFileSearch>
    2560:	81 30       	cpi	r24, 0x01	; 1
    2562:	09 f0       	breq	.+2      	; 0x2566 <TapeMenu+0x1a8>
    2564:	78 cf       	rjmp	.-272    	; 0x2456 <TapeMenu+0x98>
    2566:	0f 5f       	subi	r16, 0xFF	; 255
    2568:	1f 4f       	sbci	r17, 0xFF	; 255
   }
   if (BUTTON_DOWN_PIN&(1<<BUTTON_DOWN))
   {
    unsigned char i=1;
	if (BUTTON_CENTER_PIN&(1<<BUTTON_CENTER)) i=10;
	for(n=0;n<i;n++)
    256a:	80 2f       	mov	r24, r16
    256c:	8e 19       	sub	r24, r14
    256e:	8c 15       	cp	r24, r12
    2570:	a8 f3       	brcs	.-22     	; 0x255c <TapeMenu+0x19e>
    2572:	71 cf       	rjmp	.-286    	; 0x2456 <TapeMenu+0x98>
     if (FAT_NextFileSearch()==true) index++;
	                             else break;
	}
    break;
   }   
   if (BUTTON_SELECT_PIN&(1<<BUTTON_SELECT))
    2574:	84 9b       	sbis	0x10, 4	; 16
    2576:	d2 cf       	rjmp	.-92     	; 0x251c <TapeMenu+0x15e>
   {
    if (Directory==0) OutputImage();//для файла - запускаем на выполнение
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	88 23       	and	r24, r24
    257c:	19 f4       	brne	.+6      	; 0x2584 <TapeMenu+0x1c6>
    257e:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <OutputImage>
    2582:	6a cf       	rjmp	.-300    	; 0x2458 <TapeMenu+0x9a>
    else
	{
	 if (level<20) level_index[level]=index;//запоминаем достигнутый уровень
    2584:	b3 e1       	ldi	r27, 0x13	; 19
    2586:	bd 15       	cp	r27, r13
    2588:	40 f0       	brcs	.+16     	; 0x259a <TapeMenu+0x1dc>
    258a:	ed 2d       	mov	r30, r13
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	ee 0f       	add	r30, r30
    2590:	ff 1f       	adc	r31, r31
    2592:	ea 0d       	add	r30, r10
    2594:	fb 1d       	adc	r31, r11
    2596:	f2 86       	std	Z+10, r15	; 0x0a
    2598:	e1 86       	std	Z+9, r14	; 0x09
     if (Directory<0)//если мы вышли на уровень вверх
    259a:	87 ff       	sbrs	r24, 7
    259c:	04 c0       	rjmp	.+8      	; 0x25a6 <TapeMenu+0x1e8>
	 {
	  if (level>0) level--;
    259e:	dd 20       	and	r13, r13
    25a0:	71 f0       	breq	.+28     	; 0x25be <TapeMenu+0x200>
    25a2:	da 94       	dec	r13
    25a4:	0c c0       	rjmp	.+24     	; 0x25be <TapeMenu+0x200>
	 }
	 else
	 {
	  level++;
    25a6:	d3 94       	inc	r13
      if (level<20) level_index[level]=1;
    25a8:	83 e1       	ldi	r24, 0x13	; 19
    25aa:	8d 15       	cp	r24, r13
    25ac:	40 f0       	brcs	.+16     	; 0x25be <TapeMenu+0x200>
    25ae:	ed 2d       	mov	r30, r13
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	ee 0f       	add	r30, r30
    25b4:	ff 1f       	adc	r31, r31
    25b6:	ea 0d       	add	r30, r10
    25b8:	fb 1d       	adc	r31, r11
    25ba:	72 86       	std	Z+10, r7	; 0x0a
    25bc:	61 86       	std	Z+9, r6	; 0x09
	 }
     FAT_EnterDirectory(FirstCluster);//заходим в директорию	
    25be:	6a 81       	ldd	r22, Y+2	; 0x02
    25c0:	7b 81       	ldd	r23, Y+3	; 0x03
    25c2:	8c 81       	ldd	r24, Y+4	; 0x04
    25c4:	9d 81       	ldd	r25, Y+5	; 0x05
    25c6:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <FAT_EnterDirectory>
	 //проматываем до выбранного файла
	 index=1;
	 if (level<20)
    25ca:	93 e1       	ldi	r25, 0x13	; 19
    25cc:	9d 15       	cp	r25, r13
    25ce:	20 f4       	brcc	.+8      	; 0x25d8 <TapeMenu+0x21a>
    25d0:	b1 e0       	ldi	r27, 0x01	; 1
    25d2:	eb 2e       	mov	r14, r27
    25d4:	f1 2c       	mov	r15, r1
    25d6:	40 cf       	rjmp	.-384    	; 0x2458 <TapeMenu+0x9a>
	 {
	  for(unsigned short s=1;s<level_index[level];s++)
    25d8:	ed 2d       	mov	r30, r13
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	ee 0f       	add	r30, r30
    25de:	ff 1f       	adc	r31, r31
    25e0:	ea 0d       	add	r30, r10
    25e2:	fb 1d       	adc	r31, r11
    25e4:	01 85       	ldd	r16, Z+9	; 0x09
    25e6:	12 85       	ldd	r17, Z+10	; 0x0a
    25e8:	71 e0       	ldi	r23, 0x01	; 1
    25ea:	e7 2e       	mov	r14, r23
    25ec:	f1 2c       	mov	r15, r1
    25ee:	08 c0       	rjmp	.+16     	; 0x2600 <TapeMenu+0x242>
	  {
       if (FAT_NextFileSearch()==true) index++;
    25f0:	0e 94 ed 08 	call	0x11da	; 0x11da <FAT_NextFileSearch>
    25f4:	81 30       	cpi	r24, 0x01	; 1
    25f6:	09 f0       	breq	.+2      	; 0x25fa <TapeMenu+0x23c>
    25f8:	2f cf       	rjmp	.-418    	; 0x2458 <TapeMenu+0x9a>
    25fa:	08 94       	sec
    25fc:	e1 1c       	adc	r14, r1
    25fe:	f1 1c       	adc	r15, r1
     FAT_EnterDirectory(FirstCluster);//заходим в директорию	
	 //проматываем до выбранного файла
	 index=1;
	 if (level<20)
	 {
	  for(unsigned short s=1;s<level_index[level];s++)
    2600:	e0 16       	cp	r14, r16
    2602:	f1 06       	cpc	r15, r17
    2604:	a8 f3       	brcs	.-22     	; 0x25f0 <TapeMenu+0x232>
    2606:	28 cf       	rjmp	.-432    	; 0x2458 <TapeMenu+0x9a>
	}
    break;
   }
  }
 } 
}
    2608:	e1 96       	adiw	r28, 0x31	; 49
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	de bf       	out	0x3e, r29	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	cf 91       	pop	r28
    2616:	df 91       	pop	r29
    2618:	1f 91       	pop	r17
    261a:	0f 91       	pop	r16
    261c:	ff 90       	pop	r15
    261e:	ef 90       	pop	r14
    2620:	df 90       	pop	r13
    2622:	cf 90       	pop	r12
    2624:	bf 90       	pop	r11
    2626:	af 90       	pop	r10
    2628:	9f 90       	pop	r9
    262a:	8f 90       	pop	r8
    262c:	7f 90       	pop	r7
    262e:	6f 90       	pop	r6
    2630:	5f 90       	pop	r5
    2632:	4f 90       	pop	r4
    2634:	3f 90       	pop	r3
    2636:	2f 90       	pop	r2
    2638:	08 95       	ret

0000263a <SD_Init>:
bool SD_ReadBlock(unsigned long BlockAddr,unsigned char *Addr);//считать блок в 512 байт в память
//----------------------------------------------------------------------------------------------------
//инициализация карты памяти
//----------------------------------------------------------------------------------------------------
void SD_Init(void)
{
    263a:	ff 92       	push	r15
    263c:	0f 93       	push	r16
    263e:	1f 93       	push	r17
    2640:	cf 93       	push	r28
    2642:	df 93       	push	r29
 WH1602_SetTextUpLine("");
    2644:	8f e9       	ldi	r24, 0x9F	; 159
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	0e 94 71 02 	call	0x4e2	; 0x4e2 <WH1602_SetTextUpLine>
 WH1602_SetTextDownLine("");
    264c:	8f e9       	ldi	r24, 0x9F	; 159
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <WH1602_SetTextDownLine>
 SD_CS_DDR|=(1<<SD_CS);
    2654:	bc 9a       	sbi	0x17, 4	; 23
 SD_DI_DDR|=(1<<SD_DI);
    2656:	bd 9a       	sbi	0x17, 5	; 23
 SD_SCK_DDR|=(1<<SD_SCK);
    2658:	bf 9a       	sbi	0x17, 7	; 23
 SD_DO_DDR&=0xff^(1<<SD_DO);
    265a:	be 98       	cbi	0x17, 6	; 23
    265c:	88 ee       	ldi	r24, 0xE8	; 232
    265e:	93 e0       	ldi	r25, 0x03	; 3
    2660:	20 e9       	ldi	r18, 0x90	; 144
    2662:	31 e0       	ldi	r19, 0x01	; 1
    2664:	f9 01       	movw	r30, r18
    2666:	31 97       	sbiw	r30, 0x01	; 1
    2668:	f1 f7       	brne	.-4      	; 0x2666 <SD_Init+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266c:	d9 f7       	brne	.-10     	; 0x2664 <SD_Init+0x2a>
 //вывод SPI SS в режиме MASTER сконфигурирован как выход и на SPI не влияет
 _delay_ms(100);//пауза, пока карта не включится
 unsigned char n;
 //шлём не менее 74 импульсов синхронизации при высоком уровне на CS и DI 
 SD_CS_PORT|=(1<<SD_CS);
    266e:	c4 9a       	sbi	0x18, 4	; 24
    2670:	88 e8       	ldi	r24, 0x88	; 136
    2672:	93 e1       	ldi	r25, 0x13	; 19
    2674:	20 e9       	ldi	r18, 0x90	; 144
    2676:	31 e0       	ldi	r19, 0x01	; 1
    2678:	f9 01       	movw	r30, r18
    267a:	31 97       	sbiw	r30, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <SD_Init+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2680:	d9 f7       	brne	.-10     	; 0x2678 <SD_Init+0x3e>
 _delay_ms(500);
 SD_DI_PORT|=(1<<SD_DI);
    2682:	c5 9a       	sbi	0x18, 5	; 24
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	40 ea       	ldi	r20, 0xA0	; 160
    2688:	5f e0       	ldi	r21, 0x0F	; 15
 for(n=0;n<250;n++)
 {
  SD_SCK_PORT|=(1<<SD_SCK);
    268a:	c7 9a       	sbi	0x18, 7	; 24
    268c:	ca 01       	movw	r24, r20
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	f1 f7       	brne	.-4      	; 0x268e <SD_Init+0x54>
  _delay_ms(1);
  SD_SCK_PORT&=0xff^(1<<SD_SCK);
    2692:	c7 98       	cbi	0x18, 7	; 24
    2694:	ca 01       	movw	r24, r20
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	f1 f7       	brne	.-4      	; 0x2696 <SD_Init+0x5c>
 unsigned char n;
 //шлём не менее 74 импульсов синхронизации при высоком уровне на CS и DI 
 SD_CS_PORT|=(1<<SD_CS);
 _delay_ms(500);
 SD_DI_PORT|=(1<<SD_DI);
 for(n=0;n<250;n++)
    269a:	2f 5f       	subi	r18, 0xFF	; 255
    269c:	2a 3f       	cpi	r18, 0xFA	; 250
    269e:	a9 f7       	brne	.-22     	; 0x268a <SD_Init+0x50>
  SD_SCK_PORT|=(1<<SD_SCK);
  _delay_ms(1);
  SD_SCK_PORT&=0xff^(1<<SD_SCK);
  _delay_ms(1);
 }
 SD_CS_PORT&=0xff^(1<<SD_CS);
    26a0:	c4 98       	cbi	0x18, 4	; 24
 //настраиваем SPI
 SPCR=(0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(0<<SPR0);
    26a2:	80 e5       	ldi	r24, 0x50	; 80
    26a4:	8d b9       	out	0x0d, r24	; 13
 SPSR=(1<<SPI2X);//удвоенная скорость SPI
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	8e b9       	out	0x0e, r24	; 14
    26aa:	88 ee       	ldi	r24, 0xE8	; 232
    26ac:	93 e0       	ldi	r25, 0x03	; 3
    26ae:	20 e9       	ldi	r18, 0x90	; 144
    26b0:	31 e0       	ldi	r19, 0x01	; 1
    26b2:	f9 01       	movw	r30, r18
    26b4:	31 97       	sbiw	r30, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <SD_Init+0x7a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ba:	d9 f7       	brne	.-10     	; 0x26b2 <SD_Init+0x78>
 _delay_ms(100);
 unsigned char answer=SD_SendCommandR1(0x40,0x00,0x00,0x00,0x00);//CMD0 
    26bc:	80 e4       	ldi	r24, 0x40	; 64
    26be:	60 e0       	ldi	r22, 0x00	; 0
    26c0:	40 e0       	ldi	r20, 0x00	; 0
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	00 e0       	ldi	r16, 0x00	; 0
    26c6:	0e 94 2e 04 	call	0x85c	; 0x85c <SD_SendCommandR1>
 if (answer!=1)//ошибка
    26ca:	81 30       	cpi	r24, 0x01	; 1
    26cc:	91 f0       	breq	.+36     	; 0x26f2 <SD_Init+0xb8>
 {
  WH1602_SetTextProgmemUpLine(Text_SD_No_SPI_Up);
    26ce:	81 e2       	ldi	r24, 0x21	; 33
    26d0:	91 e0       	ldi	r25, 0x01	; 1
    26d2:	0e 94 53 03 	call	0x6a6	; 0x6a6 <WH1602_SetTextProgmemUpLine>
  WH1602_SetTextProgmemDownLine(Text_SD_No_SPI_Down);
    26d6:	8a e3       	ldi	r24, 0x3A	; 58
    26d8:	91 e0       	ldi	r25, 0x01	; 1
    26da:	0e 94 be 03 	call	0x77c	; 0x77c <WH1602_SetTextProgmemDownLine>
    26de:	80 e3       	ldi	r24, 0x30	; 48
    26e0:	95 e7       	ldi	r25, 0x75	; 117
    26e2:	20 e9       	ldi	r18, 0x90	; 144
    26e4:	31 e0       	ldi	r19, 0x01	; 1
    26e6:	f9 01       	movw	r30, r18
    26e8:	31 97       	sbiw	r30, 0x01	; 1
    26ea:	f1 f7       	brne	.-4      	; 0x26e8 <SD_Init+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ee:	d9 f7       	brne	.-10     	; 0x26e6 <SD_Init+0xac>
    26f0:	80 c0       	rjmp	.+256    	; 0x27f2 <SD_Init+0x1b8>
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
    26f2:	8f ef       	ldi	r24, 0xFF	; 255
    26f4:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
    26f6:	77 9b       	sbis	0x0e, 7	; 14
    26f8:	fe cf       	rjmp	.-4      	; 0x26f6 <SD_Init+0xbc>
 unsigned char res=SPDR;
    26fa:	8f b1       	in	r24, 0x0f	; 15
    26fc:	c0 e0       	ldi	r28, 0x00	; 0
    26fe:	d0 e0       	ldi	r29, 0x00	; 0
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
    2700:	ff 24       	eor	r15, r15
    2702:	fa 94       	dec	r15
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2704:	15 e0       	ldi	r17, 0x05	; 5
 }
 SD_TransmitData(0xff);
 unsigned short m;
 for(m=0;m<65535;m++)
 {
  answer=SD_SendCommandR1(0x41,0x00,0x00,0x00,0x00);//CMD1
    2706:	81 e4       	ldi	r24, 0x41	; 65
    2708:	60 e0       	ldi	r22, 0x00	; 0
    270a:	40 e0       	ldi	r20, 0x00	; 0
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	00 e0       	ldi	r16, 0x00	; 0
    2710:	0e 94 2e 04 	call	0x85c	; 0x85c <SD_SendCommandR1>
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
    2714:	ff b8       	out	0x0f, r15	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
    2716:	77 9b       	sbis	0x0e, 7	; 14
    2718:	fe cf       	rjmp	.-4      	; 0x2716 <SD_Init+0xdc>
 unsigned char res=SPDR;
    271a:	9f b1       	in	r25, 0x0f	; 15
 unsigned short m;
 for(m=0;m<65535;m++)
 {
  answer=SD_SendCommandR1(0x41,0x00,0x00,0x00,0x00);//CMD1
  SD_TransmitData(0xff);
  if (answer==0) break;//инициализация успешна
    271c:	88 23       	and	r24, r24
    271e:	b1 f0       	breq	.+44     	; 0x274c <SD_Init+0x112>
    2720:	81 2f       	mov	r24, r17
    2722:	8a 95       	dec	r24
    2724:	f1 f7       	brne	.-4      	; 0x2722 <SD_Init+0xe8>
  _delay_ms(3000);
  return;
 }
 SD_TransmitData(0xff);
 unsigned short m;
 for(m=0;m<65535;m++)
    2726:	21 96       	adiw	r28, 0x01	; 1
    2728:	8f ef       	ldi	r24, 0xFF	; 255
    272a:	cf 3f       	cpi	r28, 0xFF	; 255
    272c:	d8 07       	cpc	r29, r24
    272e:	59 f7       	brne	.-42     	; 0x2706 <SD_Init+0xcc>
  if (answer==0) break;//инициализация успешна
  _delay_us(1);
 }
 if (m==65535)
 {
  WH1602_SetTextProgmemUpLine(Text_SD_No_Response);
    2730:	88 e4       	ldi	r24, 0x48	; 72
    2732:	91 e0       	ldi	r25, 0x01	; 1
    2734:	0e 94 53 03 	call	0x6a6	; 0x6a6 <WH1602_SetTextProgmemUpLine>
    2738:	80 e3       	ldi	r24, 0x30	; 48
    273a:	95 e7       	ldi	r25, 0x75	; 117
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    273c:	20 e9       	ldi	r18, 0x90	; 144
    273e:	31 e0       	ldi	r19, 0x01	; 1
    2740:	f9 01       	movw	r30, r18
    2742:	31 97       	sbiw	r30, 0x01	; 1
    2744:	f1 f7       	brne	.-4      	; 0x2742 <SD_Init+0x108>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2746:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2748:	d9 f7       	brne	.-10     	; 0x2740 <SD_Init+0x106>
    274a:	53 c0       	rjmp	.+166    	; 0x27f2 <SD_Init+0x1b8>
  _delay_ms(3000); 
  return; 
 }
 //узнаем объём карты памяти
 unsigned long SD_Size=SD_GetSize();
    274c:	0e 94 9a 04 	call	0x934	; 0x934 <SD_GetSize>
    2750:	9b 01       	movw	r18, r22
    2752:	ac 01       	movw	r20, r24
 if (SD_Size==0xffff)//ошибка
    2754:	2f 3f       	cpi	r18, 0xFF	; 255
    2756:	9f ef       	ldi	r25, 0xFF	; 255
    2758:	39 07       	cpc	r19, r25
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	49 07       	cpc	r20, r25
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	59 07       	cpc	r21, r25
    2762:	91 f4       	brne	.+36     	; 0x2788 <SD_Init+0x14e>
 {
  WH1602_SetTextProgmemUpLine(Text_SD_Size_Error_Up);
    2764:	89 e5       	ldi	r24, 0x59	; 89
    2766:	91 e0       	ldi	r25, 0x01	; 1
    2768:	0e 94 53 03 	call	0x6a6	; 0x6a6 <WH1602_SetTextProgmemUpLine>
  WH1602_SetTextProgmemDownLine(Text_SD_Size_Error_Down);
    276c:	80 e7       	ldi	r24, 0x70	; 112
    276e:	91 e0       	ldi	r25, 0x01	; 1
    2770:	0e 94 be 03 	call	0x77c	; 0x77c <WH1602_SetTextProgmemDownLine>
    2774:	80 e3       	ldi	r24, 0x30	; 48
    2776:	95 e7       	ldi	r25, 0x75	; 117
    2778:	20 e9       	ldi	r18, 0x90	; 144
    277a:	31 e0       	ldi	r19, 0x01	; 1
    277c:	f9 01       	movw	r30, r18
    277e:	31 97       	sbiw	r30, 0x01	; 1
    2780:	f1 f7       	brne	.-4      	; 0x277e <SD_Init+0x144>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2782:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2784:	d9 f7       	brne	.-10     	; 0x277c <SD_Init+0x142>
    2786:	35 c0       	rjmp	.+106    	; 0x27f2 <SD_Init+0x1b8>
  _delay_ms(3000);
  return;
 }
 unsigned short size=(unsigned short)(SD_Size>>20);
 sprintf(string,"%i МБ",size);
    2788:	00 d0       	rcall	.+0      	; 0x278a <SD_Init+0x150>
    278a:	00 d0       	rcall	.+0      	; 0x278c <SD_Init+0x152>
    278c:	00 d0       	rcall	.+0      	; 0x278e <SD_Init+0x154>
    278e:	ed b7       	in	r30, 0x3d	; 61
    2790:	fe b7       	in	r31, 0x3e	; 62
    2792:	31 96       	adiw	r30, 0x01	; 1
    2794:	04 e2       	ldi	r16, 0x24	; 36
    2796:	13 e0       	ldi	r17, 0x03	; 3
    2798:	ad b7       	in	r26, 0x3d	; 61
    279a:	be b7       	in	r27, 0x3e	; 62
    279c:	12 96       	adiw	r26, 0x02	; 2
    279e:	1c 93       	st	X, r17
    27a0:	0e 93       	st	-X, r16
    27a2:	11 97       	sbiw	r26, 0x01	; 1
    27a4:	83 ec       	ldi	r24, 0xC3	; 195
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	93 83       	std	Z+3, r25	; 0x03
    27aa:	82 83       	std	Z+2, r24	; 0x02
    27ac:	74 e1       	ldi	r23, 0x14	; 20
    27ae:	56 95       	lsr	r21
    27b0:	47 95       	ror	r20
    27b2:	37 95       	ror	r19
    27b4:	27 95       	ror	r18
    27b6:	7a 95       	dec	r23
    27b8:	d1 f7       	brne	.-12     	; 0x27ae <SD_Init+0x174>
    27ba:	35 83       	std	Z+5, r19	; 0x05
    27bc:	24 83       	std	Z+4, r18	; 0x04
    27be:	0e 94 13 18 	call	0x3026	; 0x3026 <sprintf>
 WH1602_SetTextProgmemUpLine(Text_SD_Size);
    27c2:	8d b7       	in	r24, 0x3d	; 61
    27c4:	9e b7       	in	r25, 0x3e	; 62
    27c6:	06 96       	adiw	r24, 0x06	; 6
    27c8:	0f b6       	in	r0, 0x3f	; 63
    27ca:	f8 94       	cli
    27cc:	9e bf       	out	0x3e, r25	; 62
    27ce:	0f be       	out	0x3f, r0	; 63
    27d0:	8d bf       	out	0x3d, r24	; 61
    27d2:	81 e8       	ldi	r24, 0x81	; 129
    27d4:	91 e0       	ldi	r25, 0x01	; 1
    27d6:	0e 94 53 03 	call	0x6a6	; 0x6a6 <WH1602_SetTextProgmemUpLine>
 WH1602_SetTextDownLine(string);
    27da:	c8 01       	movw	r24, r16
    27dc:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <WH1602_SetTextDownLine>
    27e0:	80 e1       	ldi	r24, 0x10	; 16
    27e2:	97 e2       	ldi	r25, 0x27	; 39
    27e4:	20 e9       	ldi	r18, 0x90	; 144
    27e6:	31 e0       	ldi	r19, 0x01	; 1
    27e8:	f9 01       	movw	r30, r18
    27ea:	31 97       	sbiw	r30, 0x01	; 1
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <SD_Init+0x1b0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f0:	d9 f7       	brne	.-10     	; 0x27e8 <SD_Init+0x1ae>
 _delay_ms(1000); 
}
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	1f 91       	pop	r17
    27f8:	0f 91       	pop	r16
    27fa:	ff 90       	pop	r15
    27fc:	08 95       	ret

000027fe <FAT_Init>:
bool FAT_WriteBlock(unsigned short *BlockSize,unsigned short Block);//записать в ОЗУ блок файла
//----------------------------------------------------------------------------------------------------
//Инициализация FAT
//----------------------------------------------------------------------------------------------------
void FAT_Init(void)
{
    27fe:	6f 92       	push	r6
    2800:	7f 92       	push	r7
    2802:	8f 92       	push	r8
    2804:	9f 92       	push	r9
    2806:	af 92       	push	r10
    2808:	bf 92       	push	r11
    280a:	cf 92       	push	r12
    280c:	df 92       	push	r13
    280e:	ef 92       	push	r14
    2810:	ff 92       	push	r15
    2812:	0f 93       	push	r16
    2814:	1f 93       	push	r17
 WH1602_SetTextUpLine("");
    2816:	8f e9       	ldi	r24, 0x9F	; 159
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <WH1602_SetTextUpLine>
 WH1602_SetTextDownLine("");
    281e:	8f e9       	ldi	r24, 0x9F	; 159
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <WH1602_SetTextDownLine>

 LastReadSector=0xffffffffUL;
    2826:	8f ef       	ldi	r24, 0xFF	; 255
    2828:	9f ef       	ldi	r25, 0xFF	; 255
    282a:	af ef       	ldi	r26, 0xFF	; 255
    282c:	bf ef       	ldi	r27, 0xFF	; 255
    282e:	80 93 0d 01 	sts	0x010D, r24
    2832:	90 93 0e 01 	sts	0x010E, r25
    2836:	a0 93 0f 01 	sts	0x010F, r26
    283a:	b0 93 10 01 	sts	0x0110, r27
 //ищем FAT
 FATOffset=0;
    283e:	10 92 1a 01 	sts	0x011A, r1
    2842:	10 92 1b 01 	sts	0x011B, r1
    2846:	10 92 1c 01 	sts	0x011C, r1
    284a:	10 92 1d 01 	sts	0x011D, r1
    284e:	ee 24       	eor	r14, r14
    2850:	ff 24       	eor	r15, r15
    2852:	87 01       	movw	r16, r14
 for(unsigned long fo=0;fo<33554432UL;fo++)
 {
  unsigned char b=GetByte(fo); 
    2854:	c8 01       	movw	r24, r16
    2856:	b7 01       	movw	r22, r14
    2858:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
  if (b==233 || b==235)
    285c:	69 3e       	cpi	r22, 0xE9	; 233
    285e:	11 f0       	breq	.+4      	; 0x2864 <FAT_Init+0x66>
    2860:	6b 3e       	cpi	r22, 0xEB	; 235
    2862:	e9 f4       	brne	.+58     	; 0x289e <FAT_Init+0xa0>
  {
   b=GetByte(fo+511UL);
    2864:	c8 01       	movw	r24, r16
    2866:	b7 01       	movw	r22, r14
    2868:	61 50       	subi	r22, 0x01	; 1
    286a:	7e 4f       	sbci	r23, 0xFE	; 254
    286c:	8f 4f       	sbci	r24, 0xFF	; 255
    286e:	9f 4f       	sbci	r25, 0xFF	; 255
    2870:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
   if (b==170)   
    2874:	6a 3a       	cpi	r22, 0xAA	; 170
    2876:	99 f4       	brne	.+38     	; 0x289e <FAT_Init+0xa0>
   {
    b=GetByte(fo+510UL);
    2878:	c8 01       	movw	r24, r16
    287a:	b7 01       	movw	r22, r14
    287c:	62 50       	subi	r22, 0x02	; 2
    287e:	7e 4f       	sbci	r23, 0xFE	; 254
    2880:	8f 4f       	sbci	r24, 0xFF	; 255
    2882:	9f 4f       	sbci	r25, 0xFF	; 255
    2884:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    if (b==85)
    2888:	65 35       	cpi	r22, 0x55	; 85
    288a:	49 f4       	brne	.+18     	; 0x289e <FAT_Init+0xa0>
	{
     FATOffset=fo;
    288c:	e0 92 1a 01 	sts	0x011A, r14
    2890:	f0 92 1b 01 	sts	0x011B, r15
    2894:	00 93 1c 01 	sts	0x011C, r16
    2898:	10 93 1d 01 	sts	0x011D, r17
    289c:	0e c0       	rjmp	.+28     	; 0x28ba <FAT_Init+0xbc>
 WH1602_SetTextDownLine("");

 LastReadSector=0xffffffffUL;
 //ищем FAT
 FATOffset=0;
 for(unsigned long fo=0;fo<33554432UL;fo++)
    289e:	08 94       	sec
    28a0:	e1 1c       	adc	r14, r1
    28a2:	f1 1c       	adc	r15, r1
    28a4:	01 1d       	adc	r16, r1
    28a6:	11 1d       	adc	r17, r1
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	e2 16       	cp	r14, r18
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	f2 06       	cpc	r15, r18
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	02 07       	cpc	r16, r18
    28b4:	22 e0       	ldi	r18, 0x02	; 2
    28b6:	12 07       	cpc	r17, r18
    28b8:	69 f6       	brne	.-102    	; 0x2854 <FAT_Init+0x56>
     break;
	}
   } 
  }
 }
 LastReadSector=0xffffffffUL;
    28ba:	8f ef       	ldi	r24, 0xFF	; 255
    28bc:	9f ef       	ldi	r25, 0xFF	; 255
    28be:	af ef       	ldi	r26, 0xFF	; 255
    28c0:	bf ef       	ldi	r27, 0xFF	; 255
    28c2:	80 93 0d 01 	sts	0x010D, r24
    28c6:	90 93 0e 01 	sts	0x010E, r25
    28ca:	a0 93 0f 01 	sts	0x010F, r26
    28ce:	b0 93 10 01 	sts	0x0110, r27
 
 SecPerClus=GetByte(BPB_SecPerClus);//количество секторов в кластере
    28d2:	6d e0       	ldi	r22, 0x0D	; 13
    28d4:	70 e0       	ldi	r23, 0x00	; 0
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    28de:	60 93 41 03 	sts	0x0341, r22
    28e2:	70 93 42 03 	sts	0x0342, r23
    28e6:	80 93 43 03 	sts	0x0343, r24
    28ea:	90 93 44 03 	sts	0x0344, r25
 BytsPerSec=GetShort(BPB_BytsPerSec);//количество байт в секторе
    28ee:	6b e0       	ldi	r22, 0x0B	; 11
    28f0:	70 e0       	ldi	r23, 0x00	; 0
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	0e 94 42 06 	call	0xc84	; 0xc84 <GetShort>
    28fa:	60 93 69 03 	sts	0x0369, r22
    28fe:	70 93 6a 03 	sts	0x036A, r23
    2902:	80 93 6b 03 	sts	0x036B, r24
    2906:	90 93 6c 03 	sts	0x036C, r25
 ResvdSecCnt=GetShort(BPB_ResvdSecCnt);//размер резервной области
    290a:	6e e0       	ldi	r22, 0x0E	; 14
    290c:	70 e0       	ldi	r23, 0x00	; 0
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	0e 94 42 06 	call	0xc84	; 0xc84 <GetShort>
    2916:	60 93 49 03 	sts	0x0349, r22
    291a:	70 93 4a 03 	sts	0x034A, r23
    291e:	80 93 4b 03 	sts	0x034B, r24
    2922:	90 93 4c 03 	sts	0x034C, r25
 
 //определяем количество секторов, занятых корневой директорией 
 RootDirSectors=(unsigned long)(ceil((GetShort(BPB_RootEntCnt)*32UL+(BytsPerSec-1UL))/BytsPerSec));
    2926:	61 e1       	ldi	r22, 0x11	; 17
    2928:	70 e0       	ldi	r23, 0x00	; 0
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	0e 94 42 06 	call	0xc84	; 0xc84 <GetShort>
    2932:	7b 01       	movw	r14, r22
    2934:	8c 01       	movw	r16, r24
    2936:	20 91 69 03 	lds	r18, 0x0369
    293a:	30 91 6a 03 	lds	r19, 0x036A
    293e:	40 91 6b 03 	lds	r20, 0x036B
    2942:	50 91 6c 03 	lds	r21, 0x036C
    2946:	ca 01       	movw	r24, r20
    2948:	b9 01       	movw	r22, r18
    294a:	61 50       	subi	r22, 0x01	; 1
    294c:	70 40       	sbci	r23, 0x00	; 0
    294e:	80 40       	sbci	r24, 0x00	; 0
    2950:	90 40       	sbci	r25, 0x00	; 0
    2952:	e5 e0       	ldi	r30, 0x05	; 5
    2954:	ee 0c       	add	r14, r14
    2956:	ff 1c       	adc	r15, r15
    2958:	00 1f       	adc	r16, r16
    295a:	11 1f       	adc	r17, r17
    295c:	ea 95       	dec	r30
    295e:	d1 f7       	brne	.-12     	; 0x2954 <FAT_Init+0x156>
    2960:	6e 0d       	add	r22, r14
    2962:	7f 1d       	adc	r23, r15
    2964:	80 1f       	adc	r24, r16
    2966:	91 1f       	adc	r25, r17
    2968:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__udivmodsi4>
    296c:	ca 01       	movw	r24, r20
    296e:	b9 01       	movw	r22, r18
    2970:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__floatunsisf>
    2974:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <ceil>
    2978:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <__fixunssfsi>
    297c:	60 93 75 03 	sts	0x0375, r22
    2980:	70 93 76 03 	sts	0x0376, r23
    2984:	80 93 77 03 	sts	0x0377, r24
    2988:	90 93 78 03 	sts	0x0378, r25
 //определяем размер таблицы FAT
 FATSz=GetShort(BPB_FATSz16);//размер одной таблицы FAT в секторах
    298c:	66 e1       	ldi	r22, 0x16	; 22
    298e:	70 e0       	ldi	r23, 0x00	; 0
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	0e 94 42 06 	call	0xc84	; 0xc84 <GetShort>
    2998:	60 93 4d 03 	sts	0x034D, r22
    299c:	70 93 4e 03 	sts	0x034E, r23
    29a0:	80 93 4f 03 	sts	0x034F, r24
    29a4:	90 93 50 03 	sts	0x0350, r25
 if (FATSz==0) FATSz=GetLong(BPB_FATSz32);
    29a8:	61 15       	cp	r22, r1
    29aa:	71 05       	cpc	r23, r1
    29ac:	81 05       	cpc	r24, r1
    29ae:	91 05       	cpc	r25, r1
    29b0:	71 f4       	brne	.+28     	; 0x29ce <FAT_Init+0x1d0>
    29b2:	64 e2       	ldi	r22, 0x24	; 36
    29b4:	70 e0       	ldi	r23, 0x00	; 0
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	0e 94 9c 09 	call	0x1338	; 0x1338 <GetLong>
    29be:	60 93 4d 03 	sts	0x034D, r22
    29c2:	70 93 4e 03 	sts	0x034E, r23
    29c6:	80 93 4f 03 	sts	0x034F, r24
    29ca:	90 93 50 03 	sts	0x0350, r25
 //определяем количество секторов в регионе данных диска
 unsigned long TotSec=GetShort(BPB_TotSec16);//общее количество секторов на диске
    29ce:	63 e1       	ldi	r22, 0x13	; 19
    29d0:	70 e0       	ldi	r23, 0x00	; 0
    29d2:	80 e0       	ldi	r24, 0x00	; 0
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	0e 94 42 06 	call	0xc84	; 0xc84 <GetShort>
    29da:	5b 01       	movw	r10, r22
    29dc:	6c 01       	movw	r12, r24
 if (TotSec==0) TotSec=GetLong(BPB_TotSec32);
    29de:	61 15       	cp	r22, r1
    29e0:	71 05       	cpc	r23, r1
    29e2:	81 05       	cpc	r24, r1
    29e4:	91 05       	cpc	r25, r1
    29e6:	41 f4       	brne	.+16     	; 0x29f8 <FAT_Init+0x1fa>
    29e8:	60 e2       	ldi	r22, 0x20	; 32
    29ea:	70 e0       	ldi	r23, 0x00	; 0
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	0e 94 9c 09 	call	0x1338	; 0x1338 <GetLong>
    29f4:	5b 01       	movw	r10, r22
    29f6:	6c 01       	movw	r12, r24
 DataSec=TotSec-(ResvdSecCnt+GetByte(BPB_NumFATs)*FATSz+RootDirSectors);
    29f8:	e0 90 49 03 	lds	r14, 0x0349
    29fc:	f0 90 4a 03 	lds	r15, 0x034A
    2a00:	00 91 4b 03 	lds	r16, 0x034B
    2a04:	10 91 4c 03 	lds	r17, 0x034C
    2a08:	60 e1       	ldi	r22, 0x10	; 16
    2a0a:	70 e0       	ldi	r23, 0x00	; 0
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    2a14:	20 91 75 03 	lds	r18, 0x0375
    2a18:	30 91 76 03 	lds	r19, 0x0376
    2a1c:	40 91 77 03 	lds	r20, 0x0377
    2a20:	50 91 78 03 	lds	r21, 0x0378
    2a24:	35 01       	movw	r6, r10
    2a26:	46 01       	movw	r8, r12
    2a28:	6e 18       	sub	r6, r14
    2a2a:	7f 08       	sbc	r7, r15
    2a2c:	80 0a       	sbc	r8, r16
    2a2e:	91 0a       	sbc	r9, r17
    2a30:	84 01       	movw	r16, r8
    2a32:	73 01       	movw	r14, r6
    2a34:	e2 1a       	sub	r14, r18
    2a36:	f3 0a       	sbc	r15, r19
    2a38:	04 0b       	sbc	r16, r20
    2a3a:	15 0b       	sbc	r17, r21
    2a3c:	20 91 4d 03 	lds	r18, 0x034D
    2a40:	30 91 4e 03 	lds	r19, 0x034E
    2a44:	40 91 4f 03 	lds	r20, 0x034F
    2a48:	50 91 50 03 	lds	r21, 0x0350
    2a4c:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__mulsi3>
    2a50:	e6 1a       	sub	r14, r22
    2a52:	f7 0a       	sbc	r15, r23
    2a54:	08 0b       	sbc	r16, r24
    2a56:	19 0b       	sbc	r17, r25
    2a58:	e0 92 6d 03 	sts	0x036D, r14
    2a5c:	f0 92 6e 03 	sts	0x036E, r15
    2a60:	00 93 6f 03 	sts	0x036F, r16
    2a64:	10 93 70 03 	sts	0x0370, r17
 //определяем количество кластеров для данных (которые начинаются с номера 2! Это КОЛИЧЕСТВО, а не номер последнего кластера)
 CountofClusters=(unsigned long)floor(DataSec/SecPerClus);
    2a68:	20 91 41 03 	lds	r18, 0x0341
    2a6c:	30 91 42 03 	lds	r19, 0x0342
    2a70:	40 91 43 03 	lds	r20, 0x0343
    2a74:	50 91 44 03 	lds	r21, 0x0344
    2a78:	c8 01       	movw	r24, r16
    2a7a:	b7 01       	movw	r22, r14
    2a7c:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__udivmodsi4>
    2a80:	ca 01       	movw	r24, r20
    2a82:	b9 01       	movw	r22, r18
    2a84:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__floatunsisf>
    2a88:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <floor>
    2a8c:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <__fixunssfsi>
    2a90:	60 93 71 03 	sts	0x0371, r22
    2a94:	70 93 72 03 	sts	0x0372, r23
    2a98:	80 93 73 03 	sts	0x0373, r24
    2a9c:	90 93 74 03 	sts	0x0374, r25
 //определяем первый сектор данных
 FirstDataSector=ResvdSecCnt+(GetByte(BPB_NumFATs)*FATSz)+RootDirSectors;
    2aa0:	e0 90 49 03 	lds	r14, 0x0349
    2aa4:	f0 90 4a 03 	lds	r15, 0x034A
    2aa8:	00 91 4b 03 	lds	r16, 0x034B
    2aac:	10 91 4c 03 	lds	r17, 0x034C
    2ab0:	60 e1       	ldi	r22, 0x10	; 16
    2ab2:	70 e0       	ldi	r23, 0x00	; 0
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    2abc:	20 91 75 03 	lds	r18, 0x0375
    2ac0:	30 91 76 03 	lds	r19, 0x0376
    2ac4:	40 91 77 03 	lds	r20, 0x0377
    2ac8:	50 91 78 03 	lds	r21, 0x0378
    2acc:	e2 0e       	add	r14, r18
    2ace:	f3 1e       	adc	r15, r19
    2ad0:	04 1f       	adc	r16, r20
    2ad2:	15 1f       	adc	r17, r21
    2ad4:	20 91 4d 03 	lds	r18, 0x034D
    2ad8:	30 91 4e 03 	lds	r19, 0x034E
    2adc:	40 91 4f 03 	lds	r20, 0x034F
    2ae0:	50 91 50 03 	lds	r21, 0x0350
    2ae4:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__mulsi3>
    2ae8:	e6 0e       	add	r14, r22
    2aea:	f7 1e       	adc	r15, r23
    2aec:	08 1f       	adc	r16, r24
    2aee:	19 1f       	adc	r17, r25
    2af0:	e0 92 3d 03 	sts	0x033D, r14
    2af4:	f0 92 3e 03 	sts	0x033E, r15
    2af8:	00 93 3f 03 	sts	0x033F, r16
    2afc:	10 93 40 03 	sts	0x0340, r17
 //определим тип файловой системы

 FATType=FAT12;
    2b00:	10 92 1e 01 	sts	0x011E, r1
 WH1602_SetTextProgmemUpLine(Text_FAT_Type);
    2b04:	88 e9       	ldi	r24, 0x98	; 152
    2b06:	91 e0       	ldi	r25, 0x01	; 1
    2b08:	0e 94 53 03 	call	0x6a6	; 0x6a6 <WH1602_SetTextProgmemUpLine>
 if (CountofClusters<4085UL)
    2b0c:	80 91 71 03 	lds	r24, 0x0371
    2b10:	90 91 72 03 	lds	r25, 0x0372
    2b14:	a0 91 73 03 	lds	r26, 0x0373
    2b18:	b0 91 74 03 	lds	r27, 0x0374
    2b1c:	85 3f       	cpi	r24, 0xF5	; 245
    2b1e:	2f e0       	ldi	r18, 0x0F	; 15
    2b20:	92 07       	cpc	r25, r18
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	a2 07       	cpc	r26, r18
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	b2 07       	cpc	r27, r18
    2b2a:	80 f4       	brcc	.+32     	; 0x2b4c <FAT_Init+0x34e>
 {
  WH1602_SetTextProgmemDownLine(Text_FAT12);
    2b2c:	89 ec       	ldi	r24, 0xC9	; 201
    2b2e:	91 e0       	ldi	r25, 0x01	; 1
    2b30:	0e 94 be 03 	call	0x77c	; 0x77c <WH1602_SetTextProgmemDownLine>
    2b34:	80 e5       	ldi	r24, 0x50	; 80
    2b36:	93 ec       	ldi	r25, 0xC3	; 195
    2b38:	20 e9       	ldi	r18, 0x90	; 144
    2b3a:	31 e0       	ldi	r19, 0x01	; 1
    2b3c:	f9 01       	movw	r30, r18
    2b3e:	31 97       	sbiw	r30, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <FAT_Init+0x340>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b42:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b44:	d9 f7       	brne	.-10     	; 0x2b3c <FAT_Init+0x33e>
  _delay_ms(5000);
  FATType=FAT12;
    2b46:	10 92 1e 01 	sts	0x011E, r1
    2b4a:	24 c0       	rjmp	.+72     	; 0x2b94 <FAT_Init+0x396>
 }
 else
 {
  if (CountofClusters<65525UL)
    2b4c:	85 5f       	subi	r24, 0xF5	; 245
    2b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b50:	a0 40       	sbci	r26, 0x00	; 0
    2b52:	b0 40       	sbci	r27, 0x00	; 0
    2b54:	78 f4       	brcc	.+30     	; 0x2b74 <FAT_Init+0x376>
  {
   WH1602_SetTextProgmemDownLine(Text_FAT16);
    2b56:	87 eb       	ldi	r24, 0xB7	; 183
    2b58:	91 e0       	ldi	r25, 0x01	; 1
    2b5a:	0e 94 be 03 	call	0x77c	; 0x77c <WH1602_SetTextProgmemDownLine>
    2b5e:	80 e2       	ldi	r24, 0x20	; 32
    2b60:	9e e4       	ldi	r25, 0x4E	; 78
    2b62:	20 e9       	ldi	r18, 0x90	; 144
    2b64:	31 e0       	ldi	r19, 0x01	; 1
    2b66:	f9 01       	movw	r30, r18
    2b68:	31 97       	sbiw	r30, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <FAT_Init+0x36a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b6e:	d9 f7       	brne	.-10     	; 0x2b66 <FAT_Init+0x368>
   _delay_ms(2000);
   FATType=FAT16;
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	0e c0       	rjmp	.+28     	; 0x2b90 <FAT_Init+0x392>
  }
  else
  {
   WH1602_SetTextProgmemDownLine(Text_FAT32);
    2b74:	86 ea       	ldi	r24, 0xA6	; 166
    2b76:	91 e0       	ldi	r25, 0x01	; 1
    2b78:	0e 94 be 03 	call	0x77c	; 0x77c <WH1602_SetTextProgmemDownLine>
    2b7c:	80 e5       	ldi	r24, 0x50	; 80
    2b7e:	93 ec       	ldi	r25, 0xC3	; 195
    2b80:	20 e9       	ldi	r18, 0x90	; 144
    2b82:	31 e0       	ldi	r19, 0x01	; 1
    2b84:	f9 01       	movw	r30, r18
    2b86:	31 97       	sbiw	r30, 0x01	; 1
    2b88:	f1 f7       	brne	.-4      	; 0x2b86 <FAT_Init+0x388>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b8a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8c:	d9 f7       	brne	.-10     	; 0x2b84 <FAT_Init+0x386>
   _delay_ms(5000);
   FATType=FAT32;
    2b8e:	82 e0       	ldi	r24, 0x02	; 2
    2b90:	80 93 1e 01 	sts	0x011E, r24
  }
 }
 if (FATType==FAT12) return;//не поддерживаем
    2b94:	80 91 1e 01 	lds	r24, 0x011E
    2b98:	88 23       	and	r24, r24
    2b9a:	09 f4       	brne	.+2      	; 0x2b9e <FAT_Init+0x3a0>
    2b9c:	95 c0       	rjmp	.+298    	; 0x2cc8 <FAT_Init+0x4ca>
 if (FATType==FAT32) return;//не поддерживаем
    2b9e:	82 30       	cpi	r24, 0x02	; 2
    2ba0:	09 f4       	brne	.+2      	; 0x2ba4 <FAT_Init+0x3a6>
    2ba2:	92 c0       	rjmp	.+292    	; 0x2cc8 <FAT_Init+0x4ca>
 //определяем начало корневой директории (для FAT16 - это сектор и отдельная область, для FAT32 - это ФАЙЛ в области данных с кластером BPB_RootClus)
 FirstRootFolderSecNum=ResvdSecCnt+(GetByte(BPB_NumFATs)*FATSz);
    2ba4:	a0 90 49 03 	lds	r10, 0x0349
    2ba8:	b0 90 4a 03 	lds	r11, 0x034A
    2bac:	c0 90 4b 03 	lds	r12, 0x034B
    2bb0:	d0 90 4c 03 	lds	r13, 0x034C
    2bb4:	60 e1       	ldi	r22, 0x10	; 16
    2bb6:	70 e0       	ldi	r23, 0x00	; 0
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	0e 94 fd 05 	call	0xbfa	; 0xbfa <GetByte>
    2bc0:	20 91 4d 03 	lds	r18, 0x034D
    2bc4:	30 91 4e 03 	lds	r19, 0x034E
    2bc8:	40 91 4f 03 	lds	r20, 0x034F
    2bcc:	50 91 50 03 	lds	r21, 0x0350
    2bd0:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__mulsi3>
    2bd4:	7b 01       	movw	r14, r22
    2bd6:	8c 01       	movw	r16, r24
    2bd8:	ea 0c       	add	r14, r10
    2bda:	fb 1c       	adc	r15, r11
    2bdc:	0c 1d       	adc	r16, r12
    2bde:	1d 1d       	adc	r17, r13
    2be0:	e0 92 45 03 	sts	0x0345, r14
    2be4:	f0 92 46 03 	sts	0x0346, r15
    2be8:	00 93 47 03 	sts	0x0347, r16
    2bec:	10 93 48 03 	sts	0x0348, r17
 ClusterSize=SecPerClus*BytsPerSec;//размер кластера в байтах 
    2bf0:	a0 90 69 03 	lds	r10, 0x0369
    2bf4:	b0 90 6a 03 	lds	r11, 0x036A
    2bf8:	c0 90 6b 03 	lds	r12, 0x036B
    2bfc:	d0 90 6c 03 	lds	r13, 0x036C
    2c00:	20 91 41 03 	lds	r18, 0x0341
    2c04:	30 91 42 03 	lds	r19, 0x0342
    2c08:	40 91 43 03 	lds	r20, 0x0343
    2c0c:	50 91 44 03 	lds	r21, 0x0344
    2c10:	c6 01       	movw	r24, r12
    2c12:	b5 01       	movw	r22, r10
    2c14:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__mulsi3>
    2c18:	60 93 79 03 	sts	0x0379, r22
    2c1c:	70 93 7a 03 	sts	0x037A, r23
    2c20:	80 93 7b 03 	sts	0x037B, r24
    2c24:	90 93 7c 03 	sts	0x037C, r25

 //читаем корневую директорию
 FirstRootFolderAddr=FirstRootFolderSecNum*BytsPerSec;//начальный адрес корневой директории
    2c28:	c8 01       	movw	r24, r16
    2c2a:	b7 01       	movw	r22, r14
    2c2c:	a6 01       	movw	r20, r12
    2c2e:	95 01       	movw	r18, r10
    2c30:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__mulsi3>
    2c34:	7b 01       	movw	r14, r22
    2c36:	8c 01       	movw	r16, r24
    2c38:	60 93 7d 03 	sts	0x037D, r22
    2c3c:	70 93 7e 03 	sts	0x037E, r23
    2c40:	80 93 7f 03 	sts	0x037F, r24
    2c44:	90 93 80 03 	sts	0x0380, r25
 //настраиваем структуру для поиска внутри директории
 sFATRecordPointer.BeginFolderAddr=FirstRootFolderAddr;//начальный адрес имён файлов внутри директории
    2c48:	60 93 51 03 	sts	0x0351, r22
    2c4c:	70 93 52 03 	sts	0x0352, r23
    2c50:	80 93 53 03 	sts	0x0353, r24
    2c54:	90 93 54 03 	sts	0x0354, r25
 sFATRecordPointer.CurrentFolderAddr=sFATRecordPointer.BeginFolderAddr;//текущий адрес имён файлов внутри директории
    2c58:	60 93 55 03 	sts	0x0355, r22
    2c5c:	70 93 56 03 	sts	0x0356, r23
    2c60:	80 93 57 03 	sts	0x0357, r24
    2c64:	90 93 58 03 	sts	0x0358, r25
 sFATRecordPointer.BeginFolderCluster=0;//начальный кластер имени файла внутри директории
    2c68:	10 92 59 03 	sts	0x0359, r1
    2c6c:	10 92 5a 03 	sts	0x035A, r1
    2c70:	10 92 5b 03 	sts	0x035B, r1
    2c74:	10 92 5c 03 	sts	0x035C, r1
 sFATRecordPointer.CurrentFolderCluster=0;//текущий кластер имени файла внутри директории
    2c78:	10 92 5d 03 	sts	0x035D, r1
    2c7c:	10 92 5e 03 	sts	0x035E, r1
    2c80:	10 92 5f 03 	sts	0x035F, r1
    2c84:	10 92 60 03 	sts	0x0360, r1
 sFATRecordPointer.EndFolderClusterAddr=sFATRecordPointer.BeginFolderAddr+(RootDirSectors*BytsPerSec);//конечный адрес имён файлов внутри директории (или кластера)
    2c88:	20 91 75 03 	lds	r18, 0x0375
    2c8c:	30 91 76 03 	lds	r19, 0x0376
    2c90:	40 91 77 03 	lds	r20, 0x0377
    2c94:	50 91 78 03 	lds	r21, 0x0378
    2c98:	c6 01       	movw	r24, r12
    2c9a:	b5 01       	movw	r22, r10
    2c9c:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__mulsi3>
    2ca0:	6e 0d       	add	r22, r14
    2ca2:	7f 1d       	adc	r23, r15
    2ca4:	80 1f       	adc	r24, r16
    2ca6:	91 1f       	adc	r25, r17
    2ca8:	60 93 65 03 	sts	0x0365, r22
    2cac:	70 93 66 03 	sts	0x0366, r23
    2cb0:	80 93 67 03 	sts	0x0367, r24
    2cb4:	90 93 68 03 	sts	0x0368, r25
 sFATRecordPointer.BeginFolderClusterAddr=sFATRecordPointer.CurrentFolderAddr;//адрес начального кластера директории
    2cb8:	e0 92 61 03 	sts	0x0361, r14
    2cbc:	f0 92 62 03 	sts	0x0362, r15
    2cc0:	00 93 63 03 	sts	0x0363, r16
    2cc4:	10 93 64 03 	sts	0x0364, r17
}
    2cc8:	1f 91       	pop	r17
    2cca:	0f 91       	pop	r16
    2ccc:	ff 90       	pop	r15
    2cce:	ef 90       	pop	r14
    2cd0:	df 90       	pop	r13
    2cd2:	cf 90       	pop	r12
    2cd4:	bf 90       	pop	r11
    2cd6:	af 90       	pop	r10
    2cd8:	9f 90       	pop	r9
    2cda:	8f 90       	pop	r8
    2cdc:	7f 90       	pop	r7
    2cde:	6f 90       	pop	r6
    2ce0:	08 95       	ret

00002ce2 <main>:

//----------------------------------------------------------------------------------------------------
//основная функция программы
//----------------------------------------------------------------------------------------------------
int main(void)
{ 
    2ce2:	1f 93       	push	r17
    2ce4:	cf 93       	push	r28
    2ce6:	df 93       	push	r29
 InitAVR();
    2ce8:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <InitAVR>
 DRAM_Init();
    2cec:	0e 94 0c 01 	call	0x218	; 0x218 <DRAM_Init>
 WH1602_Init(); 
    2cf0:	0e 94 14 02 	call	0x428	; 0x428 <WH1602_Init>
 SD_Init();
    2cf4:	0e 94 1d 13 	call	0x263a	; 0x263a <SD_Init>
 FAT_Init();
    2cf8:	0e 94 ff 13 	call	0x27fe	; 0x27fe <FAT_Init>
    2cfc:	10 e0       	ldi	r17, 0x00	; 0
    2cfe:	c0 e9       	ldi	r28, 0x90	; 144
    2d00:	d1 e0       	ldi	r29, 0x01	; 1
    2d02:	01 c0       	rjmp	.+2      	; 0x2d06 <main+0x24>
    2d04:	13 e0       	ldi	r17, 0x03	; 3
 //запускаем основное меню
 unsigned char select_item=0;
 while(1)
 {  
  WH1602_SetTextProgmemUpLine(Text_Main_Menu_Select);
    2d06:	84 e5       	ldi	r24, 0x54	; 84
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <WH1602_SetTextProgmemUpLine>
  if (select_item==0) strcpy(string,"> CKOPOCTШ x1 <");
    2d0e:	11 23       	and	r17, r17
    2d10:	29 f4       	brne	.+10     	; 0x2d1c <main+0x3a>
    2d12:	84 e2       	ldi	r24, 0x24	; 36
    2d14:	93 e0       	ldi	r25, 0x03	; 3
    2d16:	69 ec       	ldi	r22, 0xC9	; 201
    2d18:	70 e0       	ldi	r23, 0x00	; 0
    2d1a:	14 c0       	rjmp	.+40     	; 0x2d44 <main+0x62>
  if (select_item==1) strcpy(string,"> CKOPOCTШ x2 <");
    2d1c:	11 30       	cpi	r17, 0x01	; 1
    2d1e:	29 f4       	brne	.+10     	; 0x2d2a <main+0x48>
    2d20:	84 e2       	ldi	r24, 0x24	; 36
    2d22:	93 e0       	ldi	r25, 0x03	; 3
    2d24:	69 ed       	ldi	r22, 0xD9	; 217
    2d26:	70 e0       	ldi	r23, 0x00	; 0
    2d28:	0d c0       	rjmp	.+26     	; 0x2d44 <main+0x62>
  if (select_item==2) strcpy(string,"> CKOPOCTШ x4 <"); 
    2d2a:	12 30       	cpi	r17, 0x02	; 2
    2d2c:	29 f4       	brne	.+10     	; 0x2d38 <main+0x56>
    2d2e:	84 e2       	ldi	r24, 0x24	; 36
    2d30:	93 e0       	ldi	r25, 0x03	; 3
    2d32:	69 ee       	ldi	r22, 0xE9	; 233
    2d34:	70 e0       	ldi	r23, 0x00	; 0
    2d36:	06 c0       	rjmp	.+12     	; 0x2d44 <main+0x62>
  if (select_item==3) strcpy(string,">  TECT PAMETI  <");
    2d38:	13 30       	cpi	r17, 0x03	; 3
    2d3a:	31 f4       	brne	.+12     	; 0x2d48 <main+0x66>
    2d3c:	84 e2       	ldi	r24, 0x24	; 36
    2d3e:	93 e0       	ldi	r25, 0x03	; 3
    2d40:	69 ef       	ldi	r22, 0xF9	; 249
    2d42:	70 e0       	ldi	r23, 0x00	; 0
    2d44:	0e 94 0c 18 	call	0x3018	; 0x3018 <strcpy>
  WH1602_SetTextDownLine(string); 
    2d48:	84 e2       	ldi	r24, 0x24	; 36
    2d4a:	93 e0       	ldi	r25, 0x03	; 3
    2d4c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <WH1602_SetTextDownLine>
    2d50:	88 e8       	ldi	r24, 0x88	; 136
    2d52:	93 e1       	ldi	r25, 0x13	; 19
    2d54:	fe 01       	movw	r30, r28
    2d56:	31 97       	sbiw	r30, 0x01	; 1
    2d58:	f1 f7       	brne	.-4      	; 0x2d56 <main+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5c:	d9 f7       	brne	.-10     	; 0x2d54 <main+0x72>
  _delay_ms(500);
  //ждём нажатий кнопок
  while(1)
  {
   if (BUTTON_UP_PIN&(1<<BUTTON_UP))
    2d5e:	83 9b       	sbis	0x10, 3	; 16
    2d60:	04 c0       	rjmp	.+8      	; 0x2d6a <main+0x88>
   {
    if (select_item==0) select_item=3;
    2d62:	11 23       	and	r17, r17
    2d64:	79 f2       	breq	.-98     	; 0x2d04 <main+0x22>
                   else select_item--;
    2d66:	11 50       	subi	r17, 0x01	; 1
    2d68:	ce cf       	rjmp	.-100    	; 0x2d06 <main+0x24>
    break;
   }
   if (BUTTON_DOWN_PIN&(1<<BUTTON_DOWN))
    2d6a:	81 9b       	sbis	0x10, 1	; 16
    2d6c:	06 c0       	rjmp	.+12     	; 0x2d7a <main+0x98>
   {
    if (select_item==3) select_item=0;
    2d6e:	13 30       	cpi	r17, 0x03	; 3
    2d70:	11 f4       	brne	.+4      	; 0x2d76 <main+0x94>
    2d72:	10 e0       	ldi	r17, 0x00	; 0
    2d74:	c8 cf       	rjmp	.-112    	; 0x2d06 <main+0x24>
                   else select_item++;       
    2d76:	1f 5f       	subi	r17, 0xFF	; 255
    2d78:	c6 cf       	rjmp	.-116    	; 0x2d06 <main+0x24>
    break;
   }
   if (BUTTON_SELECT_PIN&(1<<BUTTON_SELECT))
    2d7a:	84 9b       	sbis	0x10, 4	; 16
    2d7c:	f0 cf       	rjmp	.-32     	; 0x2d5e <main+0x7c>
   {
    if (select_item==0) 
    2d7e:	11 23       	and	r17, r17
    2d80:	19 f4       	brne	.+6      	; 0x2d88 <main+0xa6>
	{
	 Speed=0;
    2d82:	10 92 23 01 	sts	0x0123, r1
    2d86:	06 c0       	rjmp	.+12     	; 0x2d94 <main+0xb2>
	 TapeMenu();
	}
    if (select_item==1) 
    2d88:	11 30       	cpi	r17, 0x01	; 1
    2d8a:	11 f0       	breq	.+4      	; 0x2d90 <main+0xae>
	{
	 Speed=1;
	 TapeMenu();
	}
    if (select_item==2)
    2d8c:	12 30       	cpi	r17, 0x02	; 2
    2d8e:	29 f4       	brne	.+10     	; 0x2d9a <main+0xb8>
	{
	 Speed=2;
    2d90:	10 93 23 01 	sts	0x0123, r17
     TapeMenu();
    2d94:	0e 94 df 11 	call	0x23be	; 0x23be <TapeMenu>
    2d98:	b6 cf       	rjmp	.-148    	; 0x2d06 <main+0x24>
	}
    if (select_item==3) MemoryTest();
    2d9a:	13 30       	cpi	r17, 0x03	; 3
    2d9c:	09 f0       	breq	.+2      	; 0x2da0 <main+0xbe>
    2d9e:	b3 cf       	rjmp	.-154    	; 0x2d06 <main+0x24>
    2da0:	0e 94 11 11 	call	0x2222	; 0x2222 <MemoryTest>
    2da4:	b0 cf       	rjmp	.-160    	; 0x2d06 <main+0x24>

00002da6 <ceil>:
    2da6:	d9 d0       	rcall	.+434    	; 0x2f5a <__fp_trunc>
    2da8:	80 f0       	brcs	.+32     	; 0x2dca <ceil+0x24>
    2daa:	9f 37       	cpi	r25, 0x7F	; 127
    2dac:	40 f4       	brcc	.+16     	; 0x2dbe <ceil+0x18>
    2dae:	91 11       	cpse	r25, r1
    2db0:	0e f4       	brtc	.+2      	; 0x2db4 <ceil+0xe>
    2db2:	eb c0       	rjmp	.+470    	; 0x2f8a <__fp_szero>
    2db4:	60 e0       	ldi	r22, 0x00	; 0
    2db6:	70 e0       	ldi	r23, 0x00	; 0
    2db8:	80 e8       	ldi	r24, 0x80	; 128
    2dba:	9f e3       	ldi	r25, 0x3F	; 63
    2dbc:	08 95       	ret
    2dbe:	26 f0       	brts	.+8      	; 0x2dc8 <ceil+0x22>
    2dc0:	1b 16       	cp	r1, r27
    2dc2:	61 1d       	adc	r22, r1
    2dc4:	71 1d       	adc	r23, r1
    2dc6:	81 1d       	adc	r24, r1
    2dc8:	7d c0       	rjmp	.+250    	; 0x2ec4 <__fp_mintl>
    2dca:	97 c0       	rjmp	.+302    	; 0x2efa <__fp_mpack>

00002dcc <__fixunssfsi>:
    2dcc:	ac d0       	rcall	.+344    	; 0x2f26 <__fp_splitA>
    2dce:	88 f0       	brcs	.+34     	; 0x2df2 <__fixunssfsi+0x26>
    2dd0:	9f 57       	subi	r25, 0x7F	; 127
    2dd2:	90 f0       	brcs	.+36     	; 0x2df8 <__fixunssfsi+0x2c>
    2dd4:	b9 2f       	mov	r27, r25
    2dd6:	99 27       	eor	r25, r25
    2dd8:	b7 51       	subi	r27, 0x17	; 23
    2dda:	a0 f0       	brcs	.+40     	; 0x2e04 <__fixunssfsi+0x38>
    2ddc:	d1 f0       	breq	.+52     	; 0x2e12 <__fixunssfsi+0x46>
    2dde:	66 0f       	add	r22, r22
    2de0:	77 1f       	adc	r23, r23
    2de2:	88 1f       	adc	r24, r24
    2de4:	99 1f       	adc	r25, r25
    2de6:	1a f0       	brmi	.+6      	; 0x2dee <__fixunssfsi+0x22>
    2de8:	ba 95       	dec	r27
    2dea:	c9 f7       	brne	.-14     	; 0x2dde <__fixunssfsi+0x12>
    2dec:	12 c0       	rjmp	.+36     	; 0x2e12 <__fixunssfsi+0x46>
    2dee:	b1 30       	cpi	r27, 0x01	; 1
    2df0:	81 f0       	breq	.+32     	; 0x2e12 <__fixunssfsi+0x46>
    2df2:	ca d0       	rcall	.+404    	; 0x2f88 <__fp_zero>
    2df4:	b1 e0       	ldi	r27, 0x01	; 1
    2df6:	08 95       	ret
    2df8:	c7 c0       	rjmp	.+398    	; 0x2f88 <__fp_zero>
    2dfa:	67 2f       	mov	r22, r23
    2dfc:	78 2f       	mov	r23, r24
    2dfe:	88 27       	eor	r24, r24
    2e00:	b8 5f       	subi	r27, 0xF8	; 248
    2e02:	39 f0       	breq	.+14     	; 0x2e12 <__fixunssfsi+0x46>
    2e04:	b9 3f       	cpi	r27, 0xF9	; 249
    2e06:	cc f3       	brlt	.-14     	; 0x2dfa <__fixunssfsi+0x2e>
    2e08:	86 95       	lsr	r24
    2e0a:	77 95       	ror	r23
    2e0c:	67 95       	ror	r22
    2e0e:	b3 95       	inc	r27
    2e10:	d9 f7       	brne	.-10     	; 0x2e08 <__fixunssfsi+0x3c>
    2e12:	3e f4       	brtc	.+14     	; 0x2e22 <__fixunssfsi+0x56>
    2e14:	90 95       	com	r25
    2e16:	80 95       	com	r24
    2e18:	70 95       	com	r23
    2e1a:	61 95       	neg	r22
    2e1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e1e:	8f 4f       	sbci	r24, 0xFF	; 255
    2e20:	9f 4f       	sbci	r25, 0xFF	; 255
    2e22:	08 95       	ret

00002e24 <__floatunsisf>:
    2e24:	e8 94       	clt
    2e26:	09 c0       	rjmp	.+18     	; 0x2e3a <__floatsisf+0x12>

00002e28 <__floatsisf>:
    2e28:	97 fb       	bst	r25, 7
    2e2a:	3e f4       	brtc	.+14     	; 0x2e3a <__floatsisf+0x12>
    2e2c:	90 95       	com	r25
    2e2e:	80 95       	com	r24
    2e30:	70 95       	com	r23
    2e32:	61 95       	neg	r22
    2e34:	7f 4f       	sbci	r23, 0xFF	; 255
    2e36:	8f 4f       	sbci	r24, 0xFF	; 255
    2e38:	9f 4f       	sbci	r25, 0xFF	; 255
    2e3a:	99 23       	and	r25, r25
    2e3c:	a9 f0       	breq	.+42     	; 0x2e68 <__floatsisf+0x40>
    2e3e:	f9 2f       	mov	r31, r25
    2e40:	96 e9       	ldi	r25, 0x96	; 150
    2e42:	bb 27       	eor	r27, r27
    2e44:	93 95       	inc	r25
    2e46:	f6 95       	lsr	r31
    2e48:	87 95       	ror	r24
    2e4a:	77 95       	ror	r23
    2e4c:	67 95       	ror	r22
    2e4e:	b7 95       	ror	r27
    2e50:	f1 11       	cpse	r31, r1
    2e52:	f8 cf       	rjmp	.-16     	; 0x2e44 <__floatsisf+0x1c>
    2e54:	fa f4       	brpl	.+62     	; 0x2e94 <__floatsisf+0x6c>
    2e56:	bb 0f       	add	r27, r27
    2e58:	11 f4       	brne	.+4      	; 0x2e5e <__floatsisf+0x36>
    2e5a:	60 ff       	sbrs	r22, 0
    2e5c:	1b c0       	rjmp	.+54     	; 0x2e94 <__floatsisf+0x6c>
    2e5e:	6f 5f       	subi	r22, 0xFF	; 255
    2e60:	7f 4f       	sbci	r23, 0xFF	; 255
    2e62:	8f 4f       	sbci	r24, 0xFF	; 255
    2e64:	9f 4f       	sbci	r25, 0xFF	; 255
    2e66:	16 c0       	rjmp	.+44     	; 0x2e94 <__floatsisf+0x6c>
    2e68:	88 23       	and	r24, r24
    2e6a:	11 f0       	breq	.+4      	; 0x2e70 <__floatsisf+0x48>
    2e6c:	96 e9       	ldi	r25, 0x96	; 150
    2e6e:	11 c0       	rjmp	.+34     	; 0x2e92 <__floatsisf+0x6a>
    2e70:	77 23       	and	r23, r23
    2e72:	21 f0       	breq	.+8      	; 0x2e7c <__floatsisf+0x54>
    2e74:	9e e8       	ldi	r25, 0x8E	; 142
    2e76:	87 2f       	mov	r24, r23
    2e78:	76 2f       	mov	r23, r22
    2e7a:	05 c0       	rjmp	.+10     	; 0x2e86 <__floatsisf+0x5e>
    2e7c:	66 23       	and	r22, r22
    2e7e:	71 f0       	breq	.+28     	; 0x2e9c <__floatsisf+0x74>
    2e80:	96 e8       	ldi	r25, 0x86	; 134
    2e82:	86 2f       	mov	r24, r22
    2e84:	70 e0       	ldi	r23, 0x00	; 0
    2e86:	60 e0       	ldi	r22, 0x00	; 0
    2e88:	2a f0       	brmi	.+10     	; 0x2e94 <__floatsisf+0x6c>
    2e8a:	9a 95       	dec	r25
    2e8c:	66 0f       	add	r22, r22
    2e8e:	77 1f       	adc	r23, r23
    2e90:	88 1f       	adc	r24, r24
    2e92:	da f7       	brpl	.-10     	; 0x2e8a <__floatsisf+0x62>
    2e94:	88 0f       	add	r24, r24
    2e96:	96 95       	lsr	r25
    2e98:	87 95       	ror	r24
    2e9a:	97 f9       	bld	r25, 7
    2e9c:	08 95       	ret

00002e9e <floor>:
    2e9e:	5d d0       	rcall	.+186    	; 0x2f5a <__fp_trunc>
    2ea0:	80 f0       	brcs	.+32     	; 0x2ec2 <floor+0x24>
    2ea2:	9f 37       	cpi	r25, 0x7F	; 127
    2ea4:	40 f4       	brcc	.+16     	; 0x2eb6 <floor+0x18>
    2ea6:	91 11       	cpse	r25, r1
    2ea8:	0e f0       	brts	.+2      	; 0x2eac <floor+0xe>
    2eaa:	6f c0       	rjmp	.+222    	; 0x2f8a <__fp_szero>
    2eac:	60 e0       	ldi	r22, 0x00	; 0
    2eae:	70 e0       	ldi	r23, 0x00	; 0
    2eb0:	80 e8       	ldi	r24, 0x80	; 128
    2eb2:	9f eb       	ldi	r25, 0xBF	; 191
    2eb4:	08 95       	ret
    2eb6:	26 f4       	brtc	.+8      	; 0x2ec0 <floor+0x22>
    2eb8:	1b 16       	cp	r1, r27
    2eba:	61 1d       	adc	r22, r1
    2ebc:	71 1d       	adc	r23, r1
    2ebe:	81 1d       	adc	r24, r1
    2ec0:	01 c0       	rjmp	.+2      	; 0x2ec4 <__fp_mintl>
    2ec2:	1b c0       	rjmp	.+54     	; 0x2efa <__fp_mpack>

00002ec4 <__fp_mintl>:
    2ec4:	88 23       	and	r24, r24
    2ec6:	71 f4       	brne	.+28     	; 0x2ee4 <__fp_mintl+0x20>
    2ec8:	77 23       	and	r23, r23
    2eca:	21 f0       	breq	.+8      	; 0x2ed4 <__fp_mintl+0x10>
    2ecc:	98 50       	subi	r25, 0x08	; 8
    2ece:	87 2b       	or	r24, r23
    2ed0:	76 2f       	mov	r23, r22
    2ed2:	07 c0       	rjmp	.+14     	; 0x2ee2 <__fp_mintl+0x1e>
    2ed4:	66 23       	and	r22, r22
    2ed6:	11 f4       	brne	.+4      	; 0x2edc <__fp_mintl+0x18>
    2ed8:	99 27       	eor	r25, r25
    2eda:	0d c0       	rjmp	.+26     	; 0x2ef6 <__fp_mintl+0x32>
    2edc:	90 51       	subi	r25, 0x10	; 16
    2ede:	86 2b       	or	r24, r22
    2ee0:	70 e0       	ldi	r23, 0x00	; 0
    2ee2:	60 e0       	ldi	r22, 0x00	; 0
    2ee4:	2a f0       	brmi	.+10     	; 0x2ef0 <__fp_mintl+0x2c>
    2ee6:	9a 95       	dec	r25
    2ee8:	66 0f       	add	r22, r22
    2eea:	77 1f       	adc	r23, r23
    2eec:	88 1f       	adc	r24, r24
    2eee:	da f7       	brpl	.-10     	; 0x2ee6 <__fp_mintl+0x22>
    2ef0:	88 0f       	add	r24, r24
    2ef2:	96 95       	lsr	r25
    2ef4:	87 95       	ror	r24
    2ef6:	97 f9       	bld	r25, 7
    2ef8:	08 95       	ret

00002efa <__fp_mpack>:
    2efa:	9f 3f       	cpi	r25, 0xFF	; 255
    2efc:	31 f0       	breq	.+12     	; 0x2f0a <__fp_mpack_finite+0xc>

00002efe <__fp_mpack_finite>:
    2efe:	91 50       	subi	r25, 0x01	; 1
    2f00:	20 f4       	brcc	.+8      	; 0x2f0a <__fp_mpack_finite+0xc>
    2f02:	87 95       	ror	r24
    2f04:	77 95       	ror	r23
    2f06:	67 95       	ror	r22
    2f08:	b7 95       	ror	r27
    2f0a:	88 0f       	add	r24, r24
    2f0c:	91 1d       	adc	r25, r1
    2f0e:	96 95       	lsr	r25
    2f10:	87 95       	ror	r24
    2f12:	97 f9       	bld	r25, 7
    2f14:	08 95       	ret

00002f16 <__fp_split3>:
    2f16:	57 fd       	sbrc	r21, 7
    2f18:	90 58       	subi	r25, 0x80	; 128
    2f1a:	44 0f       	add	r20, r20
    2f1c:	55 1f       	adc	r21, r21
    2f1e:	59 f0       	breq	.+22     	; 0x2f36 <__fp_splitA+0x10>
    2f20:	5f 3f       	cpi	r21, 0xFF	; 255
    2f22:	71 f0       	breq	.+28     	; 0x2f40 <__fp_splitA+0x1a>
    2f24:	47 95       	ror	r20

00002f26 <__fp_splitA>:
    2f26:	88 0f       	add	r24, r24
    2f28:	97 fb       	bst	r25, 7
    2f2a:	99 1f       	adc	r25, r25
    2f2c:	61 f0       	breq	.+24     	; 0x2f46 <__fp_splitA+0x20>
    2f2e:	9f 3f       	cpi	r25, 0xFF	; 255
    2f30:	79 f0       	breq	.+30     	; 0x2f50 <__fp_splitA+0x2a>
    2f32:	87 95       	ror	r24
    2f34:	08 95       	ret
    2f36:	12 16       	cp	r1, r18
    2f38:	13 06       	cpc	r1, r19
    2f3a:	14 06       	cpc	r1, r20
    2f3c:	55 1f       	adc	r21, r21
    2f3e:	f2 cf       	rjmp	.-28     	; 0x2f24 <__fp_split3+0xe>
    2f40:	46 95       	lsr	r20
    2f42:	f1 df       	rcall	.-30     	; 0x2f26 <__fp_splitA>
    2f44:	08 c0       	rjmp	.+16     	; 0x2f56 <__fp_splitA+0x30>
    2f46:	16 16       	cp	r1, r22
    2f48:	17 06       	cpc	r1, r23
    2f4a:	18 06       	cpc	r1, r24
    2f4c:	99 1f       	adc	r25, r25
    2f4e:	f1 cf       	rjmp	.-30     	; 0x2f32 <__fp_splitA+0xc>
    2f50:	86 95       	lsr	r24
    2f52:	71 05       	cpc	r23, r1
    2f54:	61 05       	cpc	r22, r1
    2f56:	08 94       	sec
    2f58:	08 95       	ret

00002f5a <__fp_trunc>:
    2f5a:	e5 df       	rcall	.-54     	; 0x2f26 <__fp_splitA>
    2f5c:	a0 f0       	brcs	.+40     	; 0x2f86 <__fp_trunc+0x2c>
    2f5e:	be e7       	ldi	r27, 0x7E	; 126
    2f60:	b9 17       	cp	r27, r25
    2f62:	88 f4       	brcc	.+34     	; 0x2f86 <__fp_trunc+0x2c>
    2f64:	bb 27       	eor	r27, r27
    2f66:	9f 38       	cpi	r25, 0x8F	; 143
    2f68:	60 f4       	brcc	.+24     	; 0x2f82 <__fp_trunc+0x28>
    2f6a:	16 16       	cp	r1, r22
    2f6c:	b1 1d       	adc	r27, r1
    2f6e:	67 2f       	mov	r22, r23
    2f70:	78 2f       	mov	r23, r24
    2f72:	88 27       	eor	r24, r24
    2f74:	98 5f       	subi	r25, 0xF8	; 248
    2f76:	f7 cf       	rjmp	.-18     	; 0x2f66 <__fp_trunc+0xc>
    2f78:	86 95       	lsr	r24
    2f7a:	77 95       	ror	r23
    2f7c:	67 95       	ror	r22
    2f7e:	b1 1d       	adc	r27, r1
    2f80:	93 95       	inc	r25
    2f82:	96 39       	cpi	r25, 0x96	; 150
    2f84:	c8 f3       	brcs	.-14     	; 0x2f78 <__fp_trunc+0x1e>
    2f86:	08 95       	ret

00002f88 <__fp_zero>:
    2f88:	e8 94       	clt

00002f8a <__fp_szero>:
    2f8a:	bb 27       	eor	r27, r27
    2f8c:	66 27       	eor	r22, r22
    2f8e:	77 27       	eor	r23, r23
    2f90:	cb 01       	movw	r24, r22
    2f92:	97 f9       	bld	r25, 7
    2f94:	08 95       	ret

00002f96 <__mulsi3>:
    2f96:	62 9f       	mul	r22, r18
    2f98:	d0 01       	movw	r26, r0
    2f9a:	73 9f       	mul	r23, r19
    2f9c:	f0 01       	movw	r30, r0
    2f9e:	82 9f       	mul	r24, r18
    2fa0:	e0 0d       	add	r30, r0
    2fa2:	f1 1d       	adc	r31, r1
    2fa4:	64 9f       	mul	r22, r20
    2fa6:	e0 0d       	add	r30, r0
    2fa8:	f1 1d       	adc	r31, r1
    2faa:	92 9f       	mul	r25, r18
    2fac:	f0 0d       	add	r31, r0
    2fae:	83 9f       	mul	r24, r19
    2fb0:	f0 0d       	add	r31, r0
    2fb2:	74 9f       	mul	r23, r20
    2fb4:	f0 0d       	add	r31, r0
    2fb6:	65 9f       	mul	r22, r21
    2fb8:	f0 0d       	add	r31, r0
    2fba:	99 27       	eor	r25, r25
    2fbc:	72 9f       	mul	r23, r18
    2fbe:	b0 0d       	add	r27, r0
    2fc0:	e1 1d       	adc	r30, r1
    2fc2:	f9 1f       	adc	r31, r25
    2fc4:	63 9f       	mul	r22, r19
    2fc6:	b0 0d       	add	r27, r0
    2fc8:	e1 1d       	adc	r30, r1
    2fca:	f9 1f       	adc	r31, r25
    2fcc:	bd 01       	movw	r22, r26
    2fce:	cf 01       	movw	r24, r30
    2fd0:	11 24       	eor	r1, r1
    2fd2:	08 95       	ret

00002fd4 <__udivmodsi4>:
    2fd4:	a1 e2       	ldi	r26, 0x21	; 33
    2fd6:	1a 2e       	mov	r1, r26
    2fd8:	aa 1b       	sub	r26, r26
    2fda:	bb 1b       	sub	r27, r27
    2fdc:	fd 01       	movw	r30, r26
    2fde:	0d c0       	rjmp	.+26     	; 0x2ffa <__udivmodsi4_ep>

00002fe0 <__udivmodsi4_loop>:
    2fe0:	aa 1f       	adc	r26, r26
    2fe2:	bb 1f       	adc	r27, r27
    2fe4:	ee 1f       	adc	r30, r30
    2fe6:	ff 1f       	adc	r31, r31
    2fe8:	a2 17       	cp	r26, r18
    2fea:	b3 07       	cpc	r27, r19
    2fec:	e4 07       	cpc	r30, r20
    2fee:	f5 07       	cpc	r31, r21
    2ff0:	20 f0       	brcs	.+8      	; 0x2ffa <__udivmodsi4_ep>
    2ff2:	a2 1b       	sub	r26, r18
    2ff4:	b3 0b       	sbc	r27, r19
    2ff6:	e4 0b       	sbc	r30, r20
    2ff8:	f5 0b       	sbc	r31, r21

00002ffa <__udivmodsi4_ep>:
    2ffa:	66 1f       	adc	r22, r22
    2ffc:	77 1f       	adc	r23, r23
    2ffe:	88 1f       	adc	r24, r24
    3000:	99 1f       	adc	r25, r25
    3002:	1a 94       	dec	r1
    3004:	69 f7       	brne	.-38     	; 0x2fe0 <__udivmodsi4_loop>
    3006:	60 95       	com	r22
    3008:	70 95       	com	r23
    300a:	80 95       	com	r24
    300c:	90 95       	com	r25
    300e:	9b 01       	movw	r18, r22
    3010:	ac 01       	movw	r20, r24
    3012:	bd 01       	movw	r22, r26
    3014:	cf 01       	movw	r24, r30
    3016:	08 95       	ret

00003018 <strcpy>:
    3018:	fb 01       	movw	r30, r22
    301a:	dc 01       	movw	r26, r24
    301c:	01 90       	ld	r0, Z+
    301e:	0d 92       	st	X+, r0
    3020:	00 20       	and	r0, r0
    3022:	e1 f7       	brne	.-8      	; 0x301c <strcpy+0x4>
    3024:	08 95       	ret

00003026 <sprintf>:
    3026:	ae e0       	ldi	r26, 0x0E	; 14
    3028:	b0 e0       	ldi	r27, 0x00	; 0
    302a:	e9 e1       	ldi	r30, 0x19	; 25
    302c:	f8 e1       	ldi	r31, 0x18	; 24
    302e:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__prologue_saves__+0x1c>
    3032:	0d 89       	ldd	r16, Y+21	; 0x15
    3034:	1e 89       	ldd	r17, Y+22	; 0x16
    3036:	86 e0       	ldi	r24, 0x06	; 6
    3038:	8c 83       	std	Y+4, r24	; 0x04
    303a:	1a 83       	std	Y+2, r17	; 0x02
    303c:	09 83       	std	Y+1, r16	; 0x01
    303e:	8f ef       	ldi	r24, 0xFF	; 255
    3040:	9f e7       	ldi	r25, 0x7F	; 127
    3042:	9e 83       	std	Y+6, r25	; 0x06
    3044:	8d 83       	std	Y+5, r24	; 0x05
    3046:	9e 01       	movw	r18, r28
    3048:	27 5e       	subi	r18, 0xE7	; 231
    304a:	3f 4f       	sbci	r19, 0xFF	; 255
    304c:	ce 01       	movw	r24, r28
    304e:	01 96       	adiw	r24, 0x01	; 1
    3050:	6f 89       	ldd	r22, Y+23	; 0x17
    3052:	78 8d       	ldd	r23, Y+24	; 0x18
    3054:	a9 01       	movw	r20, r18
    3056:	0e 94 37 18 	call	0x306e	; 0x306e <vfprintf>
    305a:	2f 81       	ldd	r18, Y+7	; 0x07
    305c:	38 85       	ldd	r19, Y+8	; 0x08
    305e:	02 0f       	add	r16, r18
    3060:	13 1f       	adc	r17, r19
    3062:	f8 01       	movw	r30, r16
    3064:	10 82       	st	Z, r1
    3066:	2e 96       	adiw	r28, 0x0e	; 14
    3068:	e4 e0       	ldi	r30, 0x04	; 4
    306a:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__epilogue_restores__+0x1c>

0000306e <vfprintf>:
    306e:	ab e0       	ldi	r26, 0x0B	; 11
    3070:	b0 e0       	ldi	r27, 0x00	; 0
    3072:	ed e3       	ldi	r30, 0x3D	; 61
    3074:	f8 e1       	ldi	r31, 0x18	; 24
    3076:	0c 94 b4 1a 	jmp	0x3568	; 0x3568 <__prologue_saves__>
    307a:	3c 01       	movw	r6, r24
    307c:	2b 01       	movw	r4, r22
    307e:	5a 01       	movw	r10, r20
    3080:	fc 01       	movw	r30, r24
    3082:	17 82       	std	Z+7, r1	; 0x07
    3084:	16 82       	std	Z+6, r1	; 0x06
    3086:	83 81       	ldd	r24, Z+3	; 0x03
    3088:	81 fd       	sbrc	r24, 1
    308a:	03 c0       	rjmp	.+6      	; 0x3092 <vfprintf+0x24>
    308c:	6f ef       	ldi	r22, 0xFF	; 255
    308e:	7f ef       	ldi	r23, 0xFF	; 255
    3090:	c6 c1       	rjmp	.+908    	; 0x341e <vfprintf+0x3b0>
    3092:	9a e0       	ldi	r25, 0x0A	; 10
    3094:	89 2e       	mov	r8, r25
    3096:	1e 01       	movw	r2, r28
    3098:	08 94       	sec
    309a:	21 1c       	adc	r2, r1
    309c:	31 1c       	adc	r3, r1
    309e:	f3 01       	movw	r30, r6
    30a0:	23 81       	ldd	r18, Z+3	; 0x03
    30a2:	f2 01       	movw	r30, r4
    30a4:	23 fd       	sbrc	r18, 3
    30a6:	85 91       	lpm	r24, Z+
    30a8:	23 ff       	sbrs	r18, 3
    30aa:	81 91       	ld	r24, Z+
    30ac:	2f 01       	movw	r4, r30
    30ae:	88 23       	and	r24, r24
    30b0:	09 f4       	brne	.+2      	; 0x30b4 <vfprintf+0x46>
    30b2:	b2 c1       	rjmp	.+868    	; 0x3418 <vfprintf+0x3aa>
    30b4:	85 32       	cpi	r24, 0x25	; 37
    30b6:	39 f4       	brne	.+14     	; 0x30c6 <vfprintf+0x58>
    30b8:	23 fd       	sbrc	r18, 3
    30ba:	85 91       	lpm	r24, Z+
    30bc:	23 ff       	sbrs	r18, 3
    30be:	81 91       	ld	r24, Z+
    30c0:	2f 01       	movw	r4, r30
    30c2:	85 32       	cpi	r24, 0x25	; 37
    30c4:	29 f4       	brne	.+10     	; 0x30d0 <vfprintf+0x62>
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	b3 01       	movw	r22, r6
    30ca:	0e 94 2a 1a 	call	0x3454	; 0x3454 <fputc>
    30ce:	e7 cf       	rjmp	.-50     	; 0x309e <vfprintf+0x30>
    30d0:	98 2f       	mov	r25, r24
    30d2:	ff 24       	eor	r15, r15
    30d4:	ee 24       	eor	r14, r14
    30d6:	99 24       	eor	r9, r9
    30d8:	ff e1       	ldi	r31, 0x1F	; 31
    30da:	ff 15       	cp	r31, r15
    30dc:	d0 f0       	brcs	.+52     	; 0x3112 <vfprintf+0xa4>
    30de:	9b 32       	cpi	r25, 0x2B	; 43
    30e0:	69 f0       	breq	.+26     	; 0x30fc <vfprintf+0x8e>
    30e2:	9c 32       	cpi	r25, 0x2C	; 44
    30e4:	28 f4       	brcc	.+10     	; 0x30f0 <vfprintf+0x82>
    30e6:	90 32       	cpi	r25, 0x20	; 32
    30e8:	59 f0       	breq	.+22     	; 0x3100 <vfprintf+0x92>
    30ea:	93 32       	cpi	r25, 0x23	; 35
    30ec:	91 f4       	brne	.+36     	; 0x3112 <vfprintf+0xa4>
    30ee:	0e c0       	rjmp	.+28     	; 0x310c <vfprintf+0x9e>
    30f0:	9d 32       	cpi	r25, 0x2D	; 45
    30f2:	49 f0       	breq	.+18     	; 0x3106 <vfprintf+0x98>
    30f4:	90 33       	cpi	r25, 0x30	; 48
    30f6:	69 f4       	brne	.+26     	; 0x3112 <vfprintf+0xa4>
    30f8:	41 e0       	ldi	r20, 0x01	; 1
    30fa:	24 c0       	rjmp	.+72     	; 0x3144 <vfprintf+0xd6>
    30fc:	52 e0       	ldi	r21, 0x02	; 2
    30fe:	f5 2a       	or	r15, r21
    3100:	84 e0       	ldi	r24, 0x04	; 4
    3102:	f8 2a       	or	r15, r24
    3104:	28 c0       	rjmp	.+80     	; 0x3156 <vfprintf+0xe8>
    3106:	98 e0       	ldi	r25, 0x08	; 8
    3108:	f9 2a       	or	r15, r25
    310a:	25 c0       	rjmp	.+74     	; 0x3156 <vfprintf+0xe8>
    310c:	e0 e1       	ldi	r30, 0x10	; 16
    310e:	fe 2a       	or	r15, r30
    3110:	22 c0       	rjmp	.+68     	; 0x3156 <vfprintf+0xe8>
    3112:	f7 fc       	sbrc	r15, 7
    3114:	29 c0       	rjmp	.+82     	; 0x3168 <vfprintf+0xfa>
    3116:	89 2f       	mov	r24, r25
    3118:	80 53       	subi	r24, 0x30	; 48
    311a:	8a 30       	cpi	r24, 0x0A	; 10
    311c:	70 f4       	brcc	.+28     	; 0x313a <vfprintf+0xcc>
    311e:	f6 fe       	sbrs	r15, 6
    3120:	05 c0       	rjmp	.+10     	; 0x312c <vfprintf+0xbe>
    3122:	98 9c       	mul	r9, r8
    3124:	90 2c       	mov	r9, r0
    3126:	11 24       	eor	r1, r1
    3128:	98 0e       	add	r9, r24
    312a:	15 c0       	rjmp	.+42     	; 0x3156 <vfprintf+0xe8>
    312c:	e8 9c       	mul	r14, r8
    312e:	e0 2c       	mov	r14, r0
    3130:	11 24       	eor	r1, r1
    3132:	e8 0e       	add	r14, r24
    3134:	f0 e2       	ldi	r31, 0x20	; 32
    3136:	ff 2a       	or	r15, r31
    3138:	0e c0       	rjmp	.+28     	; 0x3156 <vfprintf+0xe8>
    313a:	9e 32       	cpi	r25, 0x2E	; 46
    313c:	29 f4       	brne	.+10     	; 0x3148 <vfprintf+0xda>
    313e:	f6 fc       	sbrc	r15, 6
    3140:	6b c1       	rjmp	.+726    	; 0x3418 <vfprintf+0x3aa>
    3142:	40 e4       	ldi	r20, 0x40	; 64
    3144:	f4 2a       	or	r15, r20
    3146:	07 c0       	rjmp	.+14     	; 0x3156 <vfprintf+0xe8>
    3148:	9c 36       	cpi	r25, 0x6C	; 108
    314a:	19 f4       	brne	.+6      	; 0x3152 <vfprintf+0xe4>
    314c:	50 e8       	ldi	r21, 0x80	; 128
    314e:	f5 2a       	or	r15, r21
    3150:	02 c0       	rjmp	.+4      	; 0x3156 <vfprintf+0xe8>
    3152:	98 36       	cpi	r25, 0x68	; 104
    3154:	49 f4       	brne	.+18     	; 0x3168 <vfprintf+0xfa>
    3156:	f2 01       	movw	r30, r4
    3158:	23 fd       	sbrc	r18, 3
    315a:	95 91       	lpm	r25, Z+
    315c:	23 ff       	sbrs	r18, 3
    315e:	91 91       	ld	r25, Z+
    3160:	2f 01       	movw	r4, r30
    3162:	99 23       	and	r25, r25
    3164:	09 f0       	breq	.+2      	; 0x3168 <vfprintf+0xfa>
    3166:	b8 cf       	rjmp	.-144    	; 0x30d8 <vfprintf+0x6a>
    3168:	89 2f       	mov	r24, r25
    316a:	85 54       	subi	r24, 0x45	; 69
    316c:	83 30       	cpi	r24, 0x03	; 3
    316e:	18 f0       	brcs	.+6      	; 0x3176 <vfprintf+0x108>
    3170:	80 52       	subi	r24, 0x20	; 32
    3172:	83 30       	cpi	r24, 0x03	; 3
    3174:	38 f4       	brcc	.+14     	; 0x3184 <vfprintf+0x116>
    3176:	44 e0       	ldi	r20, 0x04	; 4
    3178:	50 e0       	ldi	r21, 0x00	; 0
    317a:	a4 0e       	add	r10, r20
    317c:	b5 1e       	adc	r11, r21
    317e:	5f e3       	ldi	r21, 0x3F	; 63
    3180:	59 83       	std	Y+1, r21	; 0x01
    3182:	0f c0       	rjmp	.+30     	; 0x31a2 <vfprintf+0x134>
    3184:	93 36       	cpi	r25, 0x63	; 99
    3186:	31 f0       	breq	.+12     	; 0x3194 <vfprintf+0x126>
    3188:	93 37       	cpi	r25, 0x73	; 115
    318a:	79 f0       	breq	.+30     	; 0x31aa <vfprintf+0x13c>
    318c:	93 35       	cpi	r25, 0x53	; 83
    318e:	09 f0       	breq	.+2      	; 0x3192 <vfprintf+0x124>
    3190:	56 c0       	rjmp	.+172    	; 0x323e <vfprintf+0x1d0>
    3192:	20 c0       	rjmp	.+64     	; 0x31d4 <vfprintf+0x166>
    3194:	f5 01       	movw	r30, r10
    3196:	80 81       	ld	r24, Z
    3198:	89 83       	std	Y+1, r24	; 0x01
    319a:	42 e0       	ldi	r20, 0x02	; 2
    319c:	50 e0       	ldi	r21, 0x00	; 0
    319e:	a4 0e       	add	r10, r20
    31a0:	b5 1e       	adc	r11, r21
    31a2:	61 01       	movw	r12, r2
    31a4:	01 e0       	ldi	r16, 0x01	; 1
    31a6:	10 e0       	ldi	r17, 0x00	; 0
    31a8:	12 c0       	rjmp	.+36     	; 0x31ce <vfprintf+0x160>
    31aa:	f5 01       	movw	r30, r10
    31ac:	c0 80       	ld	r12, Z
    31ae:	d1 80       	ldd	r13, Z+1	; 0x01
    31b0:	f6 fc       	sbrc	r15, 6
    31b2:	03 c0       	rjmp	.+6      	; 0x31ba <vfprintf+0x14c>
    31b4:	6f ef       	ldi	r22, 0xFF	; 255
    31b6:	7f ef       	ldi	r23, 0xFF	; 255
    31b8:	02 c0       	rjmp	.+4      	; 0x31be <vfprintf+0x150>
    31ba:	69 2d       	mov	r22, r9
    31bc:	70 e0       	ldi	r23, 0x00	; 0
    31be:	42 e0       	ldi	r20, 0x02	; 2
    31c0:	50 e0       	ldi	r21, 0x00	; 0
    31c2:	a4 0e       	add	r10, r20
    31c4:	b5 1e       	adc	r11, r21
    31c6:	c6 01       	movw	r24, r12
    31c8:	0e 94 1f 1a 	call	0x343e	; 0x343e <strnlen>
    31cc:	8c 01       	movw	r16, r24
    31ce:	5f e7       	ldi	r21, 0x7F	; 127
    31d0:	f5 22       	and	r15, r21
    31d2:	14 c0       	rjmp	.+40     	; 0x31fc <vfprintf+0x18e>
    31d4:	f5 01       	movw	r30, r10
    31d6:	c0 80       	ld	r12, Z
    31d8:	d1 80       	ldd	r13, Z+1	; 0x01
    31da:	f6 fc       	sbrc	r15, 6
    31dc:	03 c0       	rjmp	.+6      	; 0x31e4 <vfprintf+0x176>
    31de:	6f ef       	ldi	r22, 0xFF	; 255
    31e0:	7f ef       	ldi	r23, 0xFF	; 255
    31e2:	02 c0       	rjmp	.+4      	; 0x31e8 <vfprintf+0x17a>
    31e4:	69 2d       	mov	r22, r9
    31e6:	70 e0       	ldi	r23, 0x00	; 0
    31e8:	42 e0       	ldi	r20, 0x02	; 2
    31ea:	50 e0       	ldi	r21, 0x00	; 0
    31ec:	a4 0e       	add	r10, r20
    31ee:	b5 1e       	adc	r11, r21
    31f0:	c6 01       	movw	r24, r12
    31f2:	0e 94 14 1a 	call	0x3428	; 0x3428 <strnlen_P>
    31f6:	8c 01       	movw	r16, r24
    31f8:	50 e8       	ldi	r21, 0x80	; 128
    31fa:	f5 2a       	or	r15, r21
    31fc:	f3 fe       	sbrs	r15, 3
    31fe:	07 c0       	rjmp	.+14     	; 0x320e <vfprintf+0x1a0>
    3200:	1a c0       	rjmp	.+52     	; 0x3236 <vfprintf+0x1c8>
    3202:	80 e2       	ldi	r24, 0x20	; 32
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	b3 01       	movw	r22, r6
    3208:	0e 94 2a 1a 	call	0x3454	; 0x3454 <fputc>
    320c:	ea 94       	dec	r14
    320e:	8e 2d       	mov	r24, r14
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	08 17       	cp	r16, r24
    3214:	19 07       	cpc	r17, r25
    3216:	a8 f3       	brcs	.-22     	; 0x3202 <vfprintf+0x194>
    3218:	0e c0       	rjmp	.+28     	; 0x3236 <vfprintf+0x1c8>
    321a:	f6 01       	movw	r30, r12
    321c:	f7 fc       	sbrc	r15, 7
    321e:	85 91       	lpm	r24, Z+
    3220:	f7 fe       	sbrs	r15, 7
    3222:	81 91       	ld	r24, Z+
    3224:	6f 01       	movw	r12, r30
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	b3 01       	movw	r22, r6
    322a:	0e 94 2a 1a 	call	0x3454	; 0x3454 <fputc>
    322e:	e1 10       	cpse	r14, r1
    3230:	ea 94       	dec	r14
    3232:	01 50       	subi	r16, 0x01	; 1
    3234:	10 40       	sbci	r17, 0x00	; 0
    3236:	01 15       	cp	r16, r1
    3238:	11 05       	cpc	r17, r1
    323a:	79 f7       	brne	.-34     	; 0x321a <vfprintf+0x1ac>
    323c:	ea c0       	rjmp	.+468    	; 0x3412 <vfprintf+0x3a4>
    323e:	94 36       	cpi	r25, 0x64	; 100
    3240:	11 f0       	breq	.+4      	; 0x3246 <vfprintf+0x1d8>
    3242:	99 36       	cpi	r25, 0x69	; 105
    3244:	69 f5       	brne	.+90     	; 0x32a0 <vfprintf+0x232>
    3246:	f7 fe       	sbrs	r15, 7
    3248:	08 c0       	rjmp	.+16     	; 0x325a <vfprintf+0x1ec>
    324a:	f5 01       	movw	r30, r10
    324c:	20 81       	ld	r18, Z
    324e:	31 81       	ldd	r19, Z+1	; 0x01
    3250:	42 81       	ldd	r20, Z+2	; 0x02
    3252:	53 81       	ldd	r21, Z+3	; 0x03
    3254:	84 e0       	ldi	r24, 0x04	; 4
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	0a c0       	rjmp	.+20     	; 0x326e <vfprintf+0x200>
    325a:	f5 01       	movw	r30, r10
    325c:	80 81       	ld	r24, Z
    325e:	91 81       	ldd	r25, Z+1	; 0x01
    3260:	9c 01       	movw	r18, r24
    3262:	44 27       	eor	r20, r20
    3264:	37 fd       	sbrc	r19, 7
    3266:	40 95       	com	r20
    3268:	54 2f       	mov	r21, r20
    326a:	82 e0       	ldi	r24, 0x02	; 2
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	a8 0e       	add	r10, r24
    3270:	b9 1e       	adc	r11, r25
    3272:	9f e6       	ldi	r25, 0x6F	; 111
    3274:	f9 22       	and	r15, r25
    3276:	57 ff       	sbrs	r21, 7
    3278:	09 c0       	rjmp	.+18     	; 0x328c <vfprintf+0x21e>
    327a:	50 95       	com	r21
    327c:	40 95       	com	r20
    327e:	30 95       	com	r19
    3280:	21 95       	neg	r18
    3282:	3f 4f       	sbci	r19, 0xFF	; 255
    3284:	4f 4f       	sbci	r20, 0xFF	; 255
    3286:	5f 4f       	sbci	r21, 0xFF	; 255
    3288:	e0 e8       	ldi	r30, 0x80	; 128
    328a:	fe 2a       	or	r15, r30
    328c:	ca 01       	movw	r24, r20
    328e:	b9 01       	movw	r22, r18
    3290:	a1 01       	movw	r20, r2
    3292:	2a e0       	ldi	r18, 0x0A	; 10
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	0e 94 56 1a 	call	0x34ac	; 0x34ac <__ultoa_invert>
    329a:	d8 2e       	mov	r13, r24
    329c:	d2 18       	sub	r13, r2
    329e:	40 c0       	rjmp	.+128    	; 0x3320 <vfprintf+0x2b2>
    32a0:	95 37       	cpi	r25, 0x75	; 117
    32a2:	29 f4       	brne	.+10     	; 0x32ae <vfprintf+0x240>
    32a4:	1f 2d       	mov	r17, r15
    32a6:	1f 7e       	andi	r17, 0xEF	; 239
    32a8:	2a e0       	ldi	r18, 0x0A	; 10
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	1d c0       	rjmp	.+58     	; 0x32e8 <vfprintf+0x27a>
    32ae:	1f 2d       	mov	r17, r15
    32b0:	19 7f       	andi	r17, 0xF9	; 249
    32b2:	9f 36       	cpi	r25, 0x6F	; 111
    32b4:	61 f0       	breq	.+24     	; 0x32ce <vfprintf+0x260>
    32b6:	90 37       	cpi	r25, 0x70	; 112
    32b8:	20 f4       	brcc	.+8      	; 0x32c2 <vfprintf+0x254>
    32ba:	98 35       	cpi	r25, 0x58	; 88
    32bc:	09 f0       	breq	.+2      	; 0x32c0 <vfprintf+0x252>
    32be:	ac c0       	rjmp	.+344    	; 0x3418 <vfprintf+0x3aa>
    32c0:	0f c0       	rjmp	.+30     	; 0x32e0 <vfprintf+0x272>
    32c2:	90 37       	cpi	r25, 0x70	; 112
    32c4:	39 f0       	breq	.+14     	; 0x32d4 <vfprintf+0x266>
    32c6:	98 37       	cpi	r25, 0x78	; 120
    32c8:	09 f0       	breq	.+2      	; 0x32cc <vfprintf+0x25e>
    32ca:	a6 c0       	rjmp	.+332    	; 0x3418 <vfprintf+0x3aa>
    32cc:	04 c0       	rjmp	.+8      	; 0x32d6 <vfprintf+0x268>
    32ce:	28 e0       	ldi	r18, 0x08	; 8
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	0a c0       	rjmp	.+20     	; 0x32e8 <vfprintf+0x27a>
    32d4:	10 61       	ori	r17, 0x10	; 16
    32d6:	14 fd       	sbrc	r17, 4
    32d8:	14 60       	ori	r17, 0x04	; 4
    32da:	20 e1       	ldi	r18, 0x10	; 16
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	04 c0       	rjmp	.+8      	; 0x32e8 <vfprintf+0x27a>
    32e0:	14 fd       	sbrc	r17, 4
    32e2:	16 60       	ori	r17, 0x06	; 6
    32e4:	20 e1       	ldi	r18, 0x10	; 16
    32e6:	32 e0       	ldi	r19, 0x02	; 2
    32e8:	17 ff       	sbrs	r17, 7
    32ea:	08 c0       	rjmp	.+16     	; 0x32fc <vfprintf+0x28e>
    32ec:	f5 01       	movw	r30, r10
    32ee:	60 81       	ld	r22, Z
    32f0:	71 81       	ldd	r23, Z+1	; 0x01
    32f2:	82 81       	ldd	r24, Z+2	; 0x02
    32f4:	93 81       	ldd	r25, Z+3	; 0x03
    32f6:	44 e0       	ldi	r20, 0x04	; 4
    32f8:	50 e0       	ldi	r21, 0x00	; 0
    32fa:	08 c0       	rjmp	.+16     	; 0x330c <vfprintf+0x29e>
    32fc:	f5 01       	movw	r30, r10
    32fe:	80 81       	ld	r24, Z
    3300:	91 81       	ldd	r25, Z+1	; 0x01
    3302:	bc 01       	movw	r22, r24
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	42 e0       	ldi	r20, 0x02	; 2
    330a:	50 e0       	ldi	r21, 0x00	; 0
    330c:	a4 0e       	add	r10, r20
    330e:	b5 1e       	adc	r11, r21
    3310:	a1 01       	movw	r20, r2
    3312:	0e 94 56 1a 	call	0x34ac	; 0x34ac <__ultoa_invert>
    3316:	d8 2e       	mov	r13, r24
    3318:	d2 18       	sub	r13, r2
    331a:	8f e7       	ldi	r24, 0x7F	; 127
    331c:	f8 2e       	mov	r15, r24
    331e:	f1 22       	and	r15, r17
    3320:	f6 fe       	sbrs	r15, 6
    3322:	0b c0       	rjmp	.+22     	; 0x333a <vfprintf+0x2cc>
    3324:	5e ef       	ldi	r21, 0xFE	; 254
    3326:	f5 22       	and	r15, r21
    3328:	d9 14       	cp	r13, r9
    332a:	38 f4       	brcc	.+14     	; 0x333a <vfprintf+0x2cc>
    332c:	f4 fe       	sbrs	r15, 4
    332e:	07 c0       	rjmp	.+14     	; 0x333e <vfprintf+0x2d0>
    3330:	f2 fc       	sbrc	r15, 2
    3332:	05 c0       	rjmp	.+10     	; 0x333e <vfprintf+0x2d0>
    3334:	8f ee       	ldi	r24, 0xEF	; 239
    3336:	f8 22       	and	r15, r24
    3338:	02 c0       	rjmp	.+4      	; 0x333e <vfprintf+0x2d0>
    333a:	1d 2d       	mov	r17, r13
    333c:	01 c0       	rjmp	.+2      	; 0x3340 <vfprintf+0x2d2>
    333e:	19 2d       	mov	r17, r9
    3340:	f4 fe       	sbrs	r15, 4
    3342:	0d c0       	rjmp	.+26     	; 0x335e <vfprintf+0x2f0>
    3344:	fe 01       	movw	r30, r28
    3346:	ed 0d       	add	r30, r13
    3348:	f1 1d       	adc	r31, r1
    334a:	80 81       	ld	r24, Z
    334c:	80 33       	cpi	r24, 0x30	; 48
    334e:	19 f4       	brne	.+6      	; 0x3356 <vfprintf+0x2e8>
    3350:	99 ee       	ldi	r25, 0xE9	; 233
    3352:	f9 22       	and	r15, r25
    3354:	08 c0       	rjmp	.+16     	; 0x3366 <vfprintf+0x2f8>
    3356:	1f 5f       	subi	r17, 0xFF	; 255
    3358:	f2 fe       	sbrs	r15, 2
    335a:	05 c0       	rjmp	.+10     	; 0x3366 <vfprintf+0x2f8>
    335c:	03 c0       	rjmp	.+6      	; 0x3364 <vfprintf+0x2f6>
    335e:	8f 2d       	mov	r24, r15
    3360:	86 78       	andi	r24, 0x86	; 134
    3362:	09 f0       	breq	.+2      	; 0x3366 <vfprintf+0x2f8>
    3364:	1f 5f       	subi	r17, 0xFF	; 255
    3366:	0f 2d       	mov	r16, r15
    3368:	f3 fc       	sbrc	r15, 3
    336a:	14 c0       	rjmp	.+40     	; 0x3394 <vfprintf+0x326>
    336c:	f0 fe       	sbrs	r15, 0
    336e:	0f c0       	rjmp	.+30     	; 0x338e <vfprintf+0x320>
    3370:	1e 15       	cp	r17, r14
    3372:	10 f0       	brcs	.+4      	; 0x3378 <vfprintf+0x30a>
    3374:	9d 2c       	mov	r9, r13
    3376:	0b c0       	rjmp	.+22     	; 0x338e <vfprintf+0x320>
    3378:	9d 2c       	mov	r9, r13
    337a:	9e 0c       	add	r9, r14
    337c:	91 1a       	sub	r9, r17
    337e:	1e 2d       	mov	r17, r14
    3380:	06 c0       	rjmp	.+12     	; 0x338e <vfprintf+0x320>
    3382:	80 e2       	ldi	r24, 0x20	; 32
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	b3 01       	movw	r22, r6
    3388:	0e 94 2a 1a 	call	0x3454	; 0x3454 <fputc>
    338c:	1f 5f       	subi	r17, 0xFF	; 255
    338e:	1e 15       	cp	r17, r14
    3390:	c0 f3       	brcs	.-16     	; 0x3382 <vfprintf+0x314>
    3392:	04 c0       	rjmp	.+8      	; 0x339c <vfprintf+0x32e>
    3394:	1e 15       	cp	r17, r14
    3396:	10 f4       	brcc	.+4      	; 0x339c <vfprintf+0x32e>
    3398:	e1 1a       	sub	r14, r17
    339a:	01 c0       	rjmp	.+2      	; 0x339e <vfprintf+0x330>
    339c:	ee 24       	eor	r14, r14
    339e:	04 ff       	sbrs	r16, 4
    33a0:	0f c0       	rjmp	.+30     	; 0x33c0 <vfprintf+0x352>
    33a2:	80 e3       	ldi	r24, 0x30	; 48
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	b3 01       	movw	r22, r6
    33a8:	0e 94 2a 1a 	call	0x3454	; 0x3454 <fputc>
    33ac:	02 ff       	sbrs	r16, 2
    33ae:	1d c0       	rjmp	.+58     	; 0x33ea <vfprintf+0x37c>
    33b0:	01 fd       	sbrc	r16, 1
    33b2:	03 c0       	rjmp	.+6      	; 0x33ba <vfprintf+0x34c>
    33b4:	88 e7       	ldi	r24, 0x78	; 120
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	0e c0       	rjmp	.+28     	; 0x33d6 <vfprintf+0x368>
    33ba:	88 e5       	ldi	r24, 0x58	; 88
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	0b c0       	rjmp	.+22     	; 0x33d6 <vfprintf+0x368>
    33c0:	80 2f       	mov	r24, r16
    33c2:	86 78       	andi	r24, 0x86	; 134
    33c4:	91 f0       	breq	.+36     	; 0x33ea <vfprintf+0x37c>
    33c6:	01 ff       	sbrs	r16, 1
    33c8:	02 c0       	rjmp	.+4      	; 0x33ce <vfprintf+0x360>
    33ca:	8b e2       	ldi	r24, 0x2B	; 43
    33cc:	01 c0       	rjmp	.+2      	; 0x33d0 <vfprintf+0x362>
    33ce:	80 e2       	ldi	r24, 0x20	; 32
    33d0:	f7 fc       	sbrc	r15, 7
    33d2:	8d e2       	ldi	r24, 0x2D	; 45
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	b3 01       	movw	r22, r6
    33d8:	0e 94 2a 1a 	call	0x3454	; 0x3454 <fputc>
    33dc:	06 c0       	rjmp	.+12     	; 0x33ea <vfprintf+0x37c>
    33de:	80 e3       	ldi	r24, 0x30	; 48
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	b3 01       	movw	r22, r6
    33e4:	0e 94 2a 1a 	call	0x3454	; 0x3454 <fputc>
    33e8:	9a 94       	dec	r9
    33ea:	d9 14       	cp	r13, r9
    33ec:	c0 f3       	brcs	.-16     	; 0x33de <vfprintf+0x370>
    33ee:	da 94       	dec	r13
    33f0:	f1 01       	movw	r30, r2
    33f2:	ed 0d       	add	r30, r13
    33f4:	f1 1d       	adc	r31, r1
    33f6:	80 81       	ld	r24, Z
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	b3 01       	movw	r22, r6
    33fc:	0e 94 2a 1a 	call	0x3454	; 0x3454 <fputc>
    3400:	dd 20       	and	r13, r13
    3402:	a9 f7       	brne	.-22     	; 0x33ee <vfprintf+0x380>
    3404:	06 c0       	rjmp	.+12     	; 0x3412 <vfprintf+0x3a4>
    3406:	80 e2       	ldi	r24, 0x20	; 32
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	b3 01       	movw	r22, r6
    340c:	0e 94 2a 1a 	call	0x3454	; 0x3454 <fputc>
    3410:	ea 94       	dec	r14
    3412:	ee 20       	and	r14, r14
    3414:	c1 f7       	brne	.-16     	; 0x3406 <vfprintf+0x398>
    3416:	43 ce       	rjmp	.-890    	; 0x309e <vfprintf+0x30>
    3418:	f3 01       	movw	r30, r6
    341a:	66 81       	ldd	r22, Z+6	; 0x06
    341c:	77 81       	ldd	r23, Z+7	; 0x07
    341e:	cb 01       	movw	r24, r22
    3420:	2b 96       	adiw	r28, 0x0b	; 11
    3422:	e2 e1       	ldi	r30, 0x12	; 18
    3424:	0c 94 d0 1a 	jmp	0x35a0	; 0x35a0 <__epilogue_restores__>

00003428 <strnlen_P>:
    3428:	fc 01       	movw	r30, r24
    342a:	05 90       	lpm	r0, Z+
    342c:	61 50       	subi	r22, 0x01	; 1
    342e:	70 40       	sbci	r23, 0x00	; 0
    3430:	01 10       	cpse	r0, r1
    3432:	d8 f7       	brcc	.-10     	; 0x342a <strnlen_P+0x2>
    3434:	80 95       	com	r24
    3436:	90 95       	com	r25
    3438:	8e 0f       	add	r24, r30
    343a:	9f 1f       	adc	r25, r31
    343c:	08 95       	ret

0000343e <strnlen>:
    343e:	fc 01       	movw	r30, r24
    3440:	61 50       	subi	r22, 0x01	; 1
    3442:	70 40       	sbci	r23, 0x00	; 0
    3444:	01 90       	ld	r0, Z+
    3446:	01 10       	cpse	r0, r1
    3448:	d8 f7       	brcc	.-10     	; 0x3440 <strnlen+0x2>
    344a:	80 95       	com	r24
    344c:	90 95       	com	r25
    344e:	8e 0f       	add	r24, r30
    3450:	9f 1f       	adc	r25, r31
    3452:	08 95       	ret

00003454 <fputc>:
    3454:	0f 93       	push	r16
    3456:	1f 93       	push	r17
    3458:	cf 93       	push	r28
    345a:	df 93       	push	r29
    345c:	8c 01       	movw	r16, r24
    345e:	eb 01       	movw	r28, r22
    3460:	8b 81       	ldd	r24, Y+3	; 0x03
    3462:	81 ff       	sbrs	r24, 1
    3464:	1b c0       	rjmp	.+54     	; 0x349c <fputc+0x48>
    3466:	82 ff       	sbrs	r24, 2
    3468:	0d c0       	rjmp	.+26     	; 0x3484 <fputc+0x30>
    346a:	2e 81       	ldd	r18, Y+6	; 0x06
    346c:	3f 81       	ldd	r19, Y+7	; 0x07
    346e:	8c 81       	ldd	r24, Y+4	; 0x04
    3470:	9d 81       	ldd	r25, Y+5	; 0x05
    3472:	28 17       	cp	r18, r24
    3474:	39 07       	cpc	r19, r25
    3476:	64 f4       	brge	.+24     	; 0x3490 <fputc+0x3c>
    3478:	e8 81       	ld	r30, Y
    347a:	f9 81       	ldd	r31, Y+1	; 0x01
    347c:	01 93       	st	Z+, r16
    347e:	f9 83       	std	Y+1, r31	; 0x01
    3480:	e8 83       	st	Y, r30
    3482:	06 c0       	rjmp	.+12     	; 0x3490 <fputc+0x3c>
    3484:	e8 85       	ldd	r30, Y+8	; 0x08
    3486:	f9 85       	ldd	r31, Y+9	; 0x09
    3488:	80 2f       	mov	r24, r16
    348a:	09 95       	icall
    348c:	89 2b       	or	r24, r25
    348e:	31 f4       	brne	.+12     	; 0x349c <fputc+0x48>
    3490:	8e 81       	ldd	r24, Y+6	; 0x06
    3492:	9f 81       	ldd	r25, Y+7	; 0x07
    3494:	01 96       	adiw	r24, 0x01	; 1
    3496:	9f 83       	std	Y+7, r25	; 0x07
    3498:	8e 83       	std	Y+6, r24	; 0x06
    349a:	02 c0       	rjmp	.+4      	; 0x34a0 <fputc+0x4c>
    349c:	0f ef       	ldi	r16, 0xFF	; 255
    349e:	1f ef       	ldi	r17, 0xFF	; 255
    34a0:	c8 01       	movw	r24, r16
    34a2:	df 91       	pop	r29
    34a4:	cf 91       	pop	r28
    34a6:	1f 91       	pop	r17
    34a8:	0f 91       	pop	r16
    34aa:	08 95       	ret

000034ac <__ultoa_invert>:
    34ac:	fa 01       	movw	r30, r20
    34ae:	aa 27       	eor	r26, r26
    34b0:	28 30       	cpi	r18, 0x08	; 8
    34b2:	51 f1       	breq	.+84     	; 0x3508 <__ultoa_invert+0x5c>
    34b4:	20 31       	cpi	r18, 0x10	; 16
    34b6:	81 f1       	breq	.+96     	; 0x3518 <__ultoa_invert+0x6c>
    34b8:	e8 94       	clt
    34ba:	6f 93       	push	r22
    34bc:	6e 7f       	andi	r22, 0xFE	; 254
    34be:	6e 5f       	subi	r22, 0xFE	; 254
    34c0:	7f 4f       	sbci	r23, 0xFF	; 255
    34c2:	8f 4f       	sbci	r24, 0xFF	; 255
    34c4:	9f 4f       	sbci	r25, 0xFF	; 255
    34c6:	af 4f       	sbci	r26, 0xFF	; 255
    34c8:	b1 e0       	ldi	r27, 0x01	; 1
    34ca:	3e d0       	rcall	.+124    	; 0x3548 <__ultoa_invert+0x9c>
    34cc:	b4 e0       	ldi	r27, 0x04	; 4
    34ce:	3c d0       	rcall	.+120    	; 0x3548 <__ultoa_invert+0x9c>
    34d0:	67 0f       	add	r22, r23
    34d2:	78 1f       	adc	r23, r24
    34d4:	89 1f       	adc	r24, r25
    34d6:	9a 1f       	adc	r25, r26
    34d8:	a1 1d       	adc	r26, r1
    34da:	68 0f       	add	r22, r24
    34dc:	79 1f       	adc	r23, r25
    34de:	8a 1f       	adc	r24, r26
    34e0:	91 1d       	adc	r25, r1
    34e2:	a1 1d       	adc	r26, r1
    34e4:	6a 0f       	add	r22, r26
    34e6:	71 1d       	adc	r23, r1
    34e8:	81 1d       	adc	r24, r1
    34ea:	91 1d       	adc	r25, r1
    34ec:	a1 1d       	adc	r26, r1
    34ee:	20 d0       	rcall	.+64     	; 0x3530 <__ultoa_invert+0x84>
    34f0:	09 f4       	brne	.+2      	; 0x34f4 <__ultoa_invert+0x48>
    34f2:	68 94       	set
    34f4:	3f 91       	pop	r19
    34f6:	2a e0       	ldi	r18, 0x0A	; 10
    34f8:	26 9f       	mul	r18, r22
    34fa:	11 24       	eor	r1, r1
    34fc:	30 19       	sub	r19, r0
    34fe:	30 5d       	subi	r19, 0xD0	; 208
    3500:	31 93       	st	Z+, r19
    3502:	de f6       	brtc	.-74     	; 0x34ba <__ultoa_invert+0xe>
    3504:	cf 01       	movw	r24, r30
    3506:	08 95       	ret
    3508:	46 2f       	mov	r20, r22
    350a:	47 70       	andi	r20, 0x07	; 7
    350c:	40 5d       	subi	r20, 0xD0	; 208
    350e:	41 93       	st	Z+, r20
    3510:	b3 e0       	ldi	r27, 0x03	; 3
    3512:	0f d0       	rcall	.+30     	; 0x3532 <__ultoa_invert+0x86>
    3514:	c9 f7       	brne	.-14     	; 0x3508 <__ultoa_invert+0x5c>
    3516:	f6 cf       	rjmp	.-20     	; 0x3504 <__ultoa_invert+0x58>
    3518:	46 2f       	mov	r20, r22
    351a:	4f 70       	andi	r20, 0x0F	; 15
    351c:	40 5d       	subi	r20, 0xD0	; 208
    351e:	4a 33       	cpi	r20, 0x3A	; 58
    3520:	18 f0       	brcs	.+6      	; 0x3528 <__ultoa_invert+0x7c>
    3522:	49 5d       	subi	r20, 0xD9	; 217
    3524:	31 fd       	sbrc	r19, 1
    3526:	40 52       	subi	r20, 0x20	; 32
    3528:	41 93       	st	Z+, r20
    352a:	02 d0       	rcall	.+4      	; 0x3530 <__ultoa_invert+0x84>
    352c:	a9 f7       	brne	.-22     	; 0x3518 <__ultoa_invert+0x6c>
    352e:	ea cf       	rjmp	.-44     	; 0x3504 <__ultoa_invert+0x58>
    3530:	b4 e0       	ldi	r27, 0x04	; 4
    3532:	a6 95       	lsr	r26
    3534:	97 95       	ror	r25
    3536:	87 95       	ror	r24
    3538:	77 95       	ror	r23
    353a:	67 95       	ror	r22
    353c:	ba 95       	dec	r27
    353e:	c9 f7       	brne	.-14     	; 0x3532 <__ultoa_invert+0x86>
    3540:	00 97       	sbiw	r24, 0x00	; 0
    3542:	61 05       	cpc	r22, r1
    3544:	71 05       	cpc	r23, r1
    3546:	08 95       	ret
    3548:	9b 01       	movw	r18, r22
    354a:	ac 01       	movw	r20, r24
    354c:	0a 2e       	mov	r0, r26
    354e:	06 94       	lsr	r0
    3550:	57 95       	ror	r21
    3552:	47 95       	ror	r20
    3554:	37 95       	ror	r19
    3556:	27 95       	ror	r18
    3558:	ba 95       	dec	r27
    355a:	c9 f7       	brne	.-14     	; 0x354e <__ultoa_invert+0xa2>
    355c:	62 0f       	add	r22, r18
    355e:	73 1f       	adc	r23, r19
    3560:	84 1f       	adc	r24, r20
    3562:	95 1f       	adc	r25, r21
    3564:	a0 1d       	adc	r26, r0
    3566:	08 95       	ret

00003568 <__prologue_saves__>:
    3568:	2f 92       	push	r2
    356a:	3f 92       	push	r3
    356c:	4f 92       	push	r4
    356e:	5f 92       	push	r5
    3570:	6f 92       	push	r6
    3572:	7f 92       	push	r7
    3574:	8f 92       	push	r8
    3576:	9f 92       	push	r9
    3578:	af 92       	push	r10
    357a:	bf 92       	push	r11
    357c:	cf 92       	push	r12
    357e:	df 92       	push	r13
    3580:	ef 92       	push	r14
    3582:	ff 92       	push	r15
    3584:	0f 93       	push	r16
    3586:	1f 93       	push	r17
    3588:	cf 93       	push	r28
    358a:	df 93       	push	r29
    358c:	cd b7       	in	r28, 0x3d	; 61
    358e:	de b7       	in	r29, 0x3e	; 62
    3590:	ca 1b       	sub	r28, r26
    3592:	db 0b       	sbc	r29, r27
    3594:	0f b6       	in	r0, 0x3f	; 63
    3596:	f8 94       	cli
    3598:	de bf       	out	0x3e, r29	; 62
    359a:	0f be       	out	0x3f, r0	; 63
    359c:	cd bf       	out	0x3d, r28	; 61
    359e:	09 94       	ijmp

000035a0 <__epilogue_restores__>:
    35a0:	2a 88       	ldd	r2, Y+18	; 0x12
    35a2:	39 88       	ldd	r3, Y+17	; 0x11
    35a4:	48 88       	ldd	r4, Y+16	; 0x10
    35a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    35a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    35aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    35ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    35ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    35b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    35b2:	b9 84       	ldd	r11, Y+9	; 0x09
    35b4:	c8 84       	ldd	r12, Y+8	; 0x08
    35b6:	df 80       	ldd	r13, Y+7	; 0x07
    35b8:	ee 80       	ldd	r14, Y+6	; 0x06
    35ba:	fd 80       	ldd	r15, Y+5	; 0x05
    35bc:	0c 81       	ldd	r16, Y+4	; 0x04
    35be:	1b 81       	ldd	r17, Y+3	; 0x03
    35c0:	aa 81       	ldd	r26, Y+2	; 0x02
    35c2:	b9 81       	ldd	r27, Y+1	; 0x01
    35c4:	ce 0f       	add	r28, r30
    35c6:	d1 1d       	adc	r29, r1
    35c8:	0f b6       	in	r0, 0x3f	; 63
    35ca:	f8 94       	cli
    35cc:	de bf       	out	0x3e, r29	; 62
    35ce:	0f be       	out	0x3f, r0	; 63
    35d0:	cd bf       	out	0x3d, r28	; 61
    35d2:	ed 01       	movw	r28, r26
    35d4:	08 95       	ret

000035d6 <_exit>:
    35d6:	f8 94       	cli

000035d8 <__stop_program>:
    35d8:	ff cf       	rjmp	.-2      	; 0x35d8 <__stop_program>
